
Demo_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800e398  0800e398  0001e398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e730  0800e730  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e730  0800e730  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e730  0800e730  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e734  0800e734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f8  2000008c  0800e7c4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001684  0800e7c4  00021684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017223  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002993  00000000  00000000  000372df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  0003ade0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f05  00000000  00000000  0003be30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ddb  00000000  00000000  0005ed35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6917  00000000  00000000  00070b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  001474a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e37c 	.word	0x0800e37c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800e37c 	.word	0x0800e37c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c86:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c8e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f80e 	bl	8000cc2 <Lcd_init>

	return lcd;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	461d      	mov	r5, r3
 8000caa:	f107 0410 	add.w	r4, r7, #16
 8000cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdb0      	pop	{r4, r5, r7, pc}

08000cc2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]

			lcd_write_command(lcd, 0x33);
 8000cca:	2133      	movs	r1, #51	; 0x33
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f875 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f871 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000cda:	2128      	movs	r1, #40	; 0x28
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f86d 	bl	8000dbc <lcd_write_command>




	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f869 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D|OPT_B|OPT_C);		// Lcd-on, cursor-off, no-blink
 8000cea:	210f      	movs	r1, #15
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f865 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f861 	bl	8000dbc <lcd_write_command>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <Lcd_int+0x2c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00b ff18 	bl	800cb4c <siprintf>

	Lcd_string(lcd, buffer);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f806 	bl	8000d34 <Lcd_string>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800e398 	.word	0x0800e398

08000d34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e00a      	b.n	8000d5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f862 	bl	8000e18 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	3301      	adds	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	7bfc      	ldrb	r4, [r7, #15]
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fa3f 	bl	80001e0 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	429c      	cmp	r4, r3
 8000d66:	d3ed      	bcc.n	8000d44 <Lcd_string+0x10>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <Lcd_cursor+0x30>)
 8000d84:	5cd2      	ldrb	r2, [r2, r3]
 8000d86:	78bb      	ldrb	r3, [r7, #2]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	3b80      	subs	r3, #128	; 0x80
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f812 	bl	8000dbc <lcd_write_command>
	#endif
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	0800e4e4 	.word	0x0800e4e4

08000da4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000dac:	2101      	movs	r1, #1
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f804 	bl	8000dbc <lcd_write_command>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6898      	ldr	r0, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	899b      	ldrh	r3, [r3, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f007 fde0 	bl	8008998 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7d9b      	ldrb	r3, [r3, #22]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f842 	bl	8000e74 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f839 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e02:	e005      	b.n	8000e10 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2208      	movs	r2, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f832 	bl	8000e74 <lcd_write>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	899b      	ldrh	r3, [r3, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f007 fdb2 	bl	8008998 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d9b      	ldrb	r3, [r3, #22]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d111      	bne.n	8000e60 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f814 	bl	8000e74 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f80b 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e5e:	e005      	b.n	8000e6c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2208      	movs	r2, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f804 	bl	8000e74 <lcd_write>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
 8000e80:	4613      	mov	r3, r2
 8000e82:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	8819      	ldrh	r1, [r3, #0]
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f007 fd70 	bl	8008998 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e1      	bcc.n	8000e8a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6918      	ldr	r0, [r3, #16]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	8a9b      	ldrh	r3, [r3, #20]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f007 fd61 	bl	8008998 <HAL_GPIO_WritePin>
	DELAY(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f005 f8b8 	bl	800604c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6918      	ldr	r0, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8a9b      	ldrh	r3, [r3, #20]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f007 fd56 	bl	8008998 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_UART_RxCpltCallback>:
uint8_t scrollflag;
uint8_t currentflag;
//uint8_t start = 0;
//menu

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	if(Rxdata[0] != 10){
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	d00d      	beq.n	8000f20 <HAL_UART_RxCpltCallback+0x2c>

		Txdata[idx] = Rxdata[0];
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f10:	5499      	strb	r1, [r3, r2]
		idx++;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e013      	b.n	8000f48 <HAL_UART_RxCpltCallback+0x54>

	}
	else if (Rxdata[0] == 10){
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b0a      	cmp	r3, #10
 8000f26:	d10f      	bne.n	8000f48 <HAL_UART_RxCpltCallback+0x54>
		Txdata[idx] = Rxdata[0];
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f30:	7819      	ldrb	r1, [r3, #0]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f34:	5499      	strb	r1, [r3, r2]
		idx = 0;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_UART_RxCpltCallback+0x74>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		move = 1;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_UART_RxCpltCallback+0x78>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]

	}

	HAL_UART_Receive_IT(&huart2,Rxdata, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	f00a fc43 	bl	800b7d8 <HAL_UART_Receive_IT>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000030c 	.word	0x2000030c
 8000f60:	200000a8 	.word	0x200000a8
 8000f64:	20000310 	.word	0x20000310
 8000f68:	200001a0 	.word	0x200001a0
 8000f6c:	20000309 	.word	0x20000309
 8000f70:	2000150c 	.word	0x2000150c
 8000f74:	00000000 	.word	0x00000000

08000f78 <get_Pulse_array>:
float Amplitude_pulse = 1; //1V
float Offset_pulse= 1.2; //1.2V
uint16_t DutyCycleinput[100];
uint16_t Amplitude_pulseinput[100];
uint16_t Offset_pulseinput[100];
void get_Pulse_array(float DutyC, float PulseAmp, float PulseOff) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f82:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f86:	ed87 1a01 	vstr	s2, [r7, #4]

	for(countt = 0; countt < DutyC; countt++) {
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <get_Pulse_array+0x100>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e027      	b.n	8000fe2 <get_Pulse_array+0x6a>

		Pulse_array[countt] = (PulseAmp + PulseOff)*(4096)/3.3; //scale
 8000f92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800107c <get_Pulse_array+0x104>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	ee17 0a90 	vmov	r0, s15
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	a330      	add	r3, pc, #192	; (adr r3, 8001070 <get_Pulse_array+0xf8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fc52 	bl	800085c <__aeabi_ddiv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <get_Pulse_array+0x100>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461c      	mov	r4, r3
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4611      	mov	r1, r2
 8000fca:	f7ff fddf 	bl	8000b8c <__aeabi_d2uiz>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <get_Pulse_array+0x108>)
 8000fd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(countt = 0; countt < DutyC; countt++) {
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <get_Pulse_array+0x100>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <get_Pulse_array+0x100>)
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <get_Pulse_array+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dcca      	bgt.n	8000f92 <get_Pulse_array+0x1a>
	}

	for(countt = DutyC; countt< 100; countt++) {
 8000ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001004:	edc7 7a00 	vstr	s15, [r7]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <get_Pulse_array+0x100>)
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e023      	b.n	800105a <get_Pulse_array+0xe2>

		Pulse_array[countt] = (PulseOff)*(4096)/3.3;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800107c <get_Pulse_array+0x104>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	ee17 0a90 	vmov	r0, s15
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	a312      	add	r3, pc, #72	; (adr r3, 8001070 <get_Pulse_array+0xf8>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fc16 	bl	800085c <__aeabi_ddiv>
 8001030:	4603      	mov	r3, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4619      	mov	r1, r3
 8001036:	4622      	mov	r2, r4
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <get_Pulse_array+0x100>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461c      	mov	r4, r3
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	f7ff fda3 	bl	8000b8c <__aeabi_d2uiz>
 8001046:	4602      	mov	r2, r0
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <get_Pulse_array+0x108>)
 800104a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(countt = DutyC; countt< 100; countt++) {
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <get_Pulse_array+0x100>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <get_Pulse_array+0x100>)
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <get_Pulse_array+0x100>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b63      	cmp	r3, #99	; 0x63
 8001060:	d9d7      	bls.n	8001012 <get_Pulse_array+0x9a>
	}
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	200000ad 	.word	0x200000ad
 800107c:	45800000 	.word	0x45800000
 8001080:	20000324 	.word	0x20000324
 8001084:	00000000 	.word	0x00000000

08001088 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001088:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800108c:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8001090:	af04      	add	r7, sp, #16
	GPIO_PinState pinstateD;
	GPIO_PinState pinstateL;
	GPIO_PinState pinstateR;
	GPIO_PinState pinstateU;
	//	uint8_t display_state = MENU_STATE;
	uint32_t tLastM = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	uint32_t tLastD = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
	uint32_t tLastU = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
	uint32_t tLastR = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
	uint32_t tLastL = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	uint8_t buttonStateM = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3
	uint8_t buttonStateD = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 32d2 	strb.w	r3, [r7, #722]	; 0x2d2
	uint8_t buttonStateU = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 32d1 	strb.w	r3, [r7, #721]	; 0x2d1
	uint8_t buttonStateR = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 32d0 	strb.w	r3, [r7, #720]	; 0x2d0
	uint8_t buttonStateL = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ce:	f004 ff57 	bl	8005f80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010d2:	f004 f9a1 	bl	8005418 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	tLastM = HAL_GetTick();
 80010d6:	f004 ffad 	bl	8006034 <HAL_GetTick>
 80010da:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
	tLastD = HAL_GetTick();
 80010de:	f004 ffa9 	bl	8006034 <HAL_GetTick>
 80010e2:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	tLastU = HAL_GetTick();
 80010e6:	f004 ffa5 	bl	8006034 <HAL_GetTick>
 80010ea:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
	tLastR = HAL_GetTick();
 80010ee:	f004 ffa1 	bl	8006034 <HAL_GetTick>
 80010f2:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
	tLastL = HAL_GetTick();
 80010f6:	f004 ff9d 	bl	8006034 <HAL_GetTick>
 80010fa:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010fe:	f004 fbd3 	bl	80058a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001102:	f004 fbb3 	bl	800586c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001106:	f004 fb81 	bl	800580c <MX_USART2_UART_Init>
	MX_ADC3_Init();
 800110a:	f004 f9ed 	bl	80054e8 <MX_ADC3_Init>
	MX_TIM1_Init();
 800110e:	f004 fa85 	bl	800561c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001112:	f004 fb2f 	bl	8005774 <MX_TIM2_Init>
	MX_DAC1_Init();
 8001116:	f004 fa57 	bl	80055c8 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */


	HAL_UART_Transmit(&huart2, StudentNUM, 13, 20);
 800111a:	2314      	movs	r3, #20
 800111c:	220d      	movs	r2, #13
 800111e:	49c8      	ldr	r1, [pc, #800]	; (8001440 <main+0x3b8>)
 8001120:	48c8      	ldr	r0, [pc, #800]	; (8001444 <main+0x3bc>)
 8001122:	f00a fac5 	bl	800b6b0 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart2, Rxdata, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	49c7      	ldr	r1, [pc, #796]	; (8001448 <main+0x3c0>)
 800112a:	48c6      	ldr	r0, [pc, #792]	; (8001444 <main+0x3bc>)
 800112c:	f00a fb54 	bl	800b7d8 <HAL_UART_Receive_IT>

	uint16_t DC_value[100];
	uint16_t AC_value[100];
	uint8_t measurment_mode = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
	uint8_t menu_mode = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
	uint8_t DC_measure = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
	uint8_t DCidx;
	uint16_t AC_measure = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
	uint16_t ACidx;
	uint32_t DC_CS = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
	uint32_t AC_CS = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	volatile uint8_t parameter_a;
	volatile uint8_t parameter_o;
	volatile uint8_t parameter_f;
	volatile uint8_t parameter_d;
	volatile uint8_t parameter_c;
	volatile uint8_t signal_d = 1;
 8001154:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_s = 0;
 800115c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_p = 0;
 8001164:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	uint8_t output = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
	uint8_t count = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 32b6 	strb.w	r3, [r7, #694]	; 0x2b6
	uint16_t f1 = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	f8a7 32b4 	strh.w	r3, [r7, #692]	; 0x2b4
	uint16_t f2 = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	48b1      	ldr	r0, [pc, #708]	; (800144c <main+0x3c4>)
 8001188:	f009 f8ce 	bl	800a328 <HAL_TIM_OC_Start_IT>
	display_msg = 1;
 800118c:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <main+0x3c8>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
	int row = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	int col = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	uint8_t offset_output_value[4];
	offset_output_value[0] = 1;
 800119e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
	offset_output_value[1] = 2;
 80011a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011aa:	2202      	movs	r2, #2
 80011ac:	705a      	strb	r2, [r3, #1]
	offset_output_value[2] = 0;
 80011ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b2:	2200      	movs	r2, #0
 80011b4:	709a      	strb	r2, [r3, #2]
	offset_output_value[3] = 0;
 80011b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ba:	2200      	movs	r2, #0
 80011bc:	70da      	strb	r2, [r3, #3]
	uint8_t amplitude_output_value[4];
	amplitude_output_value[0] = 1;
 80011be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
	amplitude_output_value[1] = 0;
 80011c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ca:	2200      	movs	r2, #0
 80011cc:	705a      	strb	r2, [r3, #1]
	amplitude_output_value[2] = 0;
 80011ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d2:	2200      	movs	r2, #0
 80011d4:	709a      	strb	r2, [r3, #2]
	amplitude_output_value[3] = 0;
 80011d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011da:	2200      	movs	r2, #0
 80011dc:	70da      	strb	r2, [r3, #3]

	uint8_t frequency_output_value[4];
	frequency_output_value[0] = 1;
 80011de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
	frequency_output_value[1] = 0;
 80011e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
	frequency_output_value[2] = 0;
 80011ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011f2:	2200      	movs	r2, #0
 80011f4:	709a      	strb	r2, [r3, #2]
	frequency_output_value[3] = 0;
 80011f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011fa:	2200      	movs	r2, #0
 80011fc:	70da      	strb	r2, [r3, #3]

	uint8_t DC_offset_output_value[4];
	DC_offset_output_value[0] = 1;
 80011fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
	DC_offset_output_value[1] = 2;
 8001206:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800120a:	2202      	movs	r2, #2
 800120c:	705a      	strb	r2, [r3, #1]
	DC_offset_output_value[2] = 0;
 800120e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001212:	2200      	movs	r2, #0
 8001214:	709a      	strb	r2, [r3, #2]
	DC_offset_output_value[3] = 0;
 8001216:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800121a:	2200      	movs	r2, #0
 800121c:	70da      	strb	r2, [r3, #3]

	float DAC_amplitude_output = 1000;
 800121e:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <main+0x3cc>)
 8001220:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
	int DAC_amplitude_output_int = 1000;
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
	float DAC_offset_output = 1200;
 800122c:	4b8a      	ldr	r3, [pc, #552]	; (8001458 <main+0x3d0>)
 800122e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	int DAC_offset_output_int = 1000;
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
	uint16_t DAC_frequency_output = 1000;
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2
	uint16_t DAC_frequency_output_int = 1000;
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
	float DAC_DC_offset = 1200;
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <main+0x3d0>)
 800124c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	int DAC_DC_Offset_int = 1200;
 8001250:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001254:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	float DAC_DC_val;
	//	TIM2 -> EGR = ((TIM2->EGR)|0b01);
	TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
 8001258:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 800125c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f965 	bl	8000534 <__aeabi_i2d>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	461a      	mov	r2, r3
 8001270:	4623      	mov	r3, r4
 8001272:	a171      	add	r1, pc, #452	; (adr r1, 8001438 <main+0x3b0>)
 8001274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001278:	f7ff faf0 	bl	800085c <__aeabi_ddiv>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b74      	ldr	r3, [pc, #464]	; (800145c <main+0x3d4>)
 800128a:	f7ff f805 	bl	8000298 <__aeabi_dsub>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fc75 	bl	8000b8c <__aeabi_d2uiz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	62e3      	str	r3, [r4, #44]	; 0x2c
	uint8_t write_to_lcd = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
	uint8_t com_to_lcd = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	uint8_t command_1;
	uint8_t command_2;
	uint32_t send_com_lcd;

	/////
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	486a      	ldr	r0, [pc, #424]	; (8001460 <main+0x3d8>)
 80012b8:	f007 fb6e 	bl	8008998 <HAL_GPIO_WritePin>
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOC, GPIOC };
 80012bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c0:	4a68      	ldr	r2, [pc, #416]	; (8001464 <main+0x3dc>)
 80012c2:	461c      	mov	r4, r3
 80012c4:	4613      	mov	r3, r2
 80012c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_6, GPIO_PIN_8};
 80012cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <main+0x3e0>)
 80012d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d6:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOC, GPIO_PIN_4, GPIOB, GPIO_PIN_11, LCD_4_BIT_MODE);
 80012da:	f107 041c 	add.w	r4, r7, #28
 80012de:	4638      	mov	r0, r7
 80012e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80012e8:	2300      	movs	r3, #0
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <main+0x3d8>)
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2310      	movs	r3, #16
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4b5c      	ldr	r3, [pc, #368]	; (800146c <main+0x3e4>)
 80012fc:	f7ff fcb6 	bl	8000c6c <Lcd_create>
 8001300:	463b      	mov	r3, r7
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800130c:	e884 0003 	stmia.w	r4, {r0, r1}
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		//middle
		pinstateM = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001310:	2110      	movs	r1, #16
 8001312:	4853      	ldr	r0, [pc, #332]	; (8001460 <main+0x3d8>)
 8001314:	f007 fb28 	bl	8008968 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
		if (buttonStateM == 0)
 800131e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d113      	bne.n	800134e <main+0x2c6>
		{
			if ((pinstateM == GPIO_PIN_RESET) && ((HAL_GetTick() - tLastM) >= 10))
 8001326:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800132a:	2b00      	cmp	r3, #0
 800132c:	d129      	bne.n	8001382 <main+0x2fa>
 800132e:	f004 fe81 	bl	8006034 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b09      	cmp	r3, #9
 800133c:	d921      	bls.n	8001382 <main+0x2fa>
			{
				// button pushed down
				buttonStateM = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3
				tLastM = HAL_GetTick();
 8001344:	f004 fe76 	bl	8006034 <HAL_GetTick>
 8001348:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 800134c:	e019      	b.n	8001382 <main+0x2fa>
			}
		}
		else if (buttonStateM == 1)
 800134e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d115      	bne.n	8001382 <main+0x2fa>
		{
			if ((pinstateM == GPIO_PIN_SET) && ((HAL_GetTick() - tLastM) >= 10))
 8001356:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800135a:	2b01      	cmp	r3, #1
 800135c:	d111      	bne.n	8001382 <main+0x2fa>
 800135e:	f004 fe69 	bl	8006034 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b09      	cmp	r3, #9
 800136c:	d909      	bls.n	8001382 <main+0x2fa>
			{
				// button released
				buttonUpdate = 1;
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <main+0x3e8>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
				//				}
				//				else if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) == 0){
				//					menu_mode = 0;
				//					measurment_mode = 1;
				//				}
				buttonStateM = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3
				tLastM = HAL_GetTick();
 800137a:	f004 fe5b 	bl	8006034 <HAL_GetTick>
 800137e:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
		}
		//middle


		//down
		pinstateD = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001386:	4836      	ldr	r0, [pc, #216]	; (8001460 <main+0x3d8>)
 8001388:	f007 faee 	bl	8008968 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
		if (buttonStateD == 0)
 8001392:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d113      	bne.n	80013c2 <main+0x33a>
		{
			if ((pinstateD == GPIO_PIN_RESET) && ((HAL_GetTick() - tLastD) >= 10))
 800139a:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d129      	bne.n	80013f6 <main+0x36e>
 80013a2:	f004 fe47 	bl	8006034 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d921      	bls.n	80013f6 <main+0x36e>
			{
				// button pushed down
				buttonStateD = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 32d2 	strb.w	r3, [r7, #722]	; 0x2d2
				tLastD = HAL_GetTick();
 80013b8:	f004 fe3c 	bl	8006034 <HAL_GetTick>
 80013bc:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
 80013c0:	e019      	b.n	80013f6 <main+0x36e>
			}
		}
		else if (buttonStateD == 1)
 80013c2:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d115      	bne.n	80013f6 <main+0x36e>
		{
			if ((pinstateD == GPIO_PIN_SET) && ((HAL_GetTick() - tLastD) >= 10))
 80013ca:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d111      	bne.n	80013f6 <main+0x36e>
 80013d2:	f004 fe2f 	bl	8006034 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d909      	bls.n	80013f6 <main+0x36e>
			{
				// button released
				buttonUpdate = 1;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <main+0x3e8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

				buttonStateD = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 32d2 	strb.w	r3, [r7, #722]	; 0x2d2
				tLastD = HAL_GetTick();
 80013ee:	f004 fe21 	bl	8006034 <HAL_GetTick>
 80013f2:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
		}
		//down


		//up
		pinstateU = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <main+0x3d8>)
 80013fa:	f007 fab5 	bl	8008968 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		if (buttonStateU == 0)
 8001404:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d133      	bne.n	8001474 <main+0x3ec>
		{
			if ((pinstateU == GPIO_PIN_RESET) && ((HAL_GetTick() - tLastU) >= 10))
 800140c:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d149      	bne.n	80014a8 <main+0x420>
 8001414:	f004 fe0e 	bl	8006034 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b09      	cmp	r3, #9
 8001422:	d941      	bls.n	80014a8 <main+0x420>
			{
				// button pushed down
				buttonStateU = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 32d1 	strb.w	r3, [r7, #721]	; 0x2d1
				tLastD = HAL_GetTick();
 800142a:	f004 fe03 	bl	8006034 <HAL_GetTick>
 800142e:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
 8001432:	e039      	b.n	80014a8 <main+0x420>
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	41912a88 	.word	0x41912a88
 8001440:	20000000 	.word	0x20000000
 8001444:	2000150c 	.word	0x2000150c
 8001448:	2000030c 	.word	0x2000030c
 800144c:	200004bc 	.word	0x200004bc
 8001450:	20001592 	.word	0x20001592
 8001454:	447a0000 	.word	0x447a0000
 8001458:	44960000 	.word	0x44960000
 800145c:	3ff00000 	.word	0x3ff00000
 8001460:	48000400 	.word	0x48000400
 8001464:	0800e4cc 	.word	0x0800e4cc
 8001468:	0800e4dc 	.word	0x0800e4dc
 800146c:	48000800 	.word	0x48000800
 8001470:	2000000f 	.word	0x2000000f
			}
		}
		else if (buttonStateU == 1)
 8001474:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d115      	bne.n	80014a8 <main+0x420>
		{
			if ((pinstateU == GPIO_PIN_SET) && ((HAL_GetTick() - tLastU) >= 10))
 800147c:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 8001480:	2b01      	cmp	r3, #1
 8001482:	d111      	bne.n	80014a8 <main+0x420>
 8001484:	f004 fdd6 	bl	8006034 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b09      	cmp	r3, #9
 8001492:	d909      	bls.n	80014a8 <main+0x420>
			{
				// button released
				buttonUpdate = 1;
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <main+0x4d0>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
				buttonStateU = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 32d1 	strb.w	r3, [r7, #721]	; 0x2d1
				tLastU = HAL_GetTick();
 80014a0:	f004 fdc8 	bl	8006034 <HAL_GetTick>
 80014a4:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
		}
		//up


		//left
		pinstateL = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80014a8:	2120      	movs	r1, #32
 80014aa:	482c      	ldr	r0, [pc, #176]	; (800155c <main+0x4d4>)
 80014ac:	f007 fa5c 	bl	8008968 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		if (buttonStateL == 0)
 80014b6:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d113      	bne.n	80014e6 <main+0x45e>
		{
			if ((pinstateL == GPIO_PIN_RESET) && ((HAL_GetTick() - tLastL) >= 10))
 80014be:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d129      	bne.n	800151a <main+0x492>
 80014c6:	f004 fdb5 	bl	8006034 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d921      	bls.n	800151a <main+0x492>
			{
				// button pushed down
				buttonStateL = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				tLastL = HAL_GetTick();
 80014dc:	f004 fdaa 	bl	8006034 <HAL_GetTick>
 80014e0:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
 80014e4:	e019      	b.n	800151a <main+0x492>
			}
		}
		else if (buttonStateL == 1)
 80014e6:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d115      	bne.n	800151a <main+0x492>
		{
			if ((pinstateL == GPIO_PIN_SET) && ((HAL_GetTick() - tLastL) >= 10))
 80014ee:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d111      	bne.n	800151a <main+0x492>
 80014f6:	f004 fd9d 	bl	8006034 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b09      	cmp	r3, #9
 8001504:	d909      	bls.n	800151a <main+0x492>
			{
				// button released
				buttonUpdate = 1;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <main+0x4d0>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				buttonStateL = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				tLastL = HAL_GetTick();
 8001512:	f004 fd8f 	bl	8006034 <HAL_GetTick>
 8001516:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		}
		//left


		//right
		pinstateR = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <main+0x4d4>)
 800151e:	f007 fa23 	bl	8008968 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 327a 	strb.w	r3, [r7, #634]	; 0x27a
		if (buttonStateR == 0)
 8001528:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d117      	bne.n	8001560 <main+0x4d8>
		{
			if ((pinstateR == GPIO_PIN_RESET) && ((HAL_GetTick() - tLastR) >= 10))
 8001530:	f897 327a 	ldrb.w	r3, [r7, #634]	; 0x27a
 8001534:	2b00      	cmp	r3, #0
 8001536:	d12d      	bne.n	8001594 <main+0x50c>
 8001538:	f004 fd7c 	bl	8006034 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b09      	cmp	r3, #9
 8001546:	d925      	bls.n	8001594 <main+0x50c>
			{
				// button pushed down
				buttonStateR = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 32d0 	strb.w	r3, [r7, #720]	; 0x2d0
				tLastR = HAL_GetTick();
 800154e:	f004 fd71 	bl	8006034 <HAL_GetTick>
 8001552:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
 8001556:	e01d      	b.n	8001594 <main+0x50c>
 8001558:	2000000f 	.word	0x2000000f
 800155c:	48000400 	.word	0x48000400
			}
		}
		else if (buttonStateR == 1)
 8001560:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d115      	bne.n	8001594 <main+0x50c>
		{
			if ((pinstateR == GPIO_PIN_SET) && ((HAL_GetTick() - tLastR) >= 10))
 8001568:	f897 327a 	ldrb.w	r3, [r7, #634]	; 0x27a
 800156c:	2b01      	cmp	r3, #1
 800156e:	d111      	bne.n	8001594 <main+0x50c>
 8001570:	f004 fd60 	bl	8006034 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b09      	cmp	r3, #9
 800157e:	d909      	bls.n	8001594 <main+0x50c>
			{
				// button released
				buttonUpdate = 1;
 8001580:	4bb6      	ldr	r3, [pc, #728]	; (800185c <main+0x7d4>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
				buttonStateR = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 32d0 	strb.w	r3, [r7, #720]	; 0x2d0
				tLastR = HAL_GetTick();
 800158c:	f004 fd52 	bl	8006034 <HAL_GetTick>
 8001590:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
		//			rows = 0;
		//			buttonUpdate = 0;
		//		}

		//default
		if(rows == 0 && cols == 1)
 8001594:	4bb2      	ldr	r3, [pc, #712]	; (8001860 <main+0x7d8>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d145      	bne.n	8001628 <main+0x5a0>
 800159c:	4bb1      	ldr	r3, [pc, #708]	; (8001864 <main+0x7dc>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d141      	bne.n	8001628 <main+0x5a0>
		{
			//			buttonUpdate = 1;
			if (buttonStateD && buttonUpdate)
 80015a4:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <main+0x532>
 80015ac:	4bab      	ldr	r3, [pc, #684]	; (800185c <main+0x7d4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <main+0x532>
			{
				buttonUpdate = 0;
 80015b4:	4ba9      	ldr	r3, [pc, #676]	; (800185c <main+0x7d4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80015ba:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <main+0x548>
 80015c2:	4ba6      	ldr	r3, [pc, #664]	; (800185c <main+0x7d4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <main+0x548>
			{
				buttonUpdate = 0;
 80015ca:	4ba4      	ldr	r3, [pc, #656]	; (800185c <main+0x7d4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80015d0:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d011      	beq.n	80015fc <main+0x574>
 80015d8:	4ba0      	ldr	r3, [pc, #640]	; (800185c <main+0x7d4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00d      	beq.n	80015fc <main+0x574>
			{
				Lcd_clear(&lcd);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbdd 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80015ea:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <main+0x7d8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80015f0:	4b9c      	ldr	r3, [pc, #624]	; (8001864 <main+0x7dc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80015f6:	4b99      	ldr	r3, [pc, #612]	; (800185c <main+0x7d4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80015fc:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <main+0x58a>
 8001604:	4b95      	ldr	r3, [pc, #596]	; (800185c <main+0x7d4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <main+0x58a>
			{
				buttonUpdate = 0;
 800160c:	4b93      	ldr	r3, [pc, #588]	; (800185c <main+0x7d4>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001612:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <main+0x5a0>
 800161a:	4b90      	ldr	r3, [pc, #576]	; (800185c <main+0x7d4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <main+0x5a0>
			{
				buttonUpdate = 0;
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <main+0x7d4>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
			//buttonUpdate = 0;
		}
		//default

		//startmsg
		if(rows == 0 && cols == 0)
 8001628:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <main+0x7d8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d150      	bne.n	80016d2 <main+0x64a>
 8001630:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <main+0x7dc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d14c      	bne.n	80016d2 <main+0x64a>
		{
			if (buttonStateD && buttonUpdate)
 8001638:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d011      	beq.n	8001664 <main+0x5dc>
 8001640:	4b86      	ldr	r3, [pc, #536]	; (800185c <main+0x7d4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00d      	beq.n	8001664 <main+0x5dc>
			{
				Lcd_clear(&lcd);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fba9 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001652:	4b83      	ldr	r3, [pc, #524]	; (8001860 <main+0x7d8>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001658:	4b82      	ldr	r3, [pc, #520]	; (8001864 <main+0x7dc>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800165e:	4b7f      	ldr	r3, [pc, #508]	; (800185c <main+0x7d4>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001664:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <main+0x5f2>
 800166c:	4b7b      	ldr	r3, [pc, #492]	; (800185c <main+0x7d4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <main+0x5f2>
			{
				buttonUpdate = 0;
 8001674:	4b79      	ldr	r3, [pc, #484]	; (800185c <main+0x7d4>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 800167a:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d011      	beq.n	80016a6 <main+0x61e>
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <main+0x7d4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <main+0x61e>
			{
				Lcd_clear(&lcd);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb88 	bl	8000da4 <Lcd_clear>
				rows = 0;
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <main+0x7d8>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
				cols = 1;
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <main+0x7dc>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80016a0:	4b6e      	ldr	r3, [pc, #440]	; (800185c <main+0x7d4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80016a6:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <main+0x634>
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <main+0x7d4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <main+0x634>
			{
				buttonUpdate = 0;
 80016b6:	4b69      	ldr	r3, [pc, #420]	; (800185c <main+0x7d4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80016bc:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <main+0x64a>
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <main+0x7d4>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <main+0x64a>
			{
				buttonUpdate = 0;
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <main+0x7d4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		}
		//startmsg


		//measmode
		if (rows == 1 && cols == 0)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <main+0x7d8>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d161      	bne.n	800179e <main+0x716>
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <main+0x7dc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d15d      	bne.n	800179e <main+0x716>
		{
			if (buttonStateD && buttonUpdate)
 80016e2:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d017      	beq.n	800171a <main+0x692>
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <main+0x7d4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d013      	beq.n	800171a <main+0x692>
			{
				Lcd_clear(&lcd);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fb54 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <main+0x7d8>)
 80016fe:	2202      	movs	r2, #2
 8001700:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <main+0x7dc>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001708:	4b54      	ldr	r3, [pc, #336]	; (800185c <main+0x7d4>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
				DC_measure = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
				AC_measure = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
				//				timer_interrupt = 1;
				//				measurment_mode = 1;
			}
			if (buttonStateU && buttonUpdate)
 800171a:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d011      	beq.n	8001746 <main+0x6be>
 8001722:	4b4e      	ldr	r3, [pc, #312]	; (800185c <main+0x7d4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <main+0x6be>
			{
				Lcd_clear(&lcd);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fb38 	bl	8000da4 <Lcd_clear>
				rows = 0;
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <main+0x7d8>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <main+0x7dc>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001740:	4b46      	ldr	r3, [pc, #280]	; (800185c <main+0x7d4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001746:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <main+0x6d4>
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <main+0x7d4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <main+0x6d4>
			{
				buttonUpdate = 0;
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <main+0x7d4>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 800175c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <main+0x6ea>
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <main+0x7d4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <main+0x6ea>
			{
				buttonUpdate = 0;
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <main+0x7d4>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001772:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d011      	beq.n	800179e <main+0x716>
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <main+0x7d4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <main+0x716>
			{
				Lcd_clear(&lcd);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb0c 	bl	8000da4 <Lcd_clear>
				rows = 1;
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <main+0x7d8>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <main+0x7dc>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <main+0x7d4>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
			}
		}
		//measmode

		//sigmode
		if (rows == 1 && cols == 1)
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x7d8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d163      	bne.n	800186e <main+0x7e6>
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <main+0x7dc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d15f      	bne.n	800186e <main+0x7e6>
		{
			if (buttonStateD && buttonUpdate)
 80017ae:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d011      	beq.n	80017da <main+0x752>
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <main+0x7d4>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00d      	beq.n	80017da <main+0x752>
			{
				Lcd_clear(&lcd);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff faee 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <main+0x7d8>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <main+0x7dc>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <main+0x7d4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80017da:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d011      	beq.n	8001806 <main+0x77e>
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <main+0x7d4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <main+0x77e>
			{
				Lcd_clear(&lcd);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fad8 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <main+0x7d8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <main+0x7dc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <main+0x7d4>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001806:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <main+0x794>
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <main+0x7d4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <main+0x794>
			{
				buttonUpdate = 0;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <main+0x7d4>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 800181c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001820:	2b00      	cmp	r3, #0
 8001822:	d011      	beq.n	8001848 <main+0x7c0>
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <main+0x7d4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <main+0x7c0>
			{
				Lcd_clear(&lcd);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fab7 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <main+0x7d8>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <main+0x7dc>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <main+0x7d4>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001848:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <main+0x7e6>
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <main+0x7d4>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00a      	beq.n	800186e <main+0x7e6>
 8001858:	e006      	b.n	8001868 <main+0x7e0>
 800185a:	bf00      	nop
 800185c:	2000000f 	.word	0x2000000f
 8001860:	200000aa 	.word	0x200000aa
 8001864:	200000a9 	.word	0x200000a9
			{
				buttonUpdate = 0;
 8001868:	4bb8      	ldr	r3, [pc, #736]	; (8001b4c <main+0xac4>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
			}
		}
		//sigmode

		//DCvoltage
		if (rows == 2 && cols == 0)
 800186e:	4bb8      	ldr	r3, [pc, #736]	; (8001b50 <main+0xac8>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d156      	bne.n	8001924 <main+0x89c>
 8001876:	4bb7      	ldr	r3, [pc, #732]	; (8001b54 <main+0xacc>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d152      	bne.n	8001924 <main+0x89c>
		{
			if (buttonStateD && buttonUpdate)
 800187e:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <main+0x80c>
 8001886:	4bb1      	ldr	r3, [pc, #708]	; (8001b4c <main+0xac4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <main+0x80c>
			{
				buttonUpdate = 0;
 800188e:	4baf      	ldr	r3, [pc, #700]	; (8001b4c <main+0xac4>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001894:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d011      	beq.n	80018c0 <main+0x838>
 800189c:	4bab      	ldr	r3, [pc, #684]	; (8001b4c <main+0xac4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <main+0x838>
			{
				Lcd_clear(&lcd);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa7b 	bl	8000da4 <Lcd_clear>
				rows = 1;
 80018ae:	4ba8      	ldr	r3, [pc, #672]	; (8001b50 <main+0xac8>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80018b4:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <main+0xacc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80018ba:	4ba4      	ldr	r3, [pc, #656]	; (8001b4c <main+0xac4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80018c0:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <main+0x85a>
 80018c8:	4ba0      	ldr	r3, [pc, #640]	; (8001b4c <main+0xac4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <main+0x85a>
			{
				DC_measure = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
				currentflag = 0;
 80018d6:	4ba0      	ldr	r3, [pc, #640]	; (8001b58 <main+0xad0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80018dc:	4b9b      	ldr	r3, [pc, #620]	; (8001b4c <main+0xac4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80018e2:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <main+0x870>
 80018ea:	4b98      	ldr	r3, [pc, #608]	; (8001b4c <main+0xac4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <main+0x870>
			{
				buttonUpdate = 0;
 80018f2:	4b96      	ldr	r3, [pc, #600]	; (8001b4c <main+0xac4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80018f8:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d011      	beq.n	8001924 <main+0x89c>
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <main+0xac4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00d      	beq.n	8001924 <main+0x89c>
			{
				Lcd_clear(&lcd);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa49 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001912:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <main+0xac8>)
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001918:	4b8e      	ldr	r3, [pc, #568]	; (8001b54 <main+0xacc>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800191e:	4b8b      	ldr	r3, [pc, #556]	; (8001b4c <main+0xac4>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
			}
		}
		//DCVoltage

		//DCcurrent
		if (rows == 2 && cols == 1)
 8001924:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <main+0xac8>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d170      	bne.n	8001a0e <main+0x986>
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <main+0xacc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d16c      	bne.n	8001a0e <main+0x986>
		{
			if (buttonStateD && buttonUpdate)
 8001934:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <main+0x8c2>
 800193c:	4b83      	ldr	r3, [pc, #524]	; (8001b4c <main+0xac4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <main+0x8c2>
			{
				buttonUpdate = 0;
 8001944:	4b81      	ldr	r3, [pc, #516]	; (8001b4c <main+0xac4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 800194a:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d011      	beq.n	8001976 <main+0x8ee>
 8001952:	4b7e      	ldr	r3, [pc, #504]	; (8001b4c <main+0xac4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <main+0x8ee>
			{
				Lcd_clear(&lcd);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa20 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001964:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <main+0xac8>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800196a:	4b7a      	ldr	r3, [pc, #488]	; (8001b54 <main+0xacc>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001970:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <main+0xac4>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001976:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00f      	beq.n	800199e <main+0x916>
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <main+0xac4>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <main+0x916>
			{
				//				DC_measure = 1;
				currentflag = 1;
 8001986:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <main+0xad0>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
				DC_measure = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
				AC_measure = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
				buttonUpdate = 0;
 8001998:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <main+0xac4>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 800199e:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d011      	beq.n	80019ca <main+0x942>
 80019a6:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <main+0xac4>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <main+0x942>
			{
				Lcd_clear(&lcd);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9f6 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <main+0xac8>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80019be:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <main+0xacc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80019c4:	4b61      	ldr	r3, [pc, #388]	; (8001b4c <main+0xac4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80019ca:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01d      	beq.n	8001a0e <main+0x986>
 80019d2:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <main+0xac4>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d019      	beq.n	8001a0e <main+0x986>
			{
				DC_measure = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
				AC_measure = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
				timer_interrupt = 1;
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <main+0xad4>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
				measurment_mode = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
				Lcd_clear(&lcd);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9d4 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80019fc:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <main+0xac8>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <main+0xacc>)
 8001a04:	2202      	movs	r2, #2
 8001a06:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <main+0xac4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
			}
		}
		//DCcurrent

		//ACvoltage
		if (rows == 2 && cols == 2)
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <main+0xac8>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d161      	bne.n	8001ada <main+0xa52>
 8001a16:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <main+0xacc>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d15d      	bne.n	8001ada <main+0xa52>
		{
			//			AC_measure = 1;
			//			timer_interrupt = 1;
			//			measurment_mode = 1;

			if (buttonStateD && buttonUpdate)
 8001a1e:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <main+0x9ac>
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <main+0xac4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <main+0x9ac>
			{
				buttonUpdate = 0;
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <main+0xac4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001a34:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d011      	beq.n	8001a60 <main+0x9d8>
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <main+0xac4>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <main+0x9d8>
			{
				Lcd_clear(&lcd);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f9ab 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <main+0xac8>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <main+0xacc>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <main+0xac4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001a60:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00c      	beq.n	8001a82 <main+0x9fa>
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <main+0xac4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <main+0x9fa>
			{
				AC_measure = 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
				currentflag = 0;
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <main+0xad0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
				//				ACVoltagelcd_off[3] = AC_disp_offset[9] - 48;


				//ACVoltagelcd_freq = AC_freq;

				buttonUpdate = 0;
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <main+0xac4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001a82:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d011      	beq.n	8001aae <main+0xa26>
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <main+0xac4>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00d      	beq.n	8001aae <main+0xa26>
			{
				Lcd_clear(&lcd);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f984 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <main+0xac8>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <main+0xacc>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <main+0xac4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001aae:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d011      	beq.n	8001ada <main+0xa52>
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <main+0xac4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <main+0xa52>
			{
				Lcd_clear(&lcd);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f96e 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <main+0xac8>)
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <main+0xacc>)
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <main+0xac4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
			}
		}
		//ACvoltage

		//ACcurrent
		if (rows == 2 && cols == 3)
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <main+0xac8>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d164      	bne.n	8001bac <main+0xb24>
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <main+0xacc>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d160      	bne.n	8001bac <main+0xb24>
		{
			if (buttonStateD && buttonUpdate)
 8001aea:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <main+0xa78>
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <main+0xac4>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <main+0xa78>
			{
				buttonUpdate = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <main+0xac4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001b00:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d011      	beq.n	8001b2c <main+0xaa4>
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <main+0xac4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <main+0xaa4>
			{
				Lcd_clear(&lcd);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f945 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <main+0xac8>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <main+0xacc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <main+0xac4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001b2c:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01a      	beq.n	8001b6a <main+0xae2>
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <main+0xac4>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <main+0xae2>
			{
				//				AC_measure = 1;
				currentflag = 1;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <main+0xad0>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
				DC_measure = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
				AC_measure = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e009      	b.n	8001b60 <main+0xad8>
 8001b4c:	2000000f 	.word	0x2000000f
 8001b50:	200000aa 	.word	0x200000aa
 8001b54:	200000a9 	.word	0x200000a9
 8001b58:	200002b6 	.word	0x200002b6
 8001b5c:	2000166d 	.word	0x2000166d
 8001b60:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
				buttonUpdate = 0;
 8001b64:	4bb5      	ldr	r3, [pc, #724]	; (8001e3c <main+0xdb4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001b6a:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d011      	beq.n	8001b96 <main+0xb0e>
 8001b72:	4bb2      	ldr	r3, [pc, #712]	; (8001e3c <main+0xdb4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00d      	beq.n	8001b96 <main+0xb0e>
			{
				Lcd_clear(&lcd);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f910 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001b84:	4bae      	ldr	r3, [pc, #696]	; (8001e40 <main+0xdb8>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001b8a:	4bae      	ldr	r3, [pc, #696]	; (8001e44 <main+0xdbc>)
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001b90:	4baa      	ldr	r3, [pc, #680]	; (8001e3c <main+0xdb4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001b96:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <main+0xb24>
 8001b9e:	4ba7      	ldr	r3, [pc, #668]	; (8001e3c <main+0xdb4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <main+0xb24>
			{
				buttonUpdate = 0;
 8001ba6:	4ba5      	ldr	r3, [pc, #660]	; (8001e3c <main+0xdb4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
			}
		}
		//ACcurrent

		//Type
		if (rows == 2 && cols == 4)
 8001bac:	4ba4      	ldr	r3, [pc, #656]	; (8001e40 <main+0xdb8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d15b      	bne.n	8001c6c <main+0xbe4>
 8001bb4:	4ba3      	ldr	r3, [pc, #652]	; (8001e44 <main+0xdbc>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d157      	bne.n	8001c6c <main+0xbe4>
		{
			if (buttonStateD && buttonUpdate)
 8001bbc:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d011      	beq.n	8001be8 <main+0xb60>
 8001bc4:	4b9d      	ldr	r3, [pc, #628]	; (8001e3c <main+0xdb4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <main+0xb60>
			{
				Lcd_clear(&lcd);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f8e7 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001bd6:	4b9a      	ldr	r3, [pc, #616]	; (8001e40 <main+0xdb8>)
 8001bd8:	2203      	movs	r2, #3
 8001bda:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <main+0xdbc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001be2:	4b96      	ldr	r3, [pc, #600]	; (8001e3c <main+0xdb4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001be8:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d011      	beq.n	8001c14 <main+0xb8c>
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <main+0xdb4>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <main+0xb8c>
			{
				Lcd_clear(&lcd);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f8d1 	bl	8000da4 <Lcd_clear>
				//				rows = 1;
				//				cols = 1;
				rows = 1;
 8001c02:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <main+0xdb8>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001c08:	4b8e      	ldr	r3, [pc, #568]	; (8001e44 <main+0xdbc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <main+0xdb4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001c14:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <main+0xba2>
 8001c1c:	4b87      	ldr	r3, [pc, #540]	; (8001e3c <main+0xdb4>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <main+0xba2>
			{
				buttonUpdate = 0;
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <main+0xdb4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001c2a:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <main+0xbb8>
 8001c32:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <main+0xdb4>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <main+0xbb8>
			{
				buttonUpdate = 0;
 8001c3a:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <main+0xdb4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001c40:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d011      	beq.n	8001c6c <main+0xbe4>
 8001c48:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <main+0xdb4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <main+0xbe4>
			{
				Lcd_clear(&lcd);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f8a5 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <main+0xdb8>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <main+0xdbc>)
 8001c62:	2205      	movs	r2, #5
 8001c64:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001c66:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <main+0xdb4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type

		//Parameter
		if (rows == 2 && cols == 5)
 8001c6c:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <main+0xdb8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d166      	bne.n	8001d42 <main+0xcba>
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <main+0xdbc>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d162      	bne.n	8001d42 <main+0xcba>
		{
			if (buttonStateD && buttonUpdate)
 8001c7c:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d011      	beq.n	8001ca8 <main+0xc20>
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <main+0xdb4>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <main+0xc20>
				//					cols = 4;
				//				}
				//
				//				if (signal_s)
				//				{
				Lcd_clear(&lcd);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f887 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <main+0xdb8>)
 8001c98:	2203      	movs	r2, #3
 8001c9a:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <main+0xdbc>)
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	701a      	strb	r2, [r3, #0]
				//				}
				buttonUpdate = 0;
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <main+0xdb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001ca8:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d011      	beq.n	8001cd4 <main+0xc4c>
 8001cb0:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <main+0xdb4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <main+0xc4c>
			{
				Lcd_clear(&lcd);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f871 	bl	8000da4 <Lcd_clear>
				//				rows = 1;
				//				cols = 1;
				rows = 1;
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <main+0xdb8>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <main+0xdbc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001cce:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <main+0xdb4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001cd4:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <main+0xc62>
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <main+0xdb4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <main+0xc62>
			{
				buttonUpdate = 0;
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <main+0xdb4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001cea:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d011      	beq.n	8001d16 <main+0xc8e>
 8001cf2:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <main+0xdb4>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <main+0xc8e>
			{
				Lcd_clear(&lcd);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f850 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <main+0xdb8>)
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <main+0xdbc>)
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <main+0xdb4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001d16:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d011      	beq.n	8001d42 <main+0xcba>
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <main+0xdb4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <main+0xcba>
			{
				Lcd_clear(&lcd);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f83a 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001d30:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <main+0xdb8>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	701a      	strb	r2, [r3, #0]
				cols = 6;
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <main+0xdbc>)
 8001d38:	2206      	movs	r2, #6
 8001d3a:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <main+0xdb4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			}
		}
		//Parameter

		//Output
		if (rows == 2 && cols == 6)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <main+0xdb8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d15b      	bne.n	8001e02 <main+0xd7a>
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <main+0xdbc>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d157      	bne.n	8001e02 <main+0xd7a>
		{
			if (buttonStateD && buttonUpdate)
 8001d52:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <main+0xcf6>
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <main+0xdb4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <main+0xcf6>
			{
				Lcd_clear(&lcd);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f81c 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <main+0xdb8>)
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
				cols = 7;
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <main+0xdbc>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <main+0xdb4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001d7e:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <main+0xd22>
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <main+0xdb4>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <main+0xd22>
			{
				Lcd_clear(&lcd);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f806 	bl	8000da4 <Lcd_clear>
				//				rows = 1;
				//				cols = 1;
				rows = 1;
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <main+0xdb8>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <main+0xdbc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <main+0xdb4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001daa:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <main+0xd38>
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <main+0xdb4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <main+0xd38>
			{
				buttonUpdate = 0;
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <main+0xdb4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001dc0:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d011      	beq.n	8001dec <main+0xd64>
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <main+0xdb4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <main+0xd64>
			{
				Lcd_clear(&lcd);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ffe5 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <main+0xdb8>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <main+0xdbc>)
 8001de2:	2205      	movs	r2, #5
 8001de4:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <main+0xdb4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001dec:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <main+0xd7a>
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <main+0xdb4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <main+0xd7a>
			{
				buttonUpdate = 0;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <main+0xdb4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output

		//Type DC
		if (rows == 3 && cols == 0)
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <main+0xdb8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d167      	bne.n	8001eda <main+0xe52>
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <main+0xdbc>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d163      	bne.n	8001eda <main+0xe52>
		{
			if (buttonStateD && buttonUpdate)
 8001e12:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <main+0xda0>
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <main+0xdb4>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <main+0xda0>
			{
				buttonUpdate = 0;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <main+0xdb4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001e28:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <main+0xddc>
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <main+0xdb4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d015      	beq.n	8001e64 <main+0xddc>
 8001e38:	e006      	b.n	8001e48 <main+0xdc0>
 8001e3a:	bf00      	nop
 8001e3c:	2000000f 	.word	0x2000000f
 8001e40:	200000aa 	.word	0x200000aa
 8001e44:	200000a9 	.word	0x200000a9
			{
				Lcd_clear(&lcd);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ffa9 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001e52:	4bba      	ldr	r3, [pc, #744]	; (800213c <main+0x10b4>)
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001e58:	4bb9      	ldr	r3, [pc, #740]	; (8002140 <main+0x10b8>)
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001e5e:	4bb9      	ldr	r3, [pc, #740]	; (8002144 <main+0x10bc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001e64:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <main+0xe10>
 8001e6c:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <main+0x10bc>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d011      	beq.n	8001e98 <main+0xe10>
			{
				DC_flag = 1;
 8001e74:	4bb4      	ldr	r3, [pc, #720]	; (8002148 <main+0x10c0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
				signal_d = 1;
 8001e7a:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001e82:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 8001e8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001e92:	4bac      	ldr	r3, [pc, #688]	; (8002144 <main+0x10bc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001e98:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <main+0xe26>
 8001ea0:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <main+0x10bc>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <main+0xe26>
			{
				buttonUpdate = 0;
 8001ea8:	4ba6      	ldr	r3, [pc, #664]	; (8002144 <main+0x10bc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001eae:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d011      	beq.n	8001eda <main+0xe52>
 8001eb6:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <main+0x10bc>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <main+0xe52>
			{
				Lcd_clear(&lcd);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe ff6e 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001ec8:	4b9c      	ldr	r3, [pc, #624]	; (800213c <main+0x10b4>)
 8001eca:	2203      	movs	r2, #3
 8001ecc:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001ece:	4b9c      	ldr	r3, [pc, #624]	; (8002140 <main+0x10b8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001ed4:	4b9b      	ldr	r3, [pc, #620]	; (8002144 <main+0x10bc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type DC

		//Type sinus
		if (rows == 3 && cols == 1)
 8001eda:	4b98      	ldr	r3, [pc, #608]	; (800213c <main+0x10b4>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d16a      	bne.n	8001fb8 <main+0xf30>
 8001ee2:	4b97      	ldr	r3, [pc, #604]	; (8002140 <main+0x10b8>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d166      	bne.n	8001fb8 <main+0xf30>
		{
			if (buttonStateD && buttonUpdate)
 8001eea:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <main+0xe78>
 8001ef2:	4b94      	ldr	r3, [pc, #592]	; (8002144 <main+0x10bc>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <main+0xe78>
			{
				buttonUpdate = 0;
 8001efa:	4b92      	ldr	r3, [pc, #584]	; (8002144 <main+0x10bc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001f00:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d011      	beq.n	8001f2c <main+0xea4>
 8001f08:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <main+0x10bc>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <main+0xea4>
			{
				Lcd_clear(&lcd);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ff45 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <main+0x10b4>)
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001f20:	4b87      	ldr	r3, [pc, #540]	; (8002140 <main+0x10b8>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001f26:	4b87      	ldr	r3, [pc, #540]	; (8002144 <main+0x10bc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8001f2c:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <main+0xed8>
 8001f34:	4b83      	ldr	r3, [pc, #524]	; (8002144 <main+0x10bc>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d011      	beq.n	8001f60 <main+0xed8>
			{
				AC_flag = 1;
 8001f3c:	4b83      	ldr	r3, [pc, #524]	; (800214c <main+0x10c4>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8001f42:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001f4a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8001f52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <main+0x10bc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8001f60:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d011      	beq.n	8001f8c <main+0xf04>
 8001f68:	4b76      	ldr	r3, [pc, #472]	; (8002144 <main+0x10bc>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <main+0xf04>
			{
				Lcd_clear(&lcd);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe ff15 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001f7a:	4b70      	ldr	r3, [pc, #448]	; (800213c <main+0x10b4>)
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <main+0x10b8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001f86:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <main+0x10bc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8001f8c:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d011      	beq.n	8001fb8 <main+0xf30>
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <main+0x10bc>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <main+0xf30>
			{
				Lcd_clear(&lcd);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe feff 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <main+0x10b4>)
 8001fa8:	2203      	movs	r2, #3
 8001faa:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001fac:	4b64      	ldr	r3, [pc, #400]	; (8002140 <main+0x10b8>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8001fb2:	4b64      	ldr	r3, [pc, #400]	; (8002144 <main+0x10bc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type sinus

		//Type pulse
		if (rows == 3 && cols == 2)
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <main+0x10b4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d15c      	bne.n	800207a <main+0xff2>
 8001fc0:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <main+0x10b8>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d158      	bne.n	800207a <main+0xff2>
		{
			if (buttonStateD && buttonUpdate)
 8001fc8:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <main+0xf56>
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <main+0x10bc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <main+0xf56>
			{
				buttonUpdate = 0;
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <main+0x10bc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8001fde:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <main+0xf82>
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <main+0x10bc>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <main+0xf82>
			{
				Lcd_clear(&lcd);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fed6 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <main+0x10b4>)
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001ffe:	4b50      	ldr	r3, [pc, #320]	; (8002140 <main+0x10b8>)
 8002000:	2204      	movs	r2, #4
 8002002:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <main+0x10bc>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 800200a:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <main+0xfb0>
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <main+0x10bc>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <main+0xfb0>
			{
				signal_p = 1;
 800201a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8002022:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 800202a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <main+0x10bc>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8002038:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 800203c:	2b00      	cmp	r3, #0
 800203e:	d011      	beq.n	8002064 <main+0xfdc>
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <main+0x10bc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <main+0xfdc>
			{
				Lcd_clear(&lcd);
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fea9 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002052:	4b3a      	ldr	r3, [pc, #232]	; (800213c <main+0x10b4>)
 8002054:	2203      	movs	r2, #3
 8002056:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8002058:	4b39      	ldr	r3, [pc, #228]	; (8002140 <main+0x10b8>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <main+0x10bc>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8002064:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <main+0xff2>
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <main+0x10bc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <main+0xff2>
			{
				buttonUpdate = 0;
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <main+0x10bc>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type pulse

		//Param Ampl
		if (rows == 3 && cols == 3)
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <main+0x10b4>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d166      	bne.n	8002150 <main+0x10c8>
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <main+0x10b8>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d162      	bne.n	8002150 <main+0x10c8>
		{
			if (buttonStateD && buttonUpdate)
 800208a:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d011      	beq.n	80020b6 <main+0x102e>
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <main+0x10bc>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <main+0x102e>
			{
				Lcd_clear(&lcd);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe80 	bl	8000da4 <Lcd_clear>
				rows = 4;
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <main+0x10b4>)
 80020a6:	2204      	movs	r2, #4
 80020a8:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <main+0x10b8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <main+0x10bc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80020b6:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d011      	beq.n	80020e2 <main+0x105a>
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <main+0x10bc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <main+0x105a>
			{
				Lcd_clear(&lcd);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fe6a 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 5;
				rows = 2;
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <main+0x10b4>)
 80020d2:	2202      	movs	r2, #2
 80020d4:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <main+0x10b8>)
 80020d8:	2204      	movs	r2, #4
 80020da:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <main+0x10bc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80020e2:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <main+0x1070>
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <main+0x10bc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <main+0x1070>
			{
				buttonUpdate = 0;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <main+0x10bc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80020f8:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <main+0x1086>
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <main+0x10bc>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <main+0x1086>
			{
				buttonUpdate = 0;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <main+0x10bc>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 800210e:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01c      	beq.n	8002150 <main+0x10c8>
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <main+0x10bc>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d018      	beq.n	8002150 <main+0x10c8>
			{
				Lcd_clear(&lcd);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fe3e 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <main+0x10b4>)
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
				cols = 4;
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <main+0x10b8>)
 8002130:	2204      	movs	r2, #4
 8002132:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <main+0x10bc>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e009      	b.n	8002150 <main+0x10c8>
 800213c:	200000aa 	.word	0x200000aa
 8002140:	200000a9 	.word	0x200000a9
 8002144:	2000000f 	.word	0x2000000f
 8002148:	200000ab 	.word	0x200000ab
 800214c:	200000ac 	.word	0x200000ac
			}
		}
		//Param Ampl

		//Param Offset
		if (rows == 3 && cols == 4)
 8002150:	4bb6      	ldr	r3, [pc, #728]	; (800242c <main+0x13a4>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d166      	bne.n	8002226 <main+0x119e>
 8002158:	4bb5      	ldr	r3, [pc, #724]	; (8002430 <main+0x13a8>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d162      	bne.n	8002226 <main+0x119e>
		{
			if (buttonStateD && buttonUpdate)
 8002160:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d011      	beq.n	800218c <main+0x1104>
 8002168:	4bb2      	ldr	r3, [pc, #712]	; (8002434 <main+0x13ac>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <main+0x1104>
			{
				Lcd_clear(&lcd);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fe15 	bl	8000da4 <Lcd_clear>
				rows = 4;
 800217a:	4bac      	ldr	r3, [pc, #688]	; (800242c <main+0x13a4>)
 800217c:	2204      	movs	r2, #4
 800217e:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8002180:	4bab      	ldr	r3, [pc, #684]	; (8002430 <main+0x13a8>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]

				buttonUpdate = 0;
 8002186:	4bab      	ldr	r3, [pc, #684]	; (8002434 <main+0x13ac>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 800218c:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d011      	beq.n	80021b8 <main+0x1130>
 8002194:	4ba7      	ldr	r3, [pc, #668]	; (8002434 <main+0x13ac>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <main+0x1130>
			{
				Lcd_clear(&lcd);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fdff 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 5;
				rows = 2;
 80021a6:	4ba1      	ldr	r3, [pc, #644]	; (800242c <main+0x13a4>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80021ac:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <main+0x13a8>)
 80021ae:	2204      	movs	r2, #4
 80021b0:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80021b2:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <main+0x13ac>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80021b8:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <main+0x1146>
 80021c0:	4b9c      	ldr	r3, [pc, #624]	; (8002434 <main+0x13ac>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <main+0x1146>
			{
				//				DC_flag = 0;
				buttonUpdate = 0;
 80021c8:	4b9a      	ldr	r3, [pc, #616]	; (8002434 <main+0x13ac>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80021ce:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <main+0x1172>
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <main+0x13ac>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <main+0x1172>
			{
				Lcd_clear(&lcd);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fdde 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80021e8:	4b90      	ldr	r3, [pc, #576]	; (800242c <main+0x13a4>)
 80021ea:	2203      	movs	r2, #3
 80021ec:	701a      	strb	r2, [r3, #0]
				cols = 3;
 80021ee:	4b90      	ldr	r3, [pc, #576]	; (8002430 <main+0x13a8>)
 80021f0:	2203      	movs	r2, #3
 80021f2:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80021f4:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <main+0x13ac>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80021fa:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d011      	beq.n	8002226 <main+0x119e>
 8002202:	4b8c      	ldr	r3, [pc, #560]	; (8002434 <main+0x13ac>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <main+0x119e>
			{
				Lcd_clear(&lcd);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fdc8 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002214:	4b85      	ldr	r3, [pc, #532]	; (800242c <main+0x13a4>)
 8002216:	2203      	movs	r2, #3
 8002218:	701a      	strb	r2, [r3, #0]
				cols = 5;
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <main+0x13a8>)
 800221c:	2205      	movs	r2, #5
 800221e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002220:	4b84      	ldr	r3, [pc, #528]	; (8002434 <main+0x13ac>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Offset

		//Param Freq
		if (rows == 3 && cols == 5)
 8002226:	4b81      	ldr	r3, [pc, #516]	; (800242c <main+0x13a4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d166      	bne.n	80022fc <main+0x1274>
 800222e:	4b80      	ldr	r3, [pc, #512]	; (8002430 <main+0x13a8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d162      	bne.n	80022fc <main+0x1274>
		{
			if (buttonStateD && buttonUpdate)
 8002236:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d011      	beq.n	8002262 <main+0x11da>
 800223e:	4b7d      	ldr	r3, [pc, #500]	; (8002434 <main+0x13ac>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <main+0x11da>
			{
				//if(output)
				//{
				Lcd_clear(&lcd);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fdaa 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002250:	4b76      	ldr	r3, [pc, #472]	; (800242c <main+0x13a4>)
 8002252:	2204      	movs	r2, #4
 8002254:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <main+0x13a8>)
 8002258:	2202      	movs	r2, #2
 800225a:	701a      	strb	r2, [r3, #0]

				//}
				buttonUpdate = 0;
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <main+0x13ac>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]


			}
			if (buttonStateU && buttonUpdate)
 8002262:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <main+0x1206>
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <main+0x13ac>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <main+0x1206>
			{
				Lcd_clear(&lcd);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd94 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 5;
				rows = 2;
 800227c:	4b6b      	ldr	r3, [pc, #428]	; (800242c <main+0x13a4>)
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002282:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <main+0x13a8>)
 8002284:	2204      	movs	r2, #4
 8002286:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <main+0x13ac>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 800228e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <main+0x121c>
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <main+0x13ac>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <main+0x121c>
			{
				buttonUpdate = 0;
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <main+0x13ac>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80022a4:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d011      	beq.n	80022d0 <main+0x1248>
 80022ac:	4b61      	ldr	r3, [pc, #388]	; (8002434 <main+0x13ac>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00d      	beq.n	80022d0 <main+0x1248>
			{
				Lcd_clear(&lcd);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fd73 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <main+0x13a4>)
 80022c0:	2203      	movs	r2, #3
 80022c2:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80022c4:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <main+0x13a8>)
 80022c6:	2204      	movs	r2, #4
 80022c8:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <main+0x13ac>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80022d0:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d011      	beq.n	80022fc <main+0x1274>
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <main+0x13ac>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <main+0x1274>
			{
				Lcd_clear(&lcd);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fd5d 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80022ea:	4b50      	ldr	r3, [pc, #320]	; (800242c <main+0x13a4>)
 80022ec:	2203      	movs	r2, #3
 80022ee:	701a      	strb	r2, [r3, #0]
				cols = 6;
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <main+0x13a8>)
 80022f2:	2206      	movs	r2, #6
 80022f4:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80022f6:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <main+0x13ac>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Freq

		//Param Duty Cycle
		if (rows == 3 && cols == 6)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <main+0x13a4>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d15b      	bne.n	80023bc <main+0x1334>
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <main+0x13a8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d157      	bne.n	80023bc <main+0x1334>
		{
			if (buttonStateD && buttonUpdate)
 800230c:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d011      	beq.n	8002338 <main+0x12b0>
 8002314:	4b47      	ldr	r3, [pc, #284]	; (8002434 <main+0x13ac>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <main+0x12b0>
			{
				Lcd_clear(&lcd);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fd3f 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <main+0x13a4>)
 8002328:	2204      	movs	r2, #4
 800232a:	701a      	strb	r2, [r3, #0]
				cols = 3;
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <main+0x13a8>)
 800232e:	2203      	movs	r2, #3
 8002330:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <main+0x13ac>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8002338:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d011      	beq.n	8002364 <main+0x12dc>
 8002340:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <main+0x13ac>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <main+0x12dc>
			{
				Lcd_clear(&lcd);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fd29 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 5;
				rows = 2;
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <main+0x13a4>)
 8002354:	2202      	movs	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <main+0x13a8>)
 800235a:	2204      	movs	r2, #4
 800235c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <main+0x13ac>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8002364:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <main+0x12f2>
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <main+0x13ac>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <main+0x12f2>
			{
				buttonUpdate = 0;
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <main+0x13ac>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 800237a:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <main+0x131e>
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <main+0x13ac>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <main+0x131e>
			{
				Lcd_clear(&lcd);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fd08 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <main+0x13a4>)
 8002396:	2203      	movs	r2, #3
 8002398:	701a      	strb	r2, [r3, #0]
				cols = 5;
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <main+0x13a8>)
 800239c:	2205      	movs	r2, #5
 800239e:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <main+0x13ac>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80023a6:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <main+0x1334>
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <main+0x13ac>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <main+0x1334>
			{
				buttonUpdate = 0;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <main+0x13ac>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Duty Cycle

		//Output on
		if (rows == 3 && cols == 7)
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <main+0x13a4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d15a      	bne.n	800247a <main+0x13f2>
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <main+0x13a8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b07      	cmp	r3, #7
 80023ca:	d156      	bne.n	800247a <main+0x13f2>
		{
			if (buttonStateD && buttonUpdate)
 80023cc:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <main+0x135a>
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <main+0x13ac>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <main+0x135a>
			{
				buttonUpdate = 0;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <main+0x13ac>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80023e2:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <main+0x1386>
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <main+0x13ac>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <main+0x1386>
			{
				Lcd_clear(&lcd);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fcd4 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 6;
				rows = 2;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <main+0x13a4>)
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <main+0x13a8>)
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <main+0x13ac>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 800240e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <main+0x13b0>
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <main+0x13ac>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <main+0x13b0>
			{
				output = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
				buttonUpdate = 0;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <main+0x13ac>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e005      	b.n	8002438 <main+0x13b0>
 800242c:	200000aa 	.word	0x200000aa
 8002430:	200000a9 	.word	0x200000a9
 8002434:	2000000f 	.word	0x2000000f
			}
			if (buttonStateL && buttonUpdate)
 8002438:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <main+0x13c6>
 8002440:	4bca      	ldr	r3, [pc, #808]	; (800276c <main+0x16e4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <main+0x13c6>
			{
				buttonUpdate = 0;
 8002448:	4bc8      	ldr	r3, [pc, #800]	; (800276c <main+0x16e4>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 800244e:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d011      	beq.n	800247a <main+0x13f2>
 8002456:	4bc5      	ldr	r3, [pc, #788]	; (800276c <main+0x16e4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <main+0x13f2>
			{
				Lcd_clear(&lcd);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fc9e 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002468:	4bc1      	ldr	r3, [pc, #772]	; (8002770 <main+0x16e8>)
 800246a:	2203      	movs	r2, #3
 800246c:	701a      	strb	r2, [r3, #0]
				cols = 8;
 800246e:	4bc1      	ldr	r3, [pc, #772]	; (8002774 <main+0x16ec>)
 8002470:	2208      	movs	r2, #8
 8002472:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002474:	4bbd      	ldr	r3, [pc, #756]	; (800276c <main+0x16e4>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output on

		//Output off
		if (rows == 3 && cols == 8)
 800247a:	4bbd      	ldr	r3, [pc, #756]	; (8002770 <main+0x16e8>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d153      	bne.n	800252a <main+0x14a2>
 8002482:	4bbc      	ldr	r3, [pc, #752]	; (8002774 <main+0x16ec>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d14f      	bne.n	800252a <main+0x14a2>
		{
			if (buttonStateD && buttonUpdate)
 800248a:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <main+0x1418>
 8002492:	4bb6      	ldr	r3, [pc, #728]	; (800276c <main+0x16e4>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <main+0x1418>
			{
				buttonUpdate = 0;
 800249a:	4bb4      	ldr	r3, [pc, #720]	; (800276c <main+0x16e4>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80024a0:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d011      	beq.n	80024cc <main+0x1444>
 80024a8:	4bb0      	ldr	r3, [pc, #704]	; (800276c <main+0x16e4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <main+0x1444>
			{
				Lcd_clear(&lcd);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc75 	bl	8000da4 <Lcd_clear>
//				rows = 2;
//				cols = 6;
				rows = 2;
 80024ba:	4bad      	ldr	r3, [pc, #692]	; (8002770 <main+0x16e8>)
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80024c0:	4bac      	ldr	r3, [pc, #688]	; (8002774 <main+0x16ec>)
 80024c2:	2204      	movs	r2, #4
 80024c4:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80024c6:	4ba9      	ldr	r3, [pc, #676]	; (800276c <main+0x16e4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80024cc:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <main+0x1460>
 80024d4:	4ba5      	ldr	r3, [pc, #660]	; (800276c <main+0x16e4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <main+0x1460>
			{
				output = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
				buttonUpdate = 0;
 80024e2:	4ba2      	ldr	r3, [pc, #648]	; (800276c <main+0x16e4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80024e8:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d011      	beq.n	8002514 <main+0x148c>
 80024f0:	4b9e      	ldr	r3, [pc, #632]	; (800276c <main+0x16e4>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <main+0x148c>
			{
				Lcd_clear(&lcd);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fc51 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002502:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <main+0x16e8>)
 8002504:	2203      	movs	r2, #3
 8002506:	701a      	strb	r2, [r3, #0]
				cols = 7;
 8002508:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <main+0x16ec>)
 800250a:	2207      	movs	r2, #7
 800250c:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800250e:	4b97      	ldr	r3, [pc, #604]	; (800276c <main+0x16e4>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8002514:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <main+0x14a2>
 800251c:	4b93      	ldr	r3, [pc, #588]	; (800276c <main+0x16e4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <main+0x14a2>
			{
				buttonUpdate = 0;
 8002524:	4b91      	ldr	r3, [pc, #580]	; (800276c <main+0x16e4>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output off

		//parameter amp values
		if (rows == 4 && cols == 0)
 800252a:	4b91      	ldr	r3, [pc, #580]	; (8002770 <main+0x16e8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	f040 812d 	bne.w	800278e <main+0x1706>
 8002534:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <main+0x16ec>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8128 	bne.w	800278e <main+0x1706>
		{
			if (buttonStateD && buttonUpdate)
 800253e:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <main+0x14cc>
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <main+0x16e4>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <main+0x14cc>
			{
				buttonUpdate = 0;
 800254e:	4b87      	ldr	r3, [pc, #540]	; (800276c <main+0x16e4>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8002554:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d011      	beq.n	8002580 <main+0x14f8>
 800255c:	4b83      	ldr	r3, [pc, #524]	; (800276c <main+0x16e4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <main+0x14f8>
			{
				Lcd_clear(&lcd);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fc1b 	bl	8000da4 <Lcd_clear>
				rows = 3;
 800256e:	4b80      	ldr	r3, [pc, #512]	; (8002770 <main+0x16e8>)
 8002570:	2203      	movs	r2, #3
 8002572:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002574:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <main+0x16ec>)
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 800257a:	4b7c      	ldr	r3, [pc, #496]	; (800276c <main+0x16e4>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8002580:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <main+0x152c>
 8002588:	4b78      	ldr	r3, [pc, #480]	; (800276c <main+0x16e4>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d011      	beq.n	80025b4 <main+0x152c>
			{
				setAmplitude = 1;
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <main+0x16f0>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8002596:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 800259e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 80025a6:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]

				buttonUpdate = 0;
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <main+0x16e4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 80025b4:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d068      	beq.n	800268e <main+0x1606>
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <main+0x16e4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d064      	beq.n	800268e <main+0x1606>
			{
				DAC_amplitude_output_int = DAC_amplitude_output_int - 100;
 80025c4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80025c8:	3b64      	subs	r3, #100	; 0x64
 80025ca:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
				if(DAC_amplitude_output_int <= 0)
 80025ce:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dc02      	bgt.n	80025dc <main+0x1554>
				{
					DAC_amplitude_output_int = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
				}
				//DAC_amplitude_output_int = DAC_amplitude_output;
				amplitude_output_value[0] = ((DAC_amplitude_output_int/1000) % 10);
 80025dc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80025e0:	4a66      	ldr	r2, [pc, #408]	; (800277c <main+0x16f4>)
 80025e2:	fb82 1203 	smull	r1, r2, r2, r3
 80025e6:	1192      	asrs	r2, r2, #6
 80025e8:	17db      	asrs	r3, r3, #31
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	4b64      	ldr	r3, [pc, #400]	; (8002780 <main+0x16f8>)
 80025ee:	fb83 1302 	smull	r1, r3, r3, r2
 80025f2:	1099      	asrs	r1, r3, #2
 80025f4:	17d3      	asrs	r3, r2, #31
 80025f6:	1ac9      	subs	r1, r1, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	1ad1      	subs	r1, r2, r3
 8002602:	b2ca      	uxtb	r2, r1
 8002604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002608:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_int/100) % 10);
 800260a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <main+0x16fc>)
 8002610:	fb82 1203 	smull	r1, r2, r2, r3
 8002614:	1152      	asrs	r2, r2, #5
 8002616:	17db      	asrs	r3, r3, #31
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <main+0x16f8>)
 800261c:	fb83 1302 	smull	r1, r3, r3, r2
 8002620:	1099      	asrs	r1, r3, #2
 8002622:	17d3      	asrs	r3, r2, #31
 8002624:	1ac9      	subs	r1, r1, r3
 8002626:	460b      	mov	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	1ad1      	subs	r1, r2, r3
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002636:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_int/10) % 10);
 8002638:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <main+0x16f8>)
 800263e:	fb82 1203 	smull	r1, r2, r2, r3
 8002642:	1092      	asrs	r2, r2, #2
 8002644:	17db      	asrs	r3, r3, #31
 8002646:	1ad2      	subs	r2, r2, r3
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <main+0x16f8>)
 800264a:	fb83 1302 	smull	r1, r3, r3, r2
 800264e:	1099      	asrs	r1, r3, #2
 8002650:	17d3      	asrs	r3, r2, #31
 8002652:	1ac9      	subs	r1, r1, r3
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	1ad1      	subs	r1, r2, r3
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002664:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_int) % 10);
 8002666:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <main+0x16f8>)
 800266c:	fb83 1302 	smull	r1, r3, r3, r2
 8002670:	1099      	asrs	r1, r3, #2
 8002672:	17d3      	asrs	r3, r2, #31
 8002674:	1ac9      	subs	r1, r1, r3
 8002676:	460b      	mov	r3, r1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	1ad1      	subs	r1, r2, r3
 8002680:	b2ca      	uxtb	r2, r1
 8002682:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002686:	70da      	strb	r2, [r3, #3]
				buttonUpdate = 0;
 8002688:	4b38      	ldr	r3, [pc, #224]	; (800276c <main+0x16e4>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 800268e:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07b      	beq.n	800278e <main+0x1706>
 8002696:	4b35      	ldr	r3, [pc, #212]	; (800276c <main+0x16e4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d077      	beq.n	800278e <main+0x1706>
			{
				DAC_amplitude_output_int = DAC_amplitude_output_int + 100;
 800269e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80026a2:	3364      	adds	r3, #100	; 0x64
 80026a4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
				if(DAC_amplitude_output_int >= 3100)
 80026a8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80026ac:	f640 421b 	movw	r2, #3099	; 0xc1b
 80026b0:	4293      	cmp	r3, r2
 80026b2:	dd03      	ble.n	80026bc <main+0x1634>
				{
					DAC_amplitude_output_int = 3100;
 80026b4:	f640 431c 	movw	r3, #3100	; 0xc1c
 80026b8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
				}
				//DAC_amplitude_output_int = DAC_amplitude_output;
				amplitude_output_value[0] = ((DAC_amplitude_output_int/1000) % 10);
 80026bc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <main+0x16f4>)
 80026c2:	fb82 1203 	smull	r1, r2, r2, r3
 80026c6:	1192      	asrs	r2, r2, #6
 80026c8:	17db      	asrs	r3, r3, #31
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <main+0x16f8>)
 80026ce:	fb83 1302 	smull	r1, r3, r3, r2
 80026d2:	1099      	asrs	r1, r3, #2
 80026d4:	17d3      	asrs	r3, r2, #31
 80026d6:	1ac9      	subs	r1, r1, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	1ad1      	subs	r1, r2, r3
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e8:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_int/100) % 10);
 80026ea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80026ee:	4a25      	ldr	r2, [pc, #148]	; (8002784 <main+0x16fc>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1152      	asrs	r2, r2, #5
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <main+0x16f8>)
 80026fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002700:	1099      	asrs	r1, r3, #2
 8002702:	17d3      	asrs	r3, r2, #31
 8002704:	1ac9      	subs	r1, r1, r3
 8002706:	460b      	mov	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	1ad1      	subs	r1, r2, r3
 8002710:	b2ca      	uxtb	r2, r1
 8002712:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002716:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_int/10) % 10);
 8002718:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <main+0x16f8>)
 800271e:	fb82 1203 	smull	r1, r2, r2, r3
 8002722:	1092      	asrs	r2, r2, #2
 8002724:	17db      	asrs	r3, r3, #31
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <main+0x16f8>)
 800272a:	fb83 1302 	smull	r1, r3, r3, r2
 800272e:	1099      	asrs	r1, r3, #2
 8002730:	17d3      	asrs	r3, r2, #31
 8002732:	1ac9      	subs	r1, r1, r3
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	1ad1      	subs	r1, r2, r3
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002744:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_int) % 10);
 8002746:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <main+0x16f8>)
 800274c:	fb83 1302 	smull	r1, r3, r3, r2
 8002750:	1099      	asrs	r1, r3, #2
 8002752:	17d3      	asrs	r3, r2, #31
 8002754:	1ac9      	subs	r1, r1, r3
 8002756:	460b      	mov	r3, r1
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	1ad1      	subs	r1, r2, r3
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002766:	70da      	strb	r2, [r3, #3]
 8002768:	e00e      	b.n	8002788 <main+0x1700>
 800276a:	bf00      	nop
 800276c:	2000000f 	.word	0x2000000f
 8002770:	200000aa 	.word	0x200000aa
 8002774:	200000a9 	.word	0x200000a9
 8002778:	200000bc 	.word	0x200000bc
 800277c:	10624dd3 	.word	0x10624dd3
 8002780:	66666667 	.word	0x66666667
 8002784:	51eb851f 	.word	0x51eb851f
				buttonUpdate = 0;
 8002788:	4bd4      	ldr	r3, [pc, #848]	; (8002adc <main+0x1a54>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter amp values

		//parameter off values
		if (rows == 4 && cols == 1)
 800278e:	4bd4      	ldr	r3, [pc, #848]	; (8002ae0 <main+0x1a58>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	f040 821d 	bne.w	8002bd2 <main+0x1b4a>
 8002798:	4bd2      	ldr	r3, [pc, #840]	; (8002ae4 <main+0x1a5c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 8218 	bne.w	8002bd2 <main+0x1b4a>
		{
			if (buttonStateD && buttonUpdate)
 80027a2:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <main+0x1730>
 80027aa:	4bcc      	ldr	r3, [pc, #816]	; (8002adc <main+0x1a54>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <main+0x1730>
			{
				buttonUpdate = 0;
 80027b2:	4bca      	ldr	r3, [pc, #808]	; (8002adc <main+0x1a54>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 80027b8:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <main+0x175c>
 80027c0:	4bc6      	ldr	r3, [pc, #792]	; (8002adc <main+0x1a54>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <main+0x175c>
			{
				Lcd_clear(&lcd);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fae9 	bl	8000da4 <Lcd_clear>
//				rows = 3;
//				cols = 4;
				rows = 3;
 80027d2:	4bc3      	ldr	r3, [pc, #780]	; (8002ae0 <main+0x1a58>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
				cols = 3;
 80027d8:	4bc2      	ldr	r3, [pc, #776]	; (8002ae4 <main+0x1a5c>)
 80027da:	2203      	movs	r2, #3
 80027dc:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 80027de:	4bbf      	ldr	r3, [pc, #764]	; (8002adc <main+0x1a54>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 80027e4:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d029      	beq.n	8002840 <main+0x17b8>
 80027ec:	4bbb      	ldr	r3, [pc, #748]	; (8002adc <main+0x1a54>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d025      	beq.n	8002840 <main+0x17b8>
			{
				setOffset = 1;
 80027f4:	4bbc      	ldr	r3, [pc, #752]	; (8002ae8 <main+0x1a60>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
				if(DC_flag)
 80027fa:	4bbc      	ldr	r3, [pc, #752]	; (8002aec <main+0x1a64>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <main+0x1792>
				{
					signal_d = 1;
 8002802:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 800280a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
					signal_s = 0;
 8002812:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
				}
				if(AC_flag)
 800281a:	4bb5      	ldr	r3, [pc, #724]	; (8002af0 <main+0x1a68>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <main+0x17b2>
				{
					signal_s = 1;
 8002822:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
					signal_d = 0;
 800282a:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 8002832:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
				}

				buttonUpdate = 0;
 800283a:	4ba8      	ldr	r3, [pc, #672]	; (8002adc <main+0x1a54>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8002840:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80d4 	beq.w	80029f2 <main+0x196a>
 800284a:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <main+0x1a54>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80cf 	beq.w	80029f2 <main+0x196a>
			{
				if (DC_flag)
 8002854:	4ba5      	ldr	r3, [pc, #660]	; (8002aec <main+0x1a64>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d061      	beq.n	8002920 <main+0x1898>
				{
					//DAC_DC_Offset_int = DAC_DC_offset;

					DAC_DC_Offset_int = DAC_DC_Offset_int - 100;
 800285c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002860:	3b64      	subs	r3, #100	; 0x64
 8002862:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
					if(DAC_DC_Offset_int <= 100)
 8002866:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	dc02      	bgt.n	8002874 <main+0x17ec>
					{
						DAC_DC_Offset_int = 100;
 800286e:	2364      	movs	r3, #100	; 0x64
 8002870:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
					}
					//DAC_DC_Offset_int = DAC_DC_offset;
					DC_offset_output_value[0] = ((DAC_DC_Offset_int/1000) % 10);
 8002874:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002878:	4a9e      	ldr	r2, [pc, #632]	; (8002af4 <main+0x1a6c>)
 800287a:	fb82 1203 	smull	r1, r2, r2, r3
 800287e:	1192      	asrs	r2, r2, #6
 8002880:	17db      	asrs	r3, r3, #31
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	4b9c      	ldr	r3, [pc, #624]	; (8002af8 <main+0x1a70>)
 8002886:	fb83 1302 	smull	r1, r3, r3, r2
 800288a:	1099      	asrs	r1, r3, #2
 800288c:	17d3      	asrs	r3, r2, #31
 800288e:	1ac9      	subs	r1, r1, r3
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	1ad1      	subs	r1, r2, r3
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028a0:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_int/100) % 10);
 80028a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80028a6:	4a95      	ldr	r2, [pc, #596]	; (8002afc <main+0x1a74>)
 80028a8:	fb82 1203 	smull	r1, r2, r2, r3
 80028ac:	1152      	asrs	r2, r2, #5
 80028ae:	17db      	asrs	r3, r3, #31
 80028b0:	1ad2      	subs	r2, r2, r3
 80028b2:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <main+0x1a70>)
 80028b4:	fb83 1302 	smull	r1, r3, r3, r2
 80028b8:	1099      	asrs	r1, r3, #2
 80028ba:	17d3      	asrs	r3, r2, #31
 80028bc:	1ac9      	subs	r1, r1, r3
 80028be:	460b      	mov	r3, r1
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	1ad1      	subs	r1, r2, r3
 80028c8:	b2ca      	uxtb	r2, r1
 80028ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ce:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_int/10) % 10);
 80028d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80028d4:	4a88      	ldr	r2, [pc, #544]	; (8002af8 <main+0x1a70>)
 80028d6:	fb82 1203 	smull	r1, r2, r2, r3
 80028da:	1092      	asrs	r2, r2, #2
 80028dc:	17db      	asrs	r3, r3, #31
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <main+0x1a70>)
 80028e2:	fb83 1302 	smull	r1, r3, r3, r2
 80028e6:	1099      	asrs	r1, r3, #2
 80028e8:	17d3      	asrs	r3, r2, #31
 80028ea:	1ac9      	subs	r1, r1, r3
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	1ad1      	subs	r1, r2, r3
 80028f6:	b2ca      	uxtb	r2, r1
 80028f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028fc:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_int/1) % 10);
 80028fe:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <main+0x1a70>)
 8002904:	fb83 1302 	smull	r1, r3, r3, r2
 8002908:	1099      	asrs	r1, r3, #2
 800290a:	17d3      	asrs	r3, r2, #31
 800290c:	1ac9      	subs	r1, r1, r3
 800290e:	460b      	mov	r3, r1
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	1ad1      	subs	r1, r2, r3
 8002918:	b2ca      	uxtb	r2, r1
 800291a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800291e:	70da      	strb	r2, [r3, #3]
				}
				if (AC_flag)
 8002920:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <main+0x1a68>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d061      	beq.n	80029ec <main+0x1964>
				{
					DAC_offset_output_int = DAC_offset_output_int - 100;
 8002928:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800292c:	3b64      	subs	r3, #100	; 0x64
 800292e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
					if(DAC_offset_output_int <= 100)
 8002932:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	dc02      	bgt.n	8002940 <main+0x18b8>
					{
						DAC_offset_output_int = 100;
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
					}
					//DAC_offset_output_int = DAC_offset_output;
					offset_output_value[0] = ((DAC_offset_output_int/1000) % 10);
 8002940:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002944:	4a6b      	ldr	r2, [pc, #428]	; (8002af4 <main+0x1a6c>)
 8002946:	fb82 1203 	smull	r1, r2, r2, r3
 800294a:	1192      	asrs	r2, r2, #6
 800294c:	17db      	asrs	r3, r3, #31
 800294e:	1ad2      	subs	r2, r2, r3
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <main+0x1a70>)
 8002952:	fb83 1302 	smull	r1, r3, r3, r2
 8002956:	1099      	asrs	r1, r3, #2
 8002958:	17d3      	asrs	r3, r2, #31
 800295a:	1ac9      	subs	r1, r1, r3
 800295c:	460b      	mov	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	1ad1      	subs	r1, r2, r3
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800296c:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_int/100) % 10);
 800296e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002972:	4a62      	ldr	r2, [pc, #392]	; (8002afc <main+0x1a74>)
 8002974:	fb82 1203 	smull	r1, r2, r2, r3
 8002978:	1152      	asrs	r2, r2, #5
 800297a:	17db      	asrs	r3, r3, #31
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	4b5e      	ldr	r3, [pc, #376]	; (8002af8 <main+0x1a70>)
 8002980:	fb83 1302 	smull	r1, r3, r3, r2
 8002984:	1099      	asrs	r1, r3, #2
 8002986:	17d3      	asrs	r3, r2, #31
 8002988:	1ac9      	subs	r1, r1, r3
 800298a:	460b      	mov	r3, r1
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	1ad1      	subs	r1, r2, r3
 8002994:	b2ca      	uxtb	r2, r1
 8002996:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800299a:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_int/10) % 10);
 800299c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <main+0x1a70>)
 80029a2:	fb82 1203 	smull	r1, r2, r2, r3
 80029a6:	1092      	asrs	r2, r2, #2
 80029a8:	17db      	asrs	r3, r3, #31
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <main+0x1a70>)
 80029ae:	fb83 1302 	smull	r1, r3, r3, r2
 80029b2:	1099      	asrs	r1, r3, #2
 80029b4:	17d3      	asrs	r3, r2, #31
 80029b6:	1ac9      	subs	r1, r1, r3
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	1ad1      	subs	r1, r2, r3
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029c8:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_int/1) % 10);
 80029ca:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <main+0x1a70>)
 80029d0:	fb83 1302 	smull	r1, r3, r3, r2
 80029d4:	1099      	asrs	r1, r3, #2
 80029d6:	17d3      	asrs	r3, r2, #31
 80029d8:	1ac9      	subs	r1, r1, r3
 80029da:	460b      	mov	r3, r1
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	1ad1      	subs	r1, r2, r3
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029ea:	70da      	strb	r2, [r3, #3]
				}
				buttonUpdate = 0;
 80029ec:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <main+0x1a54>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 80029f2:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80eb 	beq.w	8002bd2 <main+0x1b4a>
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <main+0x1a54>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80e6 	beq.w	8002bd2 <main+0x1b4a>
			{
				if (DC_flag)
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <main+0x1a64>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <main+0x1a4e>
				{
					//DAC_DC_Offset_int = DAC_DC_offset;
					DAC_DC_Offset_int = DAC_DC_Offset_int + 100;
 8002a0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a12:	3364      	adds	r3, #100	; 0x64
 8002a14:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
					if(DAC_DC_Offset_int >= 3200)
 8002a18:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a1c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002a20:	db03      	blt.n	8002a2a <main+0x19a2>
					{
						DAC_DC_Offset_int = 3200;
 8002a22:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a26:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
					}
					DC_offset_output_value[0] = ((DAC_DC_Offset_int/1000) % 10);
 8002a2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a2e:	4a31      	ldr	r2, [pc, #196]	; (8002af4 <main+0x1a6c>)
 8002a30:	fb82 1203 	smull	r1, r2, r2, r3
 8002a34:	1192      	asrs	r2, r2, #6
 8002a36:	17db      	asrs	r3, r3, #31
 8002a38:	1ad2      	subs	r2, r2, r3
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <main+0x1a70>)
 8002a3c:	fb83 1302 	smull	r1, r3, r3, r2
 8002a40:	1099      	asrs	r1, r3, #2
 8002a42:	17d3      	asrs	r3, r2, #31
 8002a44:	1ac9      	subs	r1, r1, r3
 8002a46:	460b      	mov	r3, r1
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	1ad1      	subs	r1, r2, r3
 8002a50:	b2ca      	uxtb	r2, r1
 8002a52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a56:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_int/100) % 10);
 8002a58:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <main+0x1a74>)
 8002a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a62:	1152      	asrs	r2, r2, #5
 8002a64:	17db      	asrs	r3, r3, #31
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <main+0x1a70>)
 8002a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a6e:	1099      	asrs	r1, r3, #2
 8002a70:	17d3      	asrs	r3, r2, #31
 8002a72:	1ac9      	subs	r1, r1, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	1ad1      	subs	r1, r2, r3
 8002a7e:	b2ca      	uxtb	r2, r1
 8002a80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a84:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_int/10) % 10);
 8002a86:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <main+0x1a70>)
 8002a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a90:	1092      	asrs	r2, r2, #2
 8002a92:	17db      	asrs	r3, r3, #31
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <main+0x1a70>)
 8002a98:	fb83 1302 	smull	r1, r3, r3, r2
 8002a9c:	1099      	asrs	r1, r3, #2
 8002a9e:	17d3      	asrs	r3, r2, #31
 8002aa0:	1ac9      	subs	r1, r1, r3
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	1ad1      	subs	r1, r2, r3
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ab2:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_int/1) % 10);
 8002ab4:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <main+0x1a70>)
 8002aba:	fb83 1302 	smull	r1, r3, r3, r2
 8002abe:	1099      	asrs	r1, r3, #2
 8002ac0:	17d3      	asrs	r3, r2, #31
 8002ac2:	1ac9      	subs	r1, r1, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	1ad1      	subs	r1, r2, r3
 8002ace:	b2ca      	uxtb	r2, r1
 8002ad0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad4:	70da      	strb	r2, [r3, #3]
				}
				if (AC_flag)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <main+0x1a68>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	e011      	b.n	8002b00 <main+0x1a78>
 8002adc:	2000000f 	.word	0x2000000f
 8002ae0:	200000aa 	.word	0x200000aa
 8002ae4:	200000a9 	.word	0x200000a9
 8002ae8:	200002b4 	.word	0x200002b4
 8002aec:	200000ab 	.word	0x200000ab
 8002af0:	200000ac 	.word	0x200000ac
 8002af4:	10624dd3 	.word	0x10624dd3
 8002af8:	66666667 	.word	0x66666667
 8002afc:	51eb851f 	.word	0x51eb851f
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d063      	beq.n	8002bcc <main+0x1b44>
				{
					DAC_offset_output_int = DAC_offset_output_int + 100;
 8002b04:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b08:	3364      	adds	r3, #100	; 0x64
 8002b0a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
					if(DAC_offset_output_int >= 3200)
 8002b0e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b12:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002b16:	db03      	blt.n	8002b20 <main+0x1a98>
					{
						DAC_offset_output_int = 3200;
 8002b18:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002b1c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
					}
					//DAC_offset_output_int = DAC_offset_output;
					offset_output_value[0] = ((DAC_offset_output_int/1000) % 10);
 8002b20:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b24:	4aca      	ldr	r2, [pc, #808]	; (8002e50 <main+0x1dc8>)
 8002b26:	fb82 1203 	smull	r1, r2, r2, r3
 8002b2a:	1192      	asrs	r2, r2, #6
 8002b2c:	17db      	asrs	r3, r3, #31
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	4bc8      	ldr	r3, [pc, #800]	; (8002e54 <main+0x1dcc>)
 8002b32:	fb83 1302 	smull	r1, r3, r3, r2
 8002b36:	1099      	asrs	r1, r3, #2
 8002b38:	17d3      	asrs	r3, r2, #31
 8002b3a:	1ac9      	subs	r1, r1, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	1ad1      	subs	r1, r2, r3
 8002b46:	b2ca      	uxtb	r2, r1
 8002b48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b4c:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_int/100) % 10);
 8002b4e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b52:	4ac1      	ldr	r2, [pc, #772]	; (8002e58 <main+0x1dd0>)
 8002b54:	fb82 1203 	smull	r1, r2, r2, r3
 8002b58:	1152      	asrs	r2, r2, #5
 8002b5a:	17db      	asrs	r3, r3, #31
 8002b5c:	1ad2      	subs	r2, r2, r3
 8002b5e:	4bbd      	ldr	r3, [pc, #756]	; (8002e54 <main+0x1dcc>)
 8002b60:	fb83 1302 	smull	r1, r3, r3, r2
 8002b64:	1099      	asrs	r1, r3, #2
 8002b66:	17d3      	asrs	r3, r2, #31
 8002b68:	1ac9      	subs	r1, r1, r3
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	1ad1      	subs	r1, r2, r3
 8002b74:	b2ca      	uxtb	r2, r1
 8002b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b7a:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_int/10) % 10);
 8002b7c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b80:	4ab4      	ldr	r2, [pc, #720]	; (8002e54 <main+0x1dcc>)
 8002b82:	fb82 1203 	smull	r1, r2, r2, r3
 8002b86:	1092      	asrs	r2, r2, #2
 8002b88:	17db      	asrs	r3, r3, #31
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	4bb1      	ldr	r3, [pc, #708]	; (8002e54 <main+0x1dcc>)
 8002b8e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b92:	1099      	asrs	r1, r3, #2
 8002b94:	17d3      	asrs	r3, r2, #31
 8002b96:	1ac9      	subs	r1, r1, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1ad1      	subs	r1, r2, r3
 8002ba2:	b2ca      	uxtb	r2, r1
 8002ba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ba8:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_int/1) % 10);
 8002baa:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002bae:	4ba9      	ldr	r3, [pc, #676]	; (8002e54 <main+0x1dcc>)
 8002bb0:	fb83 1302 	smull	r1, r3, r3, r2
 8002bb4:	1099      	asrs	r1, r3, #2
 8002bb6:	17d3      	asrs	r3, r2, #31
 8002bb8:	1ac9      	subs	r1, r1, r3
 8002bba:	460b      	mov	r3, r1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	1ad1      	subs	r1, r2, r3
 8002bc4:	b2ca      	uxtb	r2, r1
 8002bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bca:	70da      	strb	r2, [r3, #3]
				}
				buttonUpdate = 0;
 8002bcc:	4ba3      	ldr	r3, [pc, #652]	; (8002e5c <main+0x1dd4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter off values

		//parameter freq values
		if (rows == 4 && cols == 2)
 8002bd2:	4ba3      	ldr	r3, [pc, #652]	; (8002e60 <main+0x1dd8>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	f040 810f 	bne.w	8002dfa <main+0x1d72>
 8002bdc:	4ba1      	ldr	r3, [pc, #644]	; (8002e64 <main+0x1ddc>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f040 810a 	bne.w	8002dfa <main+0x1d72>
		{
			if (buttonStateD && buttonUpdate)
 8002be6:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <main+0x1b74>
 8002bee:	4b9b      	ldr	r3, [pc, #620]	; (8002e5c <main+0x1dd4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <main+0x1b74>
			{
				buttonUpdate = 0;
 8002bf6:	4b99      	ldr	r3, [pc, #612]	; (8002e5c <main+0x1dd4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateU && buttonUpdate)
 8002bfc:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d011      	beq.n	8002c28 <main+0x1ba0>
 8002c04:	4b95      	ldr	r3, [pc, #596]	; (8002e5c <main+0x1dd4>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <main+0x1ba0>
			{
				Lcd_clear(&lcd);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe f8c7 	bl	8000da4 <Lcd_clear>
//				rows = 3;
//				cols = 5;
				rows = 3;
 8002c16:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <main+0x1dd8>)
 8002c18:	2203      	movs	r2, #3
 8002c1a:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002c1c:	4b91      	ldr	r3, [pc, #580]	; (8002e64 <main+0x1ddc>)
 8002c1e:	2203      	movs	r2, #3
 8002c20:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002c22:	4b8e      	ldr	r3, [pc, #568]	; (8002e5c <main+0x1dd4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateM && buttonUpdate)
 8002c28:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <main+0x1bd4>
 8002c30:	4b8a      	ldr	r3, [pc, #552]	; (8002e5c <main+0x1dd4>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <main+0x1bd4>
			{
				setFrequency = 1;
 8002c38:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <main+0x1de0>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8002c3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8002c46:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8002c4e:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
				buttonUpdate = 0;
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <main+0x1dd4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateL && buttonUpdate)
 8002c5c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d061      	beq.n	8002d28 <main+0x1ca0>
 8002c64:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <main+0x1dd4>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05d      	beq.n	8002d28 <main+0x1ca0>
			{
				DAC_frequency_output_int = DAC_frequency_output_int -100;
 8002c6c:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002c70:	3b64      	subs	r3, #100	; 0x64
 8002c72:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
				if (DAC_frequency_output_int <= 0)
 8002c76:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <main+0x1bfc>
				{
					DAC_frequency_output_int = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
				}
				frequency_output_value[0] = ((DAC_frequency_output_int/1000) % 10);
 8002c84:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002c88:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <main+0x1dc8>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <main+0x1de4>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	08d9      	lsrs	r1, r3, #3
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cac:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_int/100) % 10);
 8002cae:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <main+0x1dd0>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b6b      	ldr	r3, [pc, #428]	; (8002e6c <main+0x1de4>)
 8002cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc2:	08d9      	lsrs	r1, r3, #3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cd6:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_int/10) % 10);
 8002cd8:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002cdc:	4a63      	ldr	r2, [pc, #396]	; (8002e6c <main+0x1de4>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <main+0x1de4>)
 8002ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cec:	08d9      	lsrs	r1, r3, #3
 8002cee:	460b      	mov	r3, r1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d00:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_int/1) % 10);
 8002d02:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	; 0x2a0
 8002d06:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <main+0x1de4>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	08d9      	lsrs	r1, r3, #3
 8002d0e:	460b      	mov	r3, r1
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d20:	70da      	strb	r2, [r3, #3]

				buttonUpdate = 0;
 8002d22:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <main+0x1dd4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
			}
			if (buttonStateR && buttonUpdate)
 8002d28:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d064      	beq.n	8002dfa <main+0x1d72>
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <main+0x1dd4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d060      	beq.n	8002dfa <main+0x1d72>
			{
				DAC_frequency_output_int = DAC_frequency_output_int +100;
 8002d38:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002d3c:	3364      	adds	r3, #100	; 0x64
 8002d3e:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
				if (DAC_frequency_output_int >= 5000)
 8002d42:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002d46:	f241 3287 	movw	r2, #4999	; 0x1387
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d903      	bls.n	8002d56 <main+0x1cce>
				{
					DAC_frequency_output_int = 5000;
 8002d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d52:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
				}
				frequency_output_value[0] = ((DAC_frequency_output_int/1000) % 10);
 8002d56:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <main+0x1dc8>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <main+0x1de4>)
 8002d66:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6a:	08d9      	lsrs	r1, r3, #3
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d7e:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_int/100) % 10);
 8002d80:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002d84:	4a34      	ldr	r2, [pc, #208]	; (8002e58 <main+0x1dd0>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <main+0x1de4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	08d9      	lsrs	r1, r3, #3
 8002d96:	460b      	mov	r3, r1
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002da8:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_int/10) % 10);
 8002daa:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <main+0x1de4>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <main+0x1de4>)
 8002dba:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbe:	08d9      	lsrs	r1, r3, #3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dd2:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_int/1) % 10);
 8002dd4:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	; 0x2a0
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <main+0x1de4>)
 8002dda:	fba3 1302 	umull	r1, r3, r3, r2
 8002dde:	08d9      	lsrs	r1, r3, #3
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002df2:	70da      	strb	r2, [r3, #3]

				buttonUpdate = 0;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <main+0x1dd4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter freq values

		//Parameter DutyCycle values
				if (rows == 4 && cols == 3)
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <main+0x1dd8>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d162      	bne.n	8002ec8 <main+0x1e40>
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <main+0x1ddc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d15e      	bne.n	8002ec8 <main+0x1e40>
				{
					if (buttonStateD && buttonUpdate)
 8002e0a:	f897 32d2 	ldrb.w	r3, [r7, #722]	; 0x2d2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <main+0x1d98>
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <main+0x1dd4>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <main+0x1d98>
					{
						buttonUpdate = 0;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <main+0x1dd4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
					}
					if (buttonStateU && buttonUpdate)
 8002e20:	f897 32d1 	ldrb.w	r3, [r7, #721]	; 0x2d1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <main+0x1de8>
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <main+0x1dd4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01f      	beq.n	8002e70 <main+0x1de8>
					{
						Lcd_clear(&lcd);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd ffb5 	bl	8000da4 <Lcd_clear>
						rows = 3;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <main+0x1dd8>)
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
						cols = 3;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <main+0x1ddc>)
 8002e42:	2203      	movs	r2, #3
 8002e44:	701a      	strb	r2, [r3, #0]
						buttonUpdate = 0;
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <main+0x1dd4>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e010      	b.n	8002e70 <main+0x1de8>
 8002e4e:	bf00      	nop
 8002e50:	10624dd3 	.word	0x10624dd3
 8002e54:	66666667 	.word	0x66666667
 8002e58:	51eb851f 	.word	0x51eb851f
 8002e5c:	2000000f 	.word	0x2000000f
 8002e60:	200000aa 	.word	0x200000aa
 8002e64:	200000a9 	.word	0x200000a9
 8002e68:	20001590 	.word	0x20001590
 8002e6c:	cccccccd 	.word	0xcccccccd
					}
					if (buttonStateM && buttonUpdate)
 8002e70:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d006      	beq.n	8002e86 <main+0x1dfe>
 8002e78:	4bd3      	ldr	r3, [pc, #844]	; (80031c8 <main+0x2140>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <main+0x1dfe>
					{
						buttonUpdate = 0;
 8002e80:	4bd1      	ldr	r3, [pc, #836]	; (80031c8 <main+0x2140>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
					}
					if (buttonStateL && buttonUpdate)
 8002e86:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d011      	beq.n	8002eb2 <main+0x1e2a>
 8002e8e:	4bce      	ldr	r3, [pc, #824]	; (80031c8 <main+0x2140>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <main+0x1e2a>
					{
						Lcd_clear(&lcd);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd ff82 	bl	8000da4 <Lcd_clear>
						rows = 4;
 8002ea0:	4bca      	ldr	r3, [pc, #808]	; (80031cc <main+0x2144>)
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	701a      	strb	r2, [r3, #0]
						cols = 2;
 8002ea6:	4bca      	ldr	r3, [pc, #808]	; (80031d0 <main+0x2148>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
						buttonUpdate = 0;
 8002eac:	4bc6      	ldr	r3, [pc, #792]	; (80031c8 <main+0x2140>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
					}
					if (buttonStateR && buttonUpdate)
 8002eb2:	f897 32d0 	ldrb.w	r3, [r7, #720]	; 0x2d0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <main+0x1e40>
 8002eba:	4bc3      	ldr	r3, [pc, #780]	; (80031c8 <main+0x2140>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <main+0x1e40>
					{
						buttonUpdate = 0;
 8002ec2:	4bc1      	ldr	r3, [pc, #772]	; (80031c8 <main+0x2140>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
					}
				}
				//Parameter DutyCycle values


		if (cols == 0 && rows == 0)
 8002ec8:	4bc1      	ldr	r3, [pc, #772]	; (80031d0 <main+0x2148>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d110      	bne.n	8002ef2 <main+0x1e6a>
 8002ed0:	4bbe      	ldr	r3, [pc, #760]	; (80031cc <main+0x2144>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <main+0x1e6a>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd ff45 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Start Message");
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	49ba      	ldr	r1, [pc, #744]	; (80031d4 <main+0x214c>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd ff21 	bl	8000d34 <Lcd_string>
		}
		if(cols == 0 && rows == 1)
 8002ef2:	4bb7      	ldr	r3, [pc, #732]	; (80031d0 <main+0x2148>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11d      	bne.n	8002f36 <main+0x1eae>
 8002efa:	4bb4      	ldr	r3, [pc, #720]	; (80031cc <main+0x2144>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d119      	bne.n	8002f36 <main+0x1eae>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ff30 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Measure");
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	49b0      	ldr	r1, [pc, #704]	; (80031d8 <main+0x2150>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd ff0c 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	2200      	movs	r2, #0
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd ff23 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	49ab      	ldr	r1, [pc, #684]	; (80031dc <main+0x2154>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd feff 	bl	8000d34 <Lcd_string>
		}
		if(cols == 1 && rows == 1)
 8002f36:	4ba6      	ldr	r3, [pc, #664]	; (80031d0 <main+0x2148>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d11d      	bne.n	8002f7a <main+0x1ef2>
 8002f3e:	4ba3      	ldr	r3, [pc, #652]	; (80031cc <main+0x2144>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d119      	bne.n	8002f7a <main+0x1ef2>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ff0e 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sig gen");
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	49a1      	ldr	r1, [pc, #644]	; (80031e0 <main+0x2158>)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd feea 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	2200      	movs	r2, #0
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd ff01 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	499a      	ldr	r1, [pc, #616]	; (80031dc <main+0x2154>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fedd 	bl	8000d34 <Lcd_string>
		}
		if(cols == 0 && rows == 2)
 8002f7a:	4b95      	ldr	r3, [pc, #596]	; (80031d0 <main+0x2148>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d14f      	bne.n	8003022 <main+0x1f9a>
 8002f82:	4b92      	ldr	r3, [pc, #584]	; (80031cc <main+0x2144>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d14b      	bne.n	8003022 <main+0x1f9a>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002f8a:	f107 031c 	add.w	r3, r7, #28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd feec 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Voltage");
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	4991      	ldr	r1, [pc, #580]	; (80031e4 <main+0x215c>)
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fec8 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fedf 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (DC_disp_offset[6] - 48));
 8002fb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fb6:	799b      	ldrb	r3, [r3, #6]
 8002fb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fe9e 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4986      	ldr	r1, [pc, #536]	; (80031e8 <main+0x2160>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd feb0 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (DC_disp_offset[7]-48));
 8002fd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fd8:	79db      	ldrb	r3, [r3, #7]
 8002fda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fe8d 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DC_disp_offset[8]-48));
 8002fea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fee:	7a1b      	ldrb	r3, [r3, #8]
 8002ff0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fe82 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DC_disp_offset[9] - 48));
 8003000:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003004:	7a5b      	ldrb	r3, [r3, #9]
 8003006:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fe77 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 8003016:	f107 031c 	add.w	r3, r7, #28
 800301a:	4974      	ldr	r1, [pc, #464]	; (80031ec <main+0x2164>)
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe89 	bl	8000d34 <Lcd_string>
		}
		if(cols == 1 && rows == 2)
 8003022:	4b6b      	ldr	r3, [pc, #428]	; (80031d0 <main+0x2148>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11d      	bne.n	8003066 <main+0x1fde>
 800302a:	4b68      	ldr	r3, [pc, #416]	; (80031cc <main+0x2144>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d119      	bne.n	8003066 <main+0x1fde>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fe98 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Current");
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	496a      	ldr	r1, [pc, #424]	; (80031f0 <main+0x2168>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fe74 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	2200      	movs	r2, #0
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fe8b 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "No current");
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <main+0x216c>)
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fe67 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 2 && AC_measure==1 && timer_interrupt==1 && measurment_mode==1)
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <main+0x2148>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	f040 8104 	bne.w	8003278 <main+0x21f0>
 8003070:	4b56      	ldr	r3, [pc, #344]	; (80031cc <main+0x2144>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	f040 80ff 	bne.w	8003278 <main+0x21f0>
 800307a:	f8b7 32ca 	ldrh.w	r3, [r7, #714]	; 0x2ca
 800307e:	2b01      	cmp	r3, #1
 8003080:	f040 80fa 	bne.w	8003278 <main+0x21f0>
 8003084:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <main+0x2170>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 80f5 	bne.w	8003278 <main+0x21f0>
 800308e:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 8003092:	2b01      	cmp	r3, #1
 8003094:	f040 80f0 	bne.w	8003278 <main+0x21f0>
		{
			//DC_measure = 0;
			//AC_measure = 1;

			Lcd_cursor(&lcd, 0, 0);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fe65 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Voltage");
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4954      	ldr	r1, [pc, #336]	; (80031fc <main+0x2174>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fe41 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	2200      	movs	r2, #0
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fe58 	bl	8000d70 <Lcd_cursor>

			LCD_scroll_count++;
 80030c0:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 80030c4:	3301      	adds	r3, #1
 80030c6:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
			//			AC_disp_pk_pk[7] = (AC_pk_pk/100) %10 + 48;
			//			AC_disp_pk_pk[8] = (AC_pk_pk/10) %10 + 48;
			//			AC_disp_pk_pk[9] = (AC_pk_pk/1) %10 + 48;
			//offset//
			//Lcd_clear(&lcd);
			Lcd_string(&lcd, "O:");
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	494c      	ldr	r1, [pc, #304]	; (8003200 <main+0x2178>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fe2f 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_offset[6]-48));
 80030d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80030da:	799b      	ldrb	r3, [r3, #6]
 80030dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fe0c 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	493d      	ldr	r1, [pc, #244]	; (80031e8 <main+0x2160>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fe1e 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_offset[7]-48));
 80030f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80030fc:	79db      	ldrb	r3, [r3, #7]
 80030fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fdfb 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_offset[8]-48));
 800310e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003112:	7a1b      	ldrb	r3, [r3, #8]
 8003114:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fdf0 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_offset[9]-48));
 8003124:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003128:	7a5b      	ldrb	r3, [r3, #9]
 800312a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fde5 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	492b      	ldr	r1, [pc, #172]	; (80031ec <main+0x2164>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fdf7 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	492e      	ldr	r1, [pc, #184]	; (8003204 <main+0x217c>)
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fdf1 	bl	8000d34 <Lcd_string>

			//Amplitude //
			Lcd_string(&lcd, "A:");
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	492c      	ldr	r1, [pc, #176]	; (8003208 <main+0x2180>)
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fdeb 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 800315e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fdc8 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	491b      	ldr	r1, [pc, #108]	; (80031e8 <main+0x2160>)
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fdda 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 8003180:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003184:	79db      	ldrb	r3, [r3, #7]
 8003186:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fdb7 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 8003196:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800319a:	7a1b      	ldrb	r3, [r3, #8]
 800319c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fdac 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 80031ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031b0:	7a5b      	ldrb	r3, [r3, #9]
 80031b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fda1 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	e021      	b.n	800320c <main+0x2184>
 80031c8:	2000000f 	.word	0x2000000f
 80031cc:	200000aa 	.word	0x200000aa
 80031d0:	200000a9 	.word	0x200000a9
 80031d4:	0800e39c 	.word	0x0800e39c
 80031d8:	0800e3ac 	.word	0x0800e3ac
 80031dc:	0800e3b4 	.word	0x0800e3b4
 80031e0:	0800e3bc 	.word	0x0800e3bc
 80031e4:	0800e3c4 	.word	0x0800e3c4
 80031e8:	0800e3d0 	.word	0x0800e3d0
 80031ec:	0800e3d4 	.word	0x0800e3d4
 80031f0:	0800e3d8 	.word	0x0800e3d8
 80031f4:	0800e3e4 	.word	0x0800e3e4
 80031f8:	2000166d 	.word	0x2000166d
 80031fc:	0800e3f0 	.word	0x0800e3f0
 8003200:	0800e3fc 	.word	0x0800e3fc
 8003204:	0800e400 	.word	0x0800e400
 8003208:	0800e404 	.word	0x0800e404
 800320c:	49cc      	ldr	r1, [pc, #816]	; (8003540 <main+0x24b8>)
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd fd90 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	49ca      	ldr	r1, [pc, #808]	; (8003544 <main+0x24bc>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fd8a 	bl	8000d34 <Lcd_string>

			//Frequency//
			if(AC_freq < 1000)
 8003220:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8003224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003228:	d205      	bcs.n	8003236 <main+0x21ae>
			{
				Lcd_string(&lcd, "0");
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	49c6      	ldr	r1, [pc, #792]	; (8003548 <main+0x24c0>)
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fd7f 	bl	8000d34 <Lcd_string>
			}
			Lcd_string(&lcd, "F:");
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	49c4      	ldr	r1, [pc, #784]	; (800354c <main+0x24c4>)
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fd79 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, AC_freq);
 8003242:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fd59 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "Hz");
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	49be      	ldr	r1, [pc, #760]	; (8003550 <main+0x24c8>)
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fd6b 	bl	8000d34 <Lcd_string>

			if(LCD_scroll_count > 8){
 800325e:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 8003262:	2b08      	cmp	r3, #8
 8003264:	d908      	bls.n	8003278 <main+0x21f0>
				lcd_write_command(&lcd, 0x1A);
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	211a      	movs	r1, #26
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd fda5 	bl	8000dbc <lcd_write_command>
				LCD_scroll_count = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
			}

		}

		if(cols == 3 && rows == 2)
 8003278:	4bb6      	ldr	r3, [pc, #728]	; (8003554 <main+0x24cc>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d11d      	bne.n	80032bc <main+0x2234>
 8003280:	4bb5      	ldr	r3, [pc, #724]	; (8003558 <main+0x24d0>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d119      	bne.n	80032bc <main+0x2234>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fd6d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Current");
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	49b0      	ldr	r1, [pc, #704]	; (800355c <main+0x24d4>)
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fd49 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	2200      	movs	r2, #0
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fd60 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "No current");
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	49aa      	ldr	r1, [pc, #680]	; (8003560 <main+0x24d8>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fd3c 	bl	8000d34 <Lcd_string>
		}

		if(cols == 4 && rows == 2)
 80032bc:	4ba5      	ldr	r3, [pc, #660]	; (8003554 <main+0x24cc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d117      	bne.n	80032f4 <main+0x226c>
 80032c4:	4ba4      	ldr	r3, [pc, #656]	; (8003558 <main+0x24d0>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d113      	bne.n	80032f4 <main+0x226c>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd fd4b 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	49a1      	ldr	r1, [pc, #644]	; (8003564 <main+0x24dc>)
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fd27 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	2200      	movs	r2, #0
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fd3e 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 2)
 80032f4:	4b97      	ldr	r3, [pc, #604]	; (8003554 <main+0x24cc>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d117      	bne.n	800332c <main+0x22a4>
 80032fc:	4b96      	ldr	r3, [pc, #600]	; (8003558 <main+0x24d0>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d113      	bne.n	800332c <main+0x22a4>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fd2f 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Parameter");
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4994      	ldr	r1, [pc, #592]	; (8003568 <main+0x24e0>)
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd0b 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800331e:	f107 031c 	add.w	r3, r7, #28
 8003322:	2200      	movs	r2, #0
 8003324:	2101      	movs	r1, #1
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fd22 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 2)
 800332c:	4b89      	ldr	r3, [pc, #548]	; (8003554 <main+0x24cc>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d117      	bne.n	8003364 <main+0x22dc>
 8003334:	4b88      	ldr	r3, [pc, #544]	; (8003558 <main+0x24d0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d113      	bne.n	8003364 <main+0x22dc>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fd13 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	4987      	ldr	r1, [pc, #540]	; (800356c <main+0x24e4>)
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fcef 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	2200      	movs	r2, #0
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fd06 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 0 && rows == 3)
 8003364:	4b7b      	ldr	r3, [pc, #492]	; (8003554 <main+0x24cc>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11d      	bne.n	80033a8 <main+0x2320>
 800336c:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <main+0x24d0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d119      	bne.n	80033a8 <main+0x2320>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fcf7 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4977      	ldr	r1, [pc, #476]	; (8003564 <main+0x24dc>)
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fcd3 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	2200      	movs	r2, #0
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fcea 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC");
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	4973      	ldr	r1, [pc, #460]	; (8003570 <main+0x24e8>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fcc6 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 3)
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <main+0x24cc>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d11d      	bne.n	80033ec <main+0x2364>
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <main+0x24d0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d119      	bne.n	80033ec <main+0x2364>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80033b8:	f107 031c 	add.w	r3, r7, #28
 80033bc:	2200      	movs	r2, #0
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fcd5 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	4966      	ldr	r1, [pc, #408]	; (8003564 <main+0x24dc>)
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fcb1 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	2200      	movs	r2, #0
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fcc8 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sinusoidal");
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	4963      	ldr	r1, [pc, #396]	; (8003574 <main+0x24ec>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fca4 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 3)
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <main+0x24cc>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11d      	bne.n	8003430 <main+0x23a8>
 80033f4:	4b58      	ldr	r3, [pc, #352]	; (8003558 <main+0x24d0>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d119      	bne.n	8003430 <main+0x23a8>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fcb3 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	4955      	ldr	r1, [pc, #340]	; (8003564 <main+0x24dc>)
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fc8f 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	2200      	movs	r2, #0
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fca6 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Pulse");
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4953      	ldr	r1, [pc, #332]	; (8003578 <main+0x24f0>)
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fc82 	bl	8000d34 <Lcd_string>
		}

		if(cols == 3 && rows == 3)
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <main+0x24cc>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d117      	bne.n	8003468 <main+0x23e0>
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <main+0x24d0>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d113      	bne.n	8003468 <main+0x23e0>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	2200      	movs	r2, #0
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fc91 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	494a      	ldr	r1, [pc, #296]	; (800357c <main+0x24f4>)
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fc6d 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	2200      	movs	r2, #0
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fc84 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 4 && rows == 3)
 8003468:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <main+0x24cc>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d117      	bne.n	80034a0 <main+0x2418>
 8003470:	4b39      	ldr	r3, [pc, #228]	; (8003558 <main+0x24d0>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d113      	bne.n	80034a0 <main+0x2418>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fc75 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Offset");
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	493d      	ldr	r1, [pc, #244]	; (8003580 <main+0x24f8>)
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd fc51 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003492:	f107 031c 	add.w	r3, r7, #28
 8003496:	2200      	movs	r2, #0
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fc68 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 3)
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <main+0x24cc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d117      	bne.n	80034d8 <main+0x2450>
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <main+0x24d0>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d113      	bne.n	80034d8 <main+0x2450>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fc59 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 80034be:	f107 031c 	add.w	r3, r7, #28
 80034c2:	4930      	ldr	r1, [pc, #192]	; (8003584 <main+0x24fc>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fc35 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80034ca:	f107 031c 	add.w	r3, r7, #28
 80034ce:	2200      	movs	r2, #0
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fc4c 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 3)
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <main+0x24cc>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d110      	bne.n	8003502 <main+0x247a>
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <main+0x24d0>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d10c      	bne.n	8003502 <main+0x247a>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fc3d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Duty Cycle");
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4923      	ldr	r1, [pc, #140]	; (8003588 <main+0x2500>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fc19 	bl	8000d34 <Lcd_string>
		}

		if(cols == 7 && rows == 3)
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <main+0x24cc>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b07      	cmp	r3, #7
 8003508:	d144      	bne.n	8003594 <main+0x250c>
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <main+0x24d0>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d140      	bne.n	8003594 <main+0x250c>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fc28 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	4911      	ldr	r1, [pc, #68]	; (800356c <main+0x24e4>)
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fc04 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	2200      	movs	r2, #0
 8003532:	2101      	movs	r1, #1
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fc1b 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "On");
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	e025      	b.n	800358c <main+0x2504>
 8003540:	0800e3d4 	.word	0x0800e3d4
 8003544:	0800e400 	.word	0x0800e400
 8003548:	0800e408 	.word	0x0800e408
 800354c:	0800e40c 	.word	0x0800e40c
 8003550:	0800e410 	.word	0x0800e410
 8003554:	200000a9 	.word	0x200000a9
 8003558:	200000aa 	.word	0x200000aa
 800355c:	0800e414 	.word	0x0800e414
 8003560:	0800e3e4 	.word	0x0800e3e4
 8003564:	0800e420 	.word	0x0800e420
 8003568:	0800e428 	.word	0x0800e428
 800356c:	0800e434 	.word	0x0800e434
 8003570:	0800e43c 	.word	0x0800e43c
 8003574:	0800e440 	.word	0x0800e440
 8003578:	0800e44c 	.word	0x0800e44c
 800357c:	0800e454 	.word	0x0800e454
 8003580:	0800e460 	.word	0x0800e460
 8003584:	0800e468 	.word	0x0800e468
 8003588:	0800e474 	.word	0x0800e474
 800358c:	49db      	ldr	r1, [pc, #876]	; (80038fc <main+0x2874>)
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fbd0 	bl	8000d34 <Lcd_string>
		}

		if(cols == 8 && rows == 3)
 8003594:	4bda      	ldr	r3, [pc, #872]	; (8003900 <main+0x2878>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d11d      	bne.n	80035d8 <main+0x2550>
 800359c:	4bd9      	ldr	r3, [pc, #868]	; (8003904 <main+0x287c>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d119      	bne.n	80035d8 <main+0x2550>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fbdf 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 80035b2:	f107 031c 	add.w	r3, r7, #28
 80035b6:	49d4      	ldr	r1, [pc, #848]	; (8003908 <main+0x2880>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fbbb 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	2200      	movs	r2, #0
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fbd2 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Off");
 80035cc:	f107 031c 	add.w	r3, r7, #28
 80035d0:	49ce      	ldr	r1, [pc, #824]	; (800390c <main+0x2884>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fbae 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 0)
 80035d8:	4bc9      	ldr	r3, [pc, #804]	; (8003900 <main+0x2878>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 8275 	bne.w	8003acc <main+0x2a44>
 80035e2:	4bc8      	ldr	r3, [pc, #800]	; (8003904 <main+0x287c>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8270 	bne.w	8003acc <main+0x2a44>
		{
			Lcd_cursor(&lcd, 0, 0);
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fbbb 	bl	8000d70 <Lcd_cursor>
			if(currentflag)
 80035fa:	4bc5      	ldr	r3, [pc, #788]	; (8003910 <main+0x2888>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <main+0x2586>
			{
				Lcd_string(&lcd, "No current" );
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	49c3      	ldr	r1, [pc, #780]	; (8003914 <main+0x288c>)
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fb93 	bl	8000d34 <Lcd_string>
			}

			if(DC_measure)
 800360e:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 8003612:	2b00      	cmp	r3, #0
 8003614:	d037      	beq.n	8003686 <main+0x25fe>
			{
				Lcd_int(&lcd, (DC_disp_offset[6] - 48));
 8003616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800361a:	799b      	ldrb	r3, [r3, #6]
 800361c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd fb6c 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	49b9      	ldr	r1, [pc, #740]	; (8003918 <main+0x2890>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fb7e 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (DC_disp_offset[7]-48));
 8003638:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800363c:	79db      	ldrb	r3, [r3, #7]
 800363e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fb5b 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DC_disp_offset[8]-48));
 800364e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003652:	7a1b      	ldrb	r3, [r3, #8]
 8003654:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003658:	f107 031c 	add.w	r3, r7, #28
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fb50 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DC_disp_offset[9] - 48));
 8003664:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003668:	7a5b      	ldrb	r3, [r3, #9]
 800366a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fb45 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	49a7      	ldr	r1, [pc, #668]	; (800391c <main+0x2894>)
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fb57 	bl	8000d34 <Lcd_string>
			}
			if(AC_measure)
 8003686:	f8b7 32ca 	ldrh.w	r3, [r7, #714]	; 0x2ca
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80b9 	beq.w	8003802 <main+0x277a>
			{
				LCD_scroll_count++;
 8003690:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 8003694:	3301      	adds	r3, #1
 8003696:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
				//offset//
				//Lcd_clear(&lcd);
				Lcd_string(&lcd, "O:");
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	49a0      	ldr	r1, [pc, #640]	; (8003920 <main+0x2898>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fb47 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_offset[6]-48));
 80036a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036aa:	799b      	ldrb	r3, [r3, #6]
 80036ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036b0:	f107 031c 	add.w	r3, r7, #28
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fb24 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4995      	ldr	r1, [pc, #596]	; (8003918 <main+0x2890>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fb36 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_offset[7]-48));
 80036c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036cc:	79db      	ldrb	r3, [r3, #7]
 80036ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fb13 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_offset[8]-48));
 80036de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036e2:	7a1b      	ldrb	r3, [r3, #8]
 80036e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fb08 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_offset[9]-48));
 80036f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036f8:	7a5b      	ldrb	r3, [r3, #9]
 80036fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fafd 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4983      	ldr	r1, [pc, #524]	; (800391c <main+0x2894>)
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fb0f 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, ",");
 8003716:	f107 031c 	add.w	r3, r7, #28
 800371a:	4982      	ldr	r1, [pc, #520]	; (8003924 <main+0x289c>)
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fb09 	bl	8000d34 <Lcd_string>

				//Amplitude //
				Lcd_string(&lcd, "A:");
 8003722:	f107 031c 	add.w	r3, r7, #28
 8003726:	4980      	ldr	r1, [pc, #512]	; (8003928 <main+0x28a0>)
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd fb03 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 800372e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003732:	799b      	ldrb	r3, [r3, #6]
 8003734:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fae0 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 8003744:	f107 031c 	add.w	r3, r7, #28
 8003748:	4973      	ldr	r1, [pc, #460]	; (8003918 <main+0x2890>)
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd faf2 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 8003750:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003754:	79db      	ldrb	r3, [r3, #7]
 8003756:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800375a:	f107 031c 	add.w	r3, r7, #28
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd facf 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 8003766:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800376a:	7a1b      	ldrb	r3, [r3, #8]
 800376c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fac4 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 800377c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003780:	7a5b      	ldrb	r3, [r3, #9]
 8003782:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fab9 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4961      	ldr	r1, [pc, #388]	; (800391c <main+0x2894>)
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd facb 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, ",");
 800379e:	f107 031c 	add.w	r3, r7, #28
 80037a2:	4960      	ldr	r1, [pc, #384]	; (8003924 <main+0x289c>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fac5 	bl	8000d34 <Lcd_string>

				//Frequency//
				if(AC_freq < 1000)
 80037aa:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80037ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b2:	d205      	bcs.n	80037c0 <main+0x2738>
				{
					Lcd_string(&lcd, "0");
 80037b4:	f107 031c 	add.w	r3, r7, #28
 80037b8:	495c      	ldr	r1, [pc, #368]	; (800392c <main+0x28a4>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd faba 	bl	8000d34 <Lcd_string>
				}
				Lcd_string(&lcd, "F:");
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	495a      	ldr	r1, [pc, #360]	; (8003930 <main+0x28a8>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fab4 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, AC_freq);
 80037cc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fa94 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "Hz");
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	4954      	ldr	r1, [pc, #336]	; (8003934 <main+0x28ac>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd faa6 	bl	8000d34 <Lcd_string>

				if(LCD_scroll_count > 8){
 80037e8:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d908      	bls.n	8003802 <main+0x277a>
					lcd_write_command(&lcd, 0x1A);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	211a      	movs	r1, #26
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fae0 	bl	8000dbc <lcd_write_command>
					LCD_scroll_count = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
				}
			}

			Lcd_cursor(&lcd, 1, 0);
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	2200      	movs	r2, #0
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fab0 	bl	8000d70 <Lcd_cursor>
			if(output == 0)
 8003810:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <main+0x279c>
			{
				Lcd_string(&lcd, "OUTPUT OFF");
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	4946      	ldr	r1, [pc, #280]	; (8003938 <main+0x28b0>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fa88 	bl	8000d34 <Lcd_string>
			}
			if(output == 1)
 8003824:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 814f 	bne.w	8003acc <main+0x2a44>
			{
				//Lcd_clear(&lcd);
				if(DC_flag)
 800382e:	4b43      	ldr	r3, [pc, #268]	; (800393c <main+0x28b4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d03f      	beq.n	80038b6 <main+0x282e>
				{
					scrollflag = 0;
 8003836:	4b42      	ldr	r3, [pc, #264]	; (8003940 <main+0x28b8>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
					Lcd_string(&lcd, "O:");
 800383c:	f107 031c 	add.w	r3, r7, #28
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <main+0x2898>)
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fa76 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[0]);
 8003848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fa54 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	492d      	ldr	r1, [pc, #180]	; (8003918 <main+0x2890>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fa66 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[1]);
 8003868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	461a      	mov	r2, r3
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fa44 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[2]);
 800387c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003880:	789b      	ldrb	r3, [r3, #2]
 8003882:	461a      	mov	r2, r3
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fa3a 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[3]);
 8003890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	461a      	mov	r2, r3
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fa30 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 80038a4:	f107 031c 	add.w	r3, r7, #28
 80038a8:	491c      	ldr	r1, [pc, #112]	; (800391c <main+0x2894>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fa42 	bl	8000d34 <Lcd_string>
					DC_flag = 0;
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <main+0x28b4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
				}
				if(AC_flag)
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <main+0x28bc>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80e1 	beq.w	8003a82 <main+0x29fa>
				{
					scrollflag = 1;
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <main+0x28b8>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]

					Lcd_string(&lcd, "O:");
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4915      	ldr	r1, [pc, #84]	; (8003920 <main+0x2898>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fa31 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, offset_output_value[0]);
 80038d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fa0f 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 80038e6:	f107 031c 	add.w	r3, r7, #28
 80038ea:	490b      	ldr	r1, [pc, #44]	; (8003918 <main+0x2890>)
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd fa21 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, offset_output_value[1]);
 80038f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	e025      	b.n	8003948 <main+0x28c0>
 80038fc:	0800e480 	.word	0x0800e480
 8003900:	200000a9 	.word	0x200000a9
 8003904:	200000aa 	.word	0x200000aa
 8003908:	0800e434 	.word	0x0800e434
 800390c:	0800e484 	.word	0x0800e484
 8003910:	200002b6 	.word	0x200002b6
 8003914:	0800e3e4 	.word	0x0800e3e4
 8003918:	0800e3d0 	.word	0x0800e3d0
 800391c:	0800e3d4 	.word	0x0800e3d4
 8003920:	0800e3fc 	.word	0x0800e3fc
 8003924:	0800e400 	.word	0x0800e400
 8003928:	0800e404 	.word	0x0800e404
 800392c:	0800e408 	.word	0x0800e408
 8003930:	0800e40c 	.word	0x0800e40c
 8003934:	0800e410 	.word	0x0800e410
 8003938:	0800e488 	.word	0x0800e488
 800393c:	200000ab 	.word	0x200000ab
 8003940:	200002b5 	.word	0x200002b5
 8003944:	200000ac 	.word	0x200000ac
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd f9d8 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, offset_output_value[2]);
 8003954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003958:	789b      	ldrb	r3, [r3, #2]
 800395a:	461a      	mov	r2, r3
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd f9ce 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, offset_output_value[3]);
 8003968:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	461a      	mov	r2, r3
 8003970:	f107 031c 	add.w	r3, r7, #28
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd f9c4 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	49da      	ldr	r1, [pc, #872]	; (8003cec <main+0x2c64>)
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f9d6 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	49d8      	ldr	r1, [pc, #864]	; (8003cf0 <main+0x2c68>)
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd f9d0 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "A:");
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	49d6      	ldr	r1, [pc, #856]	; (8003cf4 <main+0x2c6c>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd f9ca 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[0]));
 80039a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f9a8 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "." );
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	49cf      	ldr	r1, [pc, #828]	; (8003cf8 <main+0x2c70>)
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f9ba 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[1]));
 80039c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f998 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[2]));
 80039d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	461a      	mov	r2, r3
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd f98e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[3]));
 80039e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f107 031c 	add.w	r3, r7, #28
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd f984 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	49ba      	ldr	r1, [pc, #744]	; (8003cec <main+0x2c64>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd f996 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	49b8      	ldr	r1, [pc, #736]	; (8003cf0 <main+0x2c68>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd f990 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "F:");
 8003a14:	f107 031c 	add.w	r3, r7, #28
 8003a18:	49b8      	ldr	r1, [pc, #736]	; (8003cfc <main+0x2c74>)
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f98a 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (frequency_output_value[0]));
 8003a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd f968 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[1]));
 8003a34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd f95e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[2]));
 8003a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f954 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[3]));
 8003a5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd f94a 	bl	8000d04 <Lcd_int>
					//					if(DAC_frequency_output_int<1000)
					//					{
					//						Lcd_string(&lcd, "0");
					//					}
					//DAC_frequency_output = DAC_frequency_output_int;
					Lcd_string(&lcd, "Hz");
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	49a2      	ldr	r1, [pc, #648]	; (8003d00 <main+0x2c78>)
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd f95c 	bl	8000d34 <Lcd_string>

					AC_flag = 0;
 8003a7c:	4ba1      	ldr	r3, [pc, #644]	; (8003d04 <main+0x2c7c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
				}
				if(signal_p)
 8003a82:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <main+0x2a18>
				{
					scrollflag = 1;
 8003a8e:	4b9e      	ldr	r3, [pc, #632]	; (8003d08 <main+0x2c80>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]

					Lcd_string(&lcd, "O:1.200V,A:1.000V,D:025%");
 8003a94:	f107 031c 	add.w	r3, r7, #28
 8003a98:	499c      	ldr	r1, [pc, #624]	; (8003d0c <main+0x2c84>)
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd f94a 	bl	8000d34 <Lcd_string>

					//					signal_p = 0;
				}


				if(scrollflag)
 8003aa0:	4b99      	ldr	r3, [pc, #612]	; (8003d08 <main+0x2c80>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d011      	beq.n	8003acc <main+0x2a44>
				{
					LCD_scroll_count++;
 8003aa8:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 8003aac:	3301      	adds	r3, #1
 8003aae:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
					if(LCD_scroll_count > 8){
 8003ab2:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d908      	bls.n	8003acc <main+0x2a44>
						lcd_write_command(&lcd, 0x1A);
 8003aba:	f107 031c 	add.w	r3, r7, #28
 8003abe:	211a      	movs	r1, #26
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f97b 	bl	8000dbc <lcd_write_command>
						LCD_scroll_count = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
			}


		}

		if(cols == 0 && rows == 4)
 8003acc:	4b90      	ldr	r3, [pc, #576]	; (8003d10 <main+0x2c88>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 8089 	bne.w	8003be8 <main+0x2b60>
 8003ad6:	4b8f      	ldr	r3, [pc, #572]	; (8003d14 <main+0x2c8c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	f040 8084 	bne.w	8003be8 <main+0x2b60>
		{

			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003ae0:	f107 031c 	add.w	r3, r7, #28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f941 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 8003aee:	f107 031c 	add.w	r3, r7, #28
 8003af2:	4989      	ldr	r1, [pc, #548]	; (8003d18 <main+0x2c90>)
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f91d 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	2200      	movs	r2, #0
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd f934 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (amplitude_output_value[0]));
 8003b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f107 031c 	add.w	r3, r7, #28
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f8f4 	bl	8000d04 <Lcd_int>
			//			Lcd_string(&lcd, "." );
			Lcd_int(&lcd, (amplitude_output_value[1]));
 8003b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd f8ea 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[2]));
 8003b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd f8e0 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[3]));
 8003b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b48:	78db      	ldrb	r3, [r3, #3]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd f8d6 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "mV");
 8003b58:	f107 031c 	add.w	r3, r7, #28
 8003b5c:	496f      	ldr	r1, [pc, #444]	; (8003d1c <main+0x2c94>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd f8e8 	bl	8000d34 <Lcd_string>
			if (setAmplitude == 1)
 8003b64:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <main+0x2c98>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13d      	bne.n	8003be8 <main+0x2b60>
			{
				Lcd_string(&lcd, " ");
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	496c      	ldr	r1, [pc, #432]	; (8003d24 <main+0x2c9c>)
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd f8de 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	496a      	ldr	r1, [pc, #424]	; (8003d28 <main+0x2ca0>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd f8d8 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	4968      	ldr	r1, [pc, #416]	; (8003d2c <main+0x2ca4>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd f8d2 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	4966      	ldr	r1, [pc, #408]	; (8003d30 <main+0x2ca8>)
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f8cc 	bl	8000d34 <Lcd_string>
				DAC_amplitude_output = (amplitude_output_value[0])*1000 +(amplitude_output_value[1])*100 + (amplitude_output_value[2])*10 + (amplitude_output_value[3]);
 8003b9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba8:	fb03 f202 	mul.w	r2, r3, r2
 8003bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	2364      	movs	r3, #100	; 0x64
 8003bb6:	fb03 f301 	mul.w	r3, r3, r1
 8003bba:	441a      	add	r2, r3
 8003bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003bd2:	78d2      	ldrb	r2, [r2, #3]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	edc7 7aac 	vstr	s15, [r7, #688]	; 0x2b0
				setAmplitude = 0;
 8003be2:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <main+0x2c98>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]

			}


		}
		if(cols == 1 && rows == 4)
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <main+0x2c88>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 8142 	bne.w	8003e76 <main+0x2dee>
 8003bf2:	4b48      	ldr	r3, [pc, #288]	; (8003d14 <main+0x2c8c>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	f040 813d 	bne.w	8003e76 <main+0x2dee>
		{
			//			Lcd_clear(&lcd);
			if (DC_flag)
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <main+0x2cac>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80af 	beq.w	8003d64 <main+0x2cdc>
			{
				Lcd_cursor(&lcd, 0, 0);
 8003c06:	f107 031c 	add.w	r3, r7, #28
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd f8ae 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4947      	ldr	r1, [pc, #284]	; (8003d38 <main+0x2cb0>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd f88a 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003c20:	f107 031c 	add.w	r3, r7, #28
 8003c24:	2200      	movs	r2, #0
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd f8a1 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, ((DC_offset_output_value[0])));
 8003c2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f107 031c 	add.w	r3, r7, #28
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f861 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, ".");
				Lcd_int(&lcd, ((DC_offset_output_value[1])));
 8003c42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd f857 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, ((DC_offset_output_value[2])));
 8003c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c5a:	789b      	ldrb	r3, [r3, #2]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f107 031c 	add.w	r3, r7, #28
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fd f84d 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, ((DC_offset_output_value[3])));
 8003c6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c6e:	78db      	ldrb	r3, [r3, #3]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd f843 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4926      	ldr	r1, [pc, #152]	; (8003d1c <main+0x2c94>)
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd f855 	bl	8000d34 <Lcd_string>

				if (setOffset == 1)
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <main+0x2cb4>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d168      	bne.n	8003d64 <main+0x2cdc>
				{
					//signal_d = 1;
					//					DCDACMENU = 1;
					Lcd_string(&lcd, " ");
 8003c92:	f107 031c 	add.w	r3, r7, #28
 8003c96:	4923      	ldr	r1, [pc, #140]	; (8003d24 <main+0x2c9c>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd f84b 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003c9e:	f107 031c 	add.w	r3, r7, #28
 8003ca2:	4921      	ldr	r1, [pc, #132]	; (8003d28 <main+0x2ca0>)
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd f845 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003caa:	f107 031c 	add.w	r3, r7, #28
 8003cae:	491f      	ldr	r1, [pc, #124]	; (8003d2c <main+0x2ca4>)
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fd f83f 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	491d      	ldr	r1, [pc, #116]	; (8003d30 <main+0x2ca8>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd f839 	bl	8000d34 <Lcd_string>
					DAC_DC_offset = (DC_offset_output_value[0])*1000 +(DC_offset_output_value[1])*100 + (DC_offset_output_value[2])*10 + (DC_offset_output_value[3]);
 8003cc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	2364      	movs	r3, #100	; 0x64
 8003cdc:	fb03 f301 	mul.w	r3, r3, r1
 8003ce0:	441a      	add	r2, r3
 8003ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ce6:	789b      	ldrb	r3, [r3, #2]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	e029      	b.n	8003d40 <main+0x2cb8>
 8003cec:	0800e3d4 	.word	0x0800e3d4
 8003cf0:	0800e400 	.word	0x0800e400
 8003cf4:	0800e404 	.word	0x0800e404
 8003cf8:	0800e3d0 	.word	0x0800e3d0
 8003cfc:	0800e40c 	.word	0x0800e40c
 8003d00:	0800e410 	.word	0x0800e410
 8003d04:	200000ac 	.word	0x200000ac
 8003d08:	200002b5 	.word	0x200002b5
 8003d0c:	0800e494 	.word	0x0800e494
 8003d10:	200000a9 	.word	0x200000a9
 8003d14:	200000aa 	.word	0x200000aa
 8003d18:	0800e454 	.word	0x0800e454
 8003d1c:	0800e4b0 	.word	0x0800e4b0
 8003d20:	200000bc 	.word	0x200000bc
 8003d24:	0800e4b4 	.word	0x0800e4b4
 8003d28:	0800e4b8 	.word	0x0800e4b8
 8003d2c:	0800e4bc 	.word	0x0800e4bc
 8003d30:	0800e4c0 	.word	0x0800e4c0
 8003d34:	200000ab 	.word	0x200000ab
 8003d38:	0800e460 	.word	0x0800e460
 8003d3c:	200002b4 	.word	0x200002b4
 8003d40:	460b      	mov	r3, r1
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d4e:	78d2      	ldrb	r2, [r2, #3]
 8003d50:	4413      	add	r3, r2
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d5a:	edc7 7aa7 	vstr	s15, [r7, #668]	; 0x29c
					setOffset = 0;
 8003d5e:	4bc8      	ldr	r3, [pc, #800]	; (8004080 <main+0x2ff8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
				}
			}

			if (AC_flag)
 8003d64:	4bc7      	ldr	r3, [pc, #796]	; (8004084 <main+0x2ffc>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8084 	beq.w	8003e76 <main+0x2dee>
			{
				//				signal_s = 1;
				Lcd_cursor(&lcd, 0, 0);
 8003d6e:	f107 031c 	add.w	r3, r7, #28
 8003d72:	2200      	movs	r2, #0
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fffa 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003d7c:	f107 031c 	add.w	r3, r7, #28
 8003d80:	49c1      	ldr	r1, [pc, #772]	; (8004088 <main+0x3000>)
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc ffd6 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc ffed 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, (offset_output_value[0]));
 8003d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc ffad 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, "." );
				Lcd_int(&lcd, (offset_output_value[1]));
 8003daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc ffa3 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[2]));
 8003dbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc ff99 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[3]));
 8003dd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc ff8f 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	49a8      	ldr	r1, [pc, #672]	; (800408c <main+0x3004>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc ffa1 	bl	8000d34 <Lcd_string>
				if (setOffset == 1)
 8003df2:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <main+0x2ff8>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d13d      	bne.n	8003e76 <main+0x2dee>
				{
					Lcd_string(&lcd, " ");
 8003dfa:	f107 031c 	add.w	r3, r7, #28
 8003dfe:	49a4      	ldr	r1, [pc, #656]	; (8004090 <main+0x3008>)
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc ff97 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	49a2      	ldr	r1, [pc, #648]	; (8004094 <main+0x300c>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc ff91 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	49a0      	ldr	r1, [pc, #640]	; (8004098 <main+0x3010>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc ff8b 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003e1e:	f107 031c 	add.w	r3, r7, #28
 8003e22:	499e      	ldr	r1, [pc, #632]	; (800409c <main+0x3014>)
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc ff85 	bl	8000d34 <Lcd_string>
					DAC_offset_output = (offset_output_value[0])*1000 +(offset_output_value[1])*100 + (offset_output_value[2])*10 + (offset_output_value[3]);
 8003e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e36:	fb03 f202 	mul.w	r2, r3, r2
 8003e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	4619      	mov	r1, r3
 8003e42:	2364      	movs	r3, #100	; 0x64
 8003e44:	fb03 f301 	mul.w	r3, r3, r1
 8003e48:	441a      	add	r2, r3
 8003e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e4e:	789b      	ldrb	r3, [r3, #2]
 8003e50:	4619      	mov	r1, r3
 8003e52:	460b      	mov	r3, r1
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003e60:	78d2      	ldrb	r2, [r2, #3]
 8003e62:	4413      	add	r3, r2
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6c:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
					setOffset = 0;
 8003e70:	4b83      	ldr	r3, [pc, #524]	; (8004080 <main+0x2ff8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		if(cols == 2 && rows == 4)
 8003e76:	4b8a      	ldr	r3, [pc, #552]	; (80040a0 <main+0x3018>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	f040 8093 	bne.w	8003fa6 <main+0x2f1e>
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <main+0x301c>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	f040 808e 	bne.w	8003fa6 <main+0x2f1e>
		{
			Lcd_cursor(&lcd, 0, 0);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc ff6c 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	4982      	ldr	r1, [pc, #520]	; (80040a8 <main+0x3020>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc ff48 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc ff5f 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (frequency_output_value[0]));
 8003eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f107 031c 	add.w	r3, r7, #28
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fc ff1f 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[1]));
 8003ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f107 031c 	add.w	r3, r7, #28
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc ff15 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[2]));
 8003eda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ede:	789b      	ldrb	r3, [r3, #2]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc ff0b 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[3]));
 8003eee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f107 031c 	add.w	r3, r7, #28
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc ff01 	bl	8000d04 <Lcd_int>
			//			{
			//				Lcd_string(&lcd, "0");
			//			}
			//DAC_frequency_output = DAC_frequency_output_int;

			Lcd_string(&lcd, "Hz");
 8003f02:	f107 031c 	add.w	r3, r7, #28
 8003f06:	4969      	ldr	r1, [pc, #420]	; (80040ac <main+0x3024>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc ff13 	bl	8000d34 <Lcd_string>
			if (setFrequency == 1)
 8003f0e:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <main+0x3028>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d147      	bne.n	8003fa6 <main+0x2f1e>
			{
				Lcd_string(&lcd, " ");
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	495d      	ldr	r1, [pc, #372]	; (8004090 <main+0x3008>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fc ff09 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 8003f22:	f107 031c 	add.w	r3, r7, #28
 8003f26:	495b      	ldr	r1, [pc, #364]	; (8004094 <main+0x300c>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc ff03 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003f2e:	f107 031c 	add.w	r3, r7, #28
 8003f32:	4959      	ldr	r1, [pc, #356]	; (8004098 <main+0x3010>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fefd 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003f3a:	f107 031c 	add.w	r3, r7, #28
 8003f3e:	4957      	ldr	r1, [pc, #348]	; (800409c <main+0x3014>)
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc fef7 	bl	8000d34 <Lcd_string>

				DAC_frequency_output = (frequency_output_value[0])*1000 +(frequency_output_value[1])*100 + (frequency_output_value[2])*10 + (frequency_output_value[3]);
 8003f46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	0152      	lsls	r2, r2, #5
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	0092      	lsls	r2, r2, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4619      	mov	r1, r3
 8003f66:	0089      	lsls	r1, r1, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	0088      	lsls	r0, r1, #2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4603      	mov	r3, r0
 8003f72:	440b      	add	r3, r1
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f80:	789b      	ldrb	r3, [r3, #2]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	0089      	lsls	r1, r1, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f96:	78db      	ldrb	r3, [r3, #3]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2

				setFrequency = 0;
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <main+0x3028>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
			}

		}

		if(rows == 4 && cols == 3)
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <main+0x301c>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d110      	bne.n	8003fd0 <main+0x2f48>
 8003fae:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <main+0x3018>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d10c      	bne.n	8003fd0 <main+0x2f48>
		{
			Lcd_cursor(&lcd, 1, 0);
 8003fb6:	f107 031c 	add.w	r3, r7, #28
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fed6 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "25 %");
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	493a      	ldr	r1, [pc, #232]	; (80040b4 <main+0x302c>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc feb2 	bl	8000d34 <Lcd_string>
		}

		if(rows==0 && cols==1) //D2
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <main+0x301c>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <main+0x2f68>
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <main+0x3018>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <main+0x2f68>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fea:	f004 fcd5 	bl	8008998 <HAL_GPIO_WritePin>
 8003fee:	e006      	b.n	8003ffe <main+0x2f76>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffa:	f004 fccd 	bl	8008998 <HAL_GPIO_WritePin>
		}

		if(rows==0 && cols==1) //D3
 8003ffe:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <main+0x301c>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <main+0x2f96>
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <main+0x3018>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <main+0x2f96>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800400e:	2201      	movs	r2, #1
 8004010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004018:	f004 fcbe 	bl	8008998 <HAL_GPIO_WritePin>
 800401c:	e006      	b.n	800402c <main+0x2fa4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004028:	f004 fcb6 	bl	8008998 <HAL_GPIO_WritePin>
		}

		if(currentflag)//(rows == 2 && cols == 1) || (rows==2 && cols==3) || currentflag == 1) //D4
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <main+0x3030>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <main+0x2fbc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8004034:	2201      	movs	r2, #1
 8004036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800403a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403e:	f004 fcab 	bl	8008998 <HAL_GPIO_WritePin>
 8004042:	e006      	b.n	8004052 <main+0x2fca>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800404a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800404e:	f004 fca3 	bl	8008998 <HAL_GPIO_WritePin>
		}

		if(output == 1) //D5
 8004052:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8004056:	2b01      	cmp	r3, #1
 8004058:	d105      	bne.n	8004066 <main+0x2fde>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800405a:	2201      	movs	r2, #1
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	4817      	ldr	r0, [pc, #92]	; (80040bc <main+0x3034>)
 8004060:	f004 fc9a 	bl	8008998 <HAL_GPIO_WritePin>
 8004064:	e004      	b.n	8004070 <main+0x2fe8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	4814      	ldr	r0, [pc, #80]	; (80040bc <main+0x3034>)
 800406c:	f004 fc94 	bl	8008998 <HAL_GPIO_WritePin>
		}


		////////////////////   UART Processing    /////////////////////
		if(move){
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <main+0x3038>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d044      	beq.n	8004102 <main+0x307a>
			for(i = 0; i < 21; i++){
 8004078:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <main+0x303c>)
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	e039      	b.n	80040f4 <main+0x306c>
 8004080:	200002b4 	.word	0x200002b4
 8004084:	200000ac 	.word	0x200000ac
 8004088:	0800e460 	.word	0x0800e460
 800408c:	0800e4b0 	.word	0x0800e4b0
 8004090:	0800e4b4 	.word	0x0800e4b4
 8004094:	0800e4b8 	.word	0x0800e4b8
 8004098:	0800e4bc 	.word	0x0800e4bc
 800409c:	0800e4c0 	.word	0x0800e4c0
 80040a0:	200000a9 	.word	0x200000a9
 80040a4:	200000aa 	.word	0x200000aa
 80040a8:	0800e468 	.word	0x0800e468
 80040ac:	0800e410 	.word	0x0800e410
 80040b0:	20001590 	.word	0x20001590
 80040b4:	0800e4c4 	.word	0x0800e4c4
 80040b8:	200002b6 	.word	0x200002b6
 80040bc:	48000800 	.word	0x48000800
 80040c0:	20000309 	.word	0x20000309
 80040c4:	20000308 	.word	0x20000308
				Tempdata[i] = Txdata[i];
 80040c8:	4bc0      	ldr	r3, [pc, #768]	; (80043cc <main+0x3344>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	4bbf      	ldr	r3, [pc, #764]	; (80043cc <main+0x3344>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4bbe      	ldr	r3, [pc, #760]	; (80043d0 <main+0x3348>)
 80040d6:	5c59      	ldrb	r1, [r3, r1]
 80040d8:	4bbe      	ldr	r3, [pc, #760]	; (80043d4 <main+0x334c>)
 80040da:	5499      	strb	r1, [r3, r2]
				Txdata[i] = 0;
 80040dc:	4bbb      	ldr	r3, [pc, #748]	; (80043cc <main+0x3344>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4bbb      	ldr	r3, [pc, #748]	; (80043d0 <main+0x3348>)
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]
			for(i = 0; i < 21; i++){
 80040e8:	4bb8      	ldr	r3, [pc, #736]	; (80043cc <main+0x3344>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4bb6      	ldr	r3, [pc, #728]	; (80043cc <main+0x3344>)
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	4bb5      	ldr	r3, [pc, #724]	; (80043cc <main+0x3344>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b14      	cmp	r3, #20
 80040fa:	d9e5      	bls.n	80040c8 <main+0x3040>
			}
			move = 0;
 80040fc:	4bb6      	ldr	r3, [pc, #728]	; (80043d8 <main+0x3350>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
		}


		if (flag==1) {
 8004102:	4bb6      	ldr	r3, [pc, #728]	; (80043dc <main+0x3354>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 8497 	bne.w	8004a3c <main+0x39b4>


			if (Tempdata[2] == '#'){
 800410e:	4bb1      	ldr	r3, [pc, #708]	; (80043d4 <main+0x334c>)
 8004110:	789b      	ldrb	r3, [r3, #2]
 8004112:	2b23      	cmp	r3, #35	; 0x23
 8004114:	d13f      	bne.n	8004196 <main+0x310e>
				/// Display byte to screen
				if(Tempdata[4] == '1'){
 8004116:	4baf      	ldr	r3, [pc, #700]	; (80043d4 <main+0x334c>)
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b31      	cmp	r3, #49	; 0x31
 800411c:	d124      	bne.n	8004168 <main+0x30e0>
					if(write_to_lcd == 0){
 800411e:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <main+0x30a8>
						Lcd_clear(&lcd);
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc fe3a 	bl	8000da4 <Lcd_clear>
					}
					uint8_t disp_sc;
					disp_sc = Tempdata[6];
 8004130:	4ba8      	ldr	r3, [pc, #672]	; (80043d4 <main+0x334c>)
 8004132:	799b      	ldrb	r3, [r3, #6]
 8004134:	f887 3279 	strb.w	r3, [r7, #633]	; 0x279
					//HAL_UART_Transmit(&huart2,disp_sc,1, 50);
					lcd_write_data(&lcd, disp_sc);
 8004138:	f897 2279 	ldrb.w	r2, [r7, #633]	; 0x279
 800413c:	f107 031c 	add.w	r3, r7, #28
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fe68 	bl	8000e18 <lcd_write_data>
					write_to_lcd = 1;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
					menu_mode = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
					measurment_mode = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
					output = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
					com_to_lcd = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8004166:	e011      	b.n	800418c <main+0x3104>
				}
				else if(Tempdata[4] == '0'){
 8004168:	4b9a      	ldr	r3, [pc, #616]	; (80043d4 <main+0x334c>)
 800416a:	791b      	ldrb	r3, [r3, #4]
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d10d      	bne.n	800418c <main+0x3104>
					/// send command
					lcd_write_command(&lcd, Tempdata[6]);
 8004170:	4b98      	ldr	r3, [pc, #608]	; (80043d4 <main+0x334c>)
 8004172:	799a      	ldrb	r2, [r3, #6]
 8004174:	f107 031c 	add.w	r3, r7, #28
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fe1e 	bl	8000dbc <lcd_write_command>

					write_to_lcd = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
					com_to_lcd = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}

				flag = 0;
 800418c:	4b93      	ldr	r3, [pc, #588]	; (80043dc <main+0x3354>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	f000 bc53 	b.w	8004a3c <main+0x39b4>
			}
			else if(Tempdata[2] != '#' && write_to_lcd ==1){
 8004196:	4b8f      	ldr	r3, [pc, #572]	; (80043d4 <main+0x334c>)
 8004198:	789b      	ldrb	r3, [r3, #2]
 800419a:	2b23      	cmp	r3, #35	; 0x23
 800419c:	d010      	beq.n	80041c0 <main+0x3138>
 800419e:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10c      	bne.n	80041c0 <main+0x3138>
				Lcd_clear(&lcd);
 80041a6:	f107 031c 	add.w	r3, r7, #28
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fdfa 	bl	8000da4 <Lcd_clear>
				write_to_lcd = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
				com_to_lcd = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 80041bc:	f000 bc3e 	b.w	8004a3c <main+0x39b4>
			}



			else if(Tempdata[2] == '$'){
 80041c0:	4b84      	ldr	r3, [pc, #528]	; (80043d4 <main+0x334c>)
 80041c2:	789b      	ldrb	r3, [r3, #2]
 80041c4:	2b24      	cmp	r3, #36	; 0x24
 80041c6:	d158      	bne.n	800427a <main+0x31f2>
				// Measurement mode

				if((Tempdata[4] == 'D') && (Tempdata[5] == 'V')){
 80041c8:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <main+0x334c>)
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	2b44      	cmp	r3, #68	; 0x44
 80041ce:	d11f      	bne.n	8004210 <main+0x3188>
 80041d0:	4b80      	ldr	r3, [pc, #512]	; (80043d4 <main+0x334c>)
 80041d2:	795b      	ldrb	r3, [r3, #5]
 80041d4:	2b56      	cmp	r3, #86	; 0x56
 80041d6:	d11b      	bne.n	8004210 <main+0x3188>
					// DC - Voltage
					DC_measure = 1;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
					measurment_mode = 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
					menu_mode = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
					parameter_o = 1;
 80041ea:	f107 0365 	add.w	r3, r7, #101	; 0x65
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
					signal_d = 1;
 80041f2:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
					flag = 0;
 80041fa:	4b78      	ldr	r3, [pc, #480]	; (80043dc <main+0x3354>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
					AC_measure = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
					currentflag = 0;
 8004206:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <main+0x3358>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	f000 bc16 	b.w	8004a3c <main+0x39b4>
				}



				else if((Tempdata[4] == 'A') && (Tempdata[5] == 'V')){
 8004210:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <main+0x334c>)
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	2b41      	cmp	r3, #65	; 0x41
 8004216:	d116      	bne.n	8004246 <main+0x31be>
 8004218:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <main+0x334c>)
 800421a:	795b      	ldrb	r3, [r3, #5]
 800421c:	2b56      	cmp	r3, #86	; 0x56
 800421e:	d112      	bne.n	8004246 <main+0x31be>
					//AC - Voltage
					AC_measure = 1;
 8004220:	2301      	movs	r3, #1
 8004222:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
					measurment_mode = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
					menu_mode = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
					DC_measure = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
					flag = 0;
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <main+0x3354>)
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
					currentflag = 0;
 800423e:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <main+0x3358>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e3fa      	b.n	8004a3c <main+0x39b4>
				}
				else if((Tempdata[4] == 'D') && (Tempdata[5] == 'I')){
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <main+0x334c>)
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b44      	cmp	r3, #68	; 0x44
 800424c:	d107      	bne.n	800425e <main+0x31d6>
 800424e:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <main+0x334c>)
 8004250:	795b      	ldrb	r3, [r3, #5]
 8004252:	2b49      	cmp	r3, #73	; 0x49
 8004254:	d103      	bne.n	800425e <main+0x31d6>
					currentflag = 1;//DC - Current
 8004256:	4b62      	ldr	r3, [pc, #392]	; (80043e0 <main+0x3358>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e3ee      	b.n	8004a3c <main+0x39b4>

				}
				else if((Tempdata[4] == 'A') && (Tempdata[5] == 'I')){
 800425e:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <main+0x334c>)
 8004260:	791b      	ldrb	r3, [r3, #4]
 8004262:	2b41      	cmp	r3, #65	; 0x41
 8004264:	f040 83ea 	bne.w	8004a3c <main+0x39b4>
 8004268:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <main+0x334c>)
 800426a:	795b      	ldrb	r3, [r3, #5]
 800426c:	2b49      	cmp	r3, #73	; 0x49
 800426e:	f040 83e5 	bne.w	8004a3c <main+0x39b4>
					currentflag = 1;// AC - Current
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <main+0x3358>)
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e3e0      	b.n	8004a3c <main+0x39b4>
				}
				//				else if((Tempdata[4] == 'T') && (Tempdata[5] == 'C')){
				//					// Temperature
				//				}
			}
			else if(Tempdata[2] == '^'){
 800427a:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <main+0x334c>)
 800427c:	789b      	ldrb	r3, [r3, #2]
 800427e:	2b5e      	cmp	r3, #94	; 0x5e
 8004280:	f040 8293 	bne.w	80047aa <main+0x3722>
				// set output parameter

				if(Tempdata[4] == 't'){
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <main+0x334c>)
 8004286:	791b      	ldrb	r3, [r3, #4]
 8004288:	2b74      	cmp	r3, #116	; 0x74
 800428a:	d15a      	bne.n	8004342 <main+0x32ba>
					//type

					if(Tempdata[6] == 'd'){
 800428c:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <main+0x334c>)
 800428e:	799b      	ldrb	r3, [r3, #6]
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d119      	bne.n	80042c8 <main+0x3240>
						// DC - Signal type
						signal_d = 1;
 8004294:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 800429c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 80042a4:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80042ac:	2100      	movs	r1, #0
 80042ae:	484d      	ldr	r0, [pc, #308]	; (80043e4 <main+0x335c>)
 80042b0:	f003 fd40 	bl	8007d34 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80042b4:	2100      	movs	r1, #0
 80042b6:	484b      	ldr	r0, [pc, #300]	; (80043e4 <main+0x335c>)
 80042b8:	f003 fd21 	bl	8007cfe <HAL_DAC_Stop>

						Lcd_clear(&lcd);
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc fd6f 	bl	8000da4 <Lcd_clear>
 80042c6:	e26c      	b.n	80047a2 <main+0x371a>
						//						output = 1;

					}
					else if(Tempdata[6] == 's'){
 80042c8:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <main+0x334c>)
 80042ca:	799b      	ldrb	r3, [r3, #6]
 80042cc:	2b73      	cmp	r3, #115	; 0x73
 80042ce:	d119      	bne.n	8004304 <main+0x327c>
						// Sinusoidal signal type
						signal_s = 1;
 80042d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 80042d8:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 80042e0:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 80042e8:	2100      	movs	r1, #0
 80042ea:	483e      	ldr	r0, [pc, #248]	; (80043e4 <main+0x335c>)
 80042ec:	f003 fd07 	bl	8007cfe <HAL_DAC_Stop>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80042f0:	2100      	movs	r1, #0
 80042f2:	483c      	ldr	r0, [pc, #240]	; (80043e4 <main+0x335c>)
 80042f4:	f003 fd03 	bl	8007cfe <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 80042f8:	f107 031c 	add.w	r3, r7, #28
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc fd51 	bl	8000da4 <Lcd_clear>
 8004302:	e24e      	b.n	80047a2 <main+0x371a>
					}
					else if(Tempdata[6] == 'p'){
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <main+0x334c>)
 8004306:	799b      	ldrb	r3, [r3, #6]
 8004308:	2b70      	cmp	r3, #112	; 0x70
 800430a:	f040 824a 	bne.w	80047a2 <main+0x371a>
						// Pulse signal type
						signal_p = 1;
 800430e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 8004316:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 800431e:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 8004326:	2100      	movs	r1, #0
 8004328:	482e      	ldr	r0, [pc, #184]	; (80043e4 <main+0x335c>)
 800432a:	f003 fce8 	bl	8007cfe <HAL_DAC_Stop>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 800432e:	2100      	movs	r1, #0
 8004330:	482c      	ldr	r0, [pc, #176]	; (80043e4 <main+0x335c>)
 8004332:	f003 fce4 	bl	8007cfe <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 8004336:	f107 031c 	add.w	r3, r7, #28
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc fd32 	bl	8000da4 <Lcd_clear>
 8004340:	e22f      	b.n	80047a2 <main+0x371a>
					}

				}
				else if(Tempdata[4] == 'a'){
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <main+0x334c>)
 8004344:	791b      	ldrb	r3, [r3, #4]
 8004346:	2b61      	cmp	r3, #97	; 0x61
 8004348:	d14e      	bne.n	80043e8 <main+0x3360>
					// Amplitude
					amplitude_output_value[0] = Tempdata[6] - 48;
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <main+0x334c>)
 800434c:	799b      	ldrb	r3, [r3, #6]
 800434e:	3b30      	subs	r3, #48	; 0x30
 8004350:	b2da      	uxtb	r2, r3
 8004352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004356:	701a      	strb	r2, [r3, #0]
					amplitude_output_value[1] = Tempdata[7] - 48;
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <main+0x334c>)
 800435a:	79db      	ldrb	r3, [r3, #7]
 800435c:	3b30      	subs	r3, #48	; 0x30
 800435e:	b2da      	uxtb	r2, r3
 8004360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004364:	705a      	strb	r2, [r3, #1]
					amplitude_output_value[2] = Tempdata[8] - 48;
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <main+0x334c>)
 8004368:	7a1b      	ldrb	r3, [r3, #8]
 800436a:	3b30      	subs	r3, #48	; 0x30
 800436c:	b2da      	uxtb	r2, r3
 800436e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004372:	709a      	strb	r2, [r3, #2]
					amplitude_output_value[3] = Tempdata[9] - 48;
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <main+0x334c>)
 8004376:	7a5b      	ldrb	r3, [r3, #9]
 8004378:	3b30      	subs	r3, #48	; 0x30
 800437a:	b2da      	uxtb	r2, r3
 800437c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004380:	70da      	strb	r2, [r3, #3]
					//	DAC_amplitude_output = amplitude_output_value[0]*1 + amplitude_output_value[1]*0.1 + amplitude_output_value[2]*0.01 + amplitude_output_value[3]*0.001;
					DAC_amplitude_output = amplitude_output_value[0]*1000 + amplitude_output_value[1]*100 + amplitude_output_value[2]*10 + amplitude_output_value[3];
 8004382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438e:	fb03 f202 	mul.w	r2, r3, r2
 8004392:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	4619      	mov	r1, r3
 800439a:	2364      	movs	r3, #100	; 0x64
 800439c:	fb03 f301 	mul.w	r3, r3, r1
 80043a0:	441a      	add	r2, r3
 80043a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043a6:	789b      	ldrb	r3, [r3, #2]
 80043a8:	4619      	mov	r1, r3
 80043aa:	460b      	mov	r3, r1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043b8:	78d2      	ldrb	r2, [r2, #3]
 80043ba:	4413      	add	r3, r2
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c4:	edc7 7aac 	vstr	s15, [r7, #688]	; 0x2b0
 80043c8:	e1eb      	b.n	80047a2 <main+0x371a>
 80043ca:	bf00      	nop
 80043cc:	20000308 	.word	0x20000308
 80043d0:	20000310 	.word	0x20000310
 80043d4:	20000558 	.word	0x20000558
 80043d8:	20000309 	.word	0x20000309
 80043dc:	200001a0 	.word	0x200001a0
 80043e0:	200002b6 	.word	0x200002b6
 80043e4:	200000c0 	.word	0x200000c0

				}
				else if(Tempdata[4] == 'o'){
 80043e8:	4ba9      	ldr	r3, [pc, #676]	; (8004690 <main+0x3608>)
 80043ea:	791b      	ldrb	r3, [r3, #4]
 80043ec:	2b6f      	cmp	r3, #111	; 0x6f
 80043ee:	f040 808d 	bne.w	800450c <main+0x3484>
					//offset
					if(signal_d){
 80043f2:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03f      	beq.n	800447e <main+0x33f6>

						DC_offset_output_value[0] = Tempdata[6] - 48;
 80043fe:	4ba4      	ldr	r3, [pc, #656]	; (8004690 <main+0x3608>)
 8004400:	799b      	ldrb	r3, [r3, #6]
 8004402:	3b30      	subs	r3, #48	; 0x30
 8004404:	b2da      	uxtb	r2, r3
 8004406:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800440a:	701a      	strb	r2, [r3, #0]
						DC_offset_output_value[1] = Tempdata[7] - 48;
 800440c:	4ba0      	ldr	r3, [pc, #640]	; (8004690 <main+0x3608>)
 800440e:	79db      	ldrb	r3, [r3, #7]
 8004410:	3b30      	subs	r3, #48	; 0x30
 8004412:	b2da      	uxtb	r2, r3
 8004414:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004418:	705a      	strb	r2, [r3, #1]
						DC_offset_output_value[2] = Tempdata[8] - 48;
 800441a:	4b9d      	ldr	r3, [pc, #628]	; (8004690 <main+0x3608>)
 800441c:	7a1b      	ldrb	r3, [r3, #8]
 800441e:	3b30      	subs	r3, #48	; 0x30
 8004420:	b2da      	uxtb	r2, r3
 8004422:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004426:	709a      	strb	r2, [r3, #2]
						DC_offset_output_value[3] = Tempdata[9] - 48;
 8004428:	4b99      	ldr	r3, [pc, #612]	; (8004690 <main+0x3608>)
 800442a:	7a5b      	ldrb	r3, [r3, #9]
 800442c:	3b30      	subs	r3, #48	; 0x30
 800442e:	b2da      	uxtb	r2, r3
 8004430:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004434:	70da      	strb	r2, [r3, #3]
						DAC_DC_offset = DC_offset_output_value[0]*1000 + DC_offset_output_value[1]*100 + DC_offset_output_value[2]*10 + DC_offset_output_value[3];
 8004436:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	4619      	mov	r1, r3
 800444e:	2364      	movs	r3, #100	; 0x64
 8004450:	fb03 f301 	mul.w	r3, r3, r1
 8004454:	441a      	add	r2, r3
 8004456:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800445a:	789b      	ldrb	r3, [r3, #2]
 800445c:	4619      	mov	r1, r3
 800445e:	460b      	mov	r3, r1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800446c:	78d2      	ldrb	r2, [r2, #3]
 800446e:	4413      	add	r3, r2
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004478:	edc7 7aa7 	vstr	s15, [r7, #668]	; 0x29c
 800447c:	e191      	b.n	80047a2 <main+0x371a>
					}
					else if(signal_s){
 800447e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 818b 	beq.w	80047a2 <main+0x371a>

						offset_output_value[0] = Tempdata[6] - 48;
 800448c:	4b80      	ldr	r3, [pc, #512]	; (8004690 <main+0x3608>)
 800448e:	799b      	ldrb	r3, [r3, #6]
 8004490:	3b30      	subs	r3, #48	; 0x30
 8004492:	b2da      	uxtb	r2, r3
 8004494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004498:	701a      	strb	r2, [r3, #0]
						offset_output_value[1] = Tempdata[7] - 48;
 800449a:	4b7d      	ldr	r3, [pc, #500]	; (8004690 <main+0x3608>)
 800449c:	79db      	ldrb	r3, [r3, #7]
 800449e:	3b30      	subs	r3, #48	; 0x30
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044a6:	705a      	strb	r2, [r3, #1]
						offset_output_value[2] = Tempdata[8] - 48;
 80044a8:	4b79      	ldr	r3, [pc, #484]	; (8004690 <main+0x3608>)
 80044aa:	7a1b      	ldrb	r3, [r3, #8]
 80044ac:	3b30      	subs	r3, #48	; 0x30
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044b4:	709a      	strb	r2, [r3, #2]
						offset_output_value[3] = Tempdata[9] - 48;
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <main+0x3608>)
 80044b8:	7a5b      	ldrb	r3, [r3, #9]
 80044ba:	3b30      	subs	r3, #48	; 0x30
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044c2:	70da      	strb	r2, [r3, #3]
						DAC_offset_output = offset_output_value[0]*1000 + offset_output_value[1]*100 + offset_output_value[2]*10 + offset_output_value[3];
 80044c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044d0:	fb03 f202 	mul.w	r2, r3, r2
 80044d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	4619      	mov	r1, r3
 80044dc:	2364      	movs	r3, #100	; 0x64
 80044de:	fb03 f301 	mul.w	r3, r3, r1
 80044e2:	441a      	add	r2, r3
 80044e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	4619      	mov	r1, r3
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80044fa:	78d2      	ldrb	r2, [r2, #3]
 80044fc:	4413      	add	r3, r2
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004506:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
 800450a:	e14a      	b.n	80047a2 <main+0x371a>

					}

				}
				else if(Tempdata[4] == 'f'){
 800450c:	4b60      	ldr	r3, [pc, #384]	; (8004690 <main+0x3608>)
 800450e:	791b      	ldrb	r3, [r3, #4]
 8004510:	2b66      	cmp	r3, #102	; 0x66
 8004512:	d170      	bne.n	80045f6 <main+0x356e>
					// frequency
					frequency_output_value[0] = Tempdata[6] - 48;
 8004514:	4b5e      	ldr	r3, [pc, #376]	; (8004690 <main+0x3608>)
 8004516:	799b      	ldrb	r3, [r3, #6]
 8004518:	3b30      	subs	r3, #48	; 0x30
 800451a:	b2da      	uxtb	r2, r3
 800451c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004520:	701a      	strb	r2, [r3, #0]
					frequency_output_value[1] = Tempdata[7] - 48;
 8004522:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <main+0x3608>)
 8004524:	79db      	ldrb	r3, [r3, #7]
 8004526:	3b30      	subs	r3, #48	; 0x30
 8004528:	b2da      	uxtb	r2, r3
 800452a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800452e:	705a      	strb	r2, [r3, #1]
					frequency_output_value[2] = Tempdata[8] - 48;
 8004530:	4b57      	ldr	r3, [pc, #348]	; (8004690 <main+0x3608>)
 8004532:	7a1b      	ldrb	r3, [r3, #8]
 8004534:	3b30      	subs	r3, #48	; 0x30
 8004536:	b2da      	uxtb	r2, r3
 8004538:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800453c:	709a      	strb	r2, [r3, #2]
					frequency_output_value[3] = Tempdata[9] - 48;
 800453e:	4b54      	ldr	r3, [pc, #336]	; (8004690 <main+0x3608>)
 8004540:	7a5b      	ldrb	r3, [r3, #9]
 8004542:	3b30      	subs	r3, #48	; 0x30
 8004544:	b2da      	uxtb	r2, r3
 8004546:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800454a:	70da      	strb	r2, [r3, #3]
					DAC_frequency_output = frequency_output_value[0]*1000 + frequency_output_value[1]*100 + frequency_output_value[2]*10 + frequency_output_value[3];
 800454c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	0152      	lsls	r2, r2, #5
 8004558:	1ad2      	subs	r2, r2, r3
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	b29a      	uxth	r2, r3
 8004562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	b29b      	uxth	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	0089      	lsls	r1, r1, #2
 800456e:	440b      	add	r3, r1
 8004570:	4619      	mov	r1, r3
 8004572:	0088      	lsls	r0, r1, #2
 8004574:	4619      	mov	r1, r3
 8004576:	4603      	mov	r3, r0
 8004578:	440b      	add	r3, r1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	b29b      	uxth	r3, r3
 800457e:	4413      	add	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004586:	789b      	ldrb	r3, [r3, #2]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	0089      	lsls	r1, r1, #2
 800458e:	440b      	add	r3, r1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	4413      	add	r3, r2
 8004596:	b29a      	uxth	r2, r3
 8004598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2
					//					TIM2->EGR = ((TIM2->EGR)|0b01);
					TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
 80045a6:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 80045aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ffbe 	bl	8000534 <__aeabi_i2d>
 80045b8:	4603      	mov	r3, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	a131      	add	r1, pc, #196	; (adr r1, 8004688 <main+0x3600>)
 80045c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045c6:	f7fc f949 	bl	800085c <__aeabi_ddiv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <main+0x360c>)
 80045d8:	f7fb fe5e 	bl	8000298 <__aeabi_dsub>
 80045dc:	4603      	mov	r3, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	461a      	mov	r2, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fc face 	bl	8000b8c <__aeabi_d2uiz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045f4:	e0d5      	b.n	80047a2 <main+0x371a>
				}
				//				else if(Tempdata[4] == 'd'){
				//					//Duty Cycle
				//				}
				else if (signal_p){
 80045f6:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80cf 	beq.w	80047a2 <main+0x371a>
					if(Tempdata[4] == 100){	 //d
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <main+0x3608>)
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	2b64      	cmp	r3, #100	; 0x64
 800460a:	d149      	bne.n	80046a0 <main+0x3618>
						//Duty Cycle
						DutyCycleinput[0] = Tempdata[6] - 48;
 800460c:	4b20      	ldr	r3, [pc, #128]	; (8004690 <main+0x3608>)
 800460e:	799b      	ldrb	r3, [r3, #6]
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b30      	subs	r3, #48	; 0x30
 8004614:	b29a      	uxth	r2, r3
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <main+0x3610>)
 8004618:	801a      	strh	r2, [r3, #0]
						DutyCycleinput[1] = Tempdata[7] - 48;
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <main+0x3608>)
 800461c:	79db      	ldrb	r3, [r3, #7]
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b30      	subs	r3, #48	; 0x30
 8004622:	b29a      	uxth	r2, r3
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <main+0x3610>)
 8004626:	805a      	strh	r2, [r3, #2]
						DutyCycleinput[2] = Tempdata[8] - 48;
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <main+0x3608>)
 800462a:	7a1b      	ldrb	r3, [r3, #8]
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b30      	subs	r3, #48	; 0x30
 8004630:	b29a      	uxth	r2, r3
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <main+0x3610>)
 8004634:	809a      	strh	r2, [r3, #4]
						DutyCycleinput[3] = Tempdata[9] - 48;
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <main+0x3608>)
 8004638:	7a5b      	ldrb	r3, [r3, #9]
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b30      	subs	r3, #48	; 0x30
 800463e:	b29a      	uxth	r2, r3
 8004640:	4b15      	ldr	r3, [pc, #84]	; (8004698 <main+0x3610>)
 8004642:	80da      	strh	r2, [r3, #6]
						DutyCycle = DutyCycleinput[0]*1000 + DutyCycleinput[1]*100 + DutyCycleinput[2]*10 + DutyCycleinput[3];
 8004644:	4b14      	ldr	r3, [pc, #80]	; (8004698 <main+0x3610>)
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464e:	fb03 f202 	mul.w	r2, r3, r2
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <main+0x3610>)
 8004654:	885b      	ldrh	r3, [r3, #2]
 8004656:	4619      	mov	r1, r3
 8004658:	2364      	movs	r3, #100	; 0x64
 800465a:	fb03 f301 	mul.w	r3, r3, r1
 800465e:	441a      	add	r2, r3
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <main+0x3610>)
 8004662:	889b      	ldrh	r3, [r3, #4]
 8004664:	4619      	mov	r1, r3
 8004666:	460b      	mov	r3, r1
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <main+0x3610>)
 8004672:	88d2      	ldrh	r2, [r2, #6]
 8004674:	4413      	add	r3, r2
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <main+0x3614>)
 8004680:	edc3 7a00 	vstr	s15, [r3]
 8004684:	e08d      	b.n	80047a2 <main+0x371a>
 8004686:	bf00      	nop
 8004688:	00000000 	.word	0x00000000
 800468c:	41912a88 	.word	0x41912a88
 8004690:	20000558 	.word	0x20000558
 8004694:	3ff00000 	.word	0x3ff00000
 8004698:	200000d8 	.word	0x200000d8
 800469c:	20000010 	.word	0x20000010
					}
					else if (Tempdata[4] == 'a'){
 80046a0:	4bbf      	ldr	r3, [pc, #764]	; (80049a0 <main+0x3918>)
 80046a2:	791b      	ldrb	r3, [r3, #4]
 80046a4:	2b61      	cmp	r3, #97	; 0x61
 80046a6:	d13c      	bne.n	8004722 <main+0x369a>
						//Amplitude_pulse
						Amplitude_pulseinput[0] = Tempdata[6] - 48;
 80046a8:	4bbd      	ldr	r3, [pc, #756]	; (80049a0 <main+0x3918>)
 80046aa:	799b      	ldrb	r3, [r3, #6]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b30      	subs	r3, #48	; 0x30
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	4bbc      	ldr	r3, [pc, #752]	; (80049a4 <main+0x391c>)
 80046b4:	801a      	strh	r2, [r3, #0]
						Amplitude_pulseinput[1] = Tempdata[7] - 48;
 80046b6:	4bba      	ldr	r3, [pc, #744]	; (80049a0 <main+0x3918>)
 80046b8:	79db      	ldrb	r3, [r3, #7]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b30      	subs	r3, #48	; 0x30
 80046be:	b29a      	uxth	r2, r3
 80046c0:	4bb8      	ldr	r3, [pc, #736]	; (80049a4 <main+0x391c>)
 80046c2:	805a      	strh	r2, [r3, #2]
						Amplitude_pulseinput[2] = Tempdata[8] - 48;
 80046c4:	4bb6      	ldr	r3, [pc, #728]	; (80049a0 <main+0x3918>)
 80046c6:	7a1b      	ldrb	r3, [r3, #8]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b30      	subs	r3, #48	; 0x30
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	4bb5      	ldr	r3, [pc, #724]	; (80049a4 <main+0x391c>)
 80046d0:	809a      	strh	r2, [r3, #4]
						Amplitude_pulseinput[3] = Tempdata[9] - 48;
 80046d2:	4bb3      	ldr	r3, [pc, #716]	; (80049a0 <main+0x3918>)
 80046d4:	7a5b      	ldrb	r3, [r3, #9]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b30      	subs	r3, #48	; 0x30
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4bb1      	ldr	r3, [pc, #708]	; (80049a4 <main+0x391c>)
 80046de:	80da      	strh	r2, [r3, #6]
						Amplitude_pulse = Amplitude_pulseinput[0]*1000 + Amplitude_pulseinput[1]*100 + Amplitude_pulseinput[2]*10 + Amplitude_pulseinput[3];
 80046e0:	4bb0      	ldr	r3, [pc, #704]	; (80049a4 <main+0x391c>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ea:	fb03 f202 	mul.w	r2, r3, r2
 80046ee:	4bad      	ldr	r3, [pc, #692]	; (80049a4 <main+0x391c>)
 80046f0:	885b      	ldrh	r3, [r3, #2]
 80046f2:	4619      	mov	r1, r3
 80046f4:	2364      	movs	r3, #100	; 0x64
 80046f6:	fb03 f301 	mul.w	r3, r3, r1
 80046fa:	441a      	add	r2, r3
 80046fc:	4ba9      	ldr	r3, [pc, #676]	; (80049a4 <main+0x391c>)
 80046fe:	889b      	ldrh	r3, [r3, #4]
 8004700:	4619      	mov	r1, r3
 8004702:	460b      	mov	r3, r1
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	4aa5      	ldr	r2, [pc, #660]	; (80049a4 <main+0x391c>)
 800470e:	88d2      	ldrh	r2, [r2, #6]
 8004710:	4413      	add	r3, r2
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471a:	4ba3      	ldr	r3, [pc, #652]	; (80049a8 <main+0x3920>)
 800471c:	edc3 7a00 	vstr	s15, [r3]
 8004720:	e03f      	b.n	80047a2 <main+0x371a>
					}
					else if (Tempdata[4] == 'o') {
 8004722:	4b9f      	ldr	r3, [pc, #636]	; (80049a0 <main+0x3918>)
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b6f      	cmp	r3, #111	; 0x6f
 8004728:	d13b      	bne.n	80047a2 <main+0x371a>
						//Offset_pulse
						Offset_pulseinput[0] = Tempdata[6] - 48;
 800472a:	4b9d      	ldr	r3, [pc, #628]	; (80049a0 <main+0x3918>)
 800472c:	799b      	ldrb	r3, [r3, #6]
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b30      	subs	r3, #48	; 0x30
 8004732:	b29a      	uxth	r2, r3
 8004734:	4b9d      	ldr	r3, [pc, #628]	; (80049ac <main+0x3924>)
 8004736:	801a      	strh	r2, [r3, #0]
						Offset_pulseinput[1] = Tempdata[7] - 48;
 8004738:	4b99      	ldr	r3, [pc, #612]	; (80049a0 <main+0x3918>)
 800473a:	79db      	ldrb	r3, [r3, #7]
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b30      	subs	r3, #48	; 0x30
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b9a      	ldr	r3, [pc, #616]	; (80049ac <main+0x3924>)
 8004744:	805a      	strh	r2, [r3, #2]
						Offset_pulseinput[2] = Tempdata[8] - 48;
 8004746:	4b96      	ldr	r3, [pc, #600]	; (80049a0 <main+0x3918>)
 8004748:	7a1b      	ldrb	r3, [r3, #8]
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b30      	subs	r3, #48	; 0x30
 800474e:	b29a      	uxth	r2, r3
 8004750:	4b96      	ldr	r3, [pc, #600]	; (80049ac <main+0x3924>)
 8004752:	809a      	strh	r2, [r3, #4]
						Offset_pulseinput[3] = Tempdata[9] - 48;
 8004754:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <main+0x3918>)
 8004756:	7a5b      	ldrb	r3, [r3, #9]
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b30      	subs	r3, #48	; 0x30
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b93      	ldr	r3, [pc, #588]	; (80049ac <main+0x3924>)
 8004760:	80da      	strh	r2, [r3, #6]
						Offset_pulse = Offset_pulseinput[0]*1000 + Offset_pulseinput[1]*100 + Offset_pulseinput[2]*10 + Offset_pulseinput[3];
 8004762:	4b92      	ldr	r3, [pc, #584]	; (80049ac <main+0x3924>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800476c:	fb03 f202 	mul.w	r2, r3, r2
 8004770:	4b8e      	ldr	r3, [pc, #568]	; (80049ac <main+0x3924>)
 8004772:	885b      	ldrh	r3, [r3, #2]
 8004774:	4619      	mov	r1, r3
 8004776:	2364      	movs	r3, #100	; 0x64
 8004778:	fb03 f301 	mul.w	r3, r3, r1
 800477c:	441a      	add	r2, r3
 800477e:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <main+0x3924>)
 8004780:	889b      	ldrh	r3, [r3, #4]
 8004782:	4619      	mov	r1, r3
 8004784:	460b      	mov	r3, r1
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	4a87      	ldr	r2, [pc, #540]	; (80049ac <main+0x3924>)
 8004790:	88d2      	ldrh	r2, [r2, #6]
 8004792:	4413      	add	r3, r2
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479c:	4b84      	ldr	r3, [pc, #528]	; (80049b0 <main+0x3928>)
 800479e:	edc3 7a00 	vstr	s15, [r3]

					}
				}

				flag = 0;
 80047a2:	4b84      	ldr	r3, [pc, #528]	; (80049b4 <main+0x392c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e148      	b.n	8004a3c <main+0x39b4>
			}


			else if(Tempdata[2] == 42){
 80047aa:	4b7d      	ldr	r3, [pc, #500]	; (80049a0 <main+0x3918>)
 80047ac:	789b      	ldrb	r3, [r3, #2]
 80047ae:	2b2a      	cmp	r3, #42	; 0x2a
 80047b0:	f040 8144 	bne.w	8004a3c <main+0x39b4>
				if(Tempdata[4] == 115){
 80047b4:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <main+0x3918>)
 80047b6:	791b      	ldrb	r3, [r3, #4]
 80047b8:	2b73      	cmp	r3, #115	; 0x73
 80047ba:	f040 8091 	bne.w	80048e0 <main+0x3858>
					//request status
					send_status[0] = 64;
 80047be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	701a      	strb	r2, [r3, #0]
					send_status[1] = 44;
 80047c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047ca:	222c      	movs	r2, #44	; 0x2c
 80047cc:	705a      	strb	r2, [r3, #1]
					if(DC_measure){
 80047ce:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <main+0x3770>

						send_status[2] = 68;
 80047d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047da:	2244      	movs	r2, #68	; 0x44
 80047dc:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86;
 80047de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047e2:	2256      	movs	r2, #86	; 0x56
 80047e4:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44;
 80047e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047ea:	222c      	movs	r2, #44	; 0x2c
 80047ec:	711a      	strb	r2, [r3, #4]
						send_status[5] = 100;
 80047ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047f2:	2264      	movs	r2, #100	; 0x64
 80047f4:	715a      	strb	r2, [r3, #5]
 80047f6:	e013      	b.n	8004820 <main+0x3798>
					}
					else if(AC_measure){
 80047f8:	f8b7 32ca 	ldrh.w	r3, [r7, #714]	; 0x2ca
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <main+0x3798>
						send_status[2] = 65;
 8004800:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004804:	2241      	movs	r2, #65	; 0x41
 8004806:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86;
 8004808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800480c:	2256      	movs	r2, #86	; 0x56
 800480e:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44;
 8004810:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004814:	222c      	movs	r2, #44	; 0x2c
 8004816:	711a      	strb	r2, [r3, #4]
						send_status[5] = 115;
 8004818:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800481c:	2273      	movs	r2, #115	; 0x73
 800481e:	715a      	strb	r2, [r3, #5]

					}

					if(signal_s){
 8004820:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <main+0x37ae>

						send_status[5] = 115;
 800482c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004830:	2273      	movs	r2, #115	; 0x73
 8004832:	715a      	strb	r2, [r3, #5]
 8004834:	e009      	b.n	800484a <main+0x37c2>

					}
					else if(signal_d){
 8004836:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <main+0x37c2>

						send_status[5] = 100;
 8004842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004846:	2264      	movs	r2, #100	; 0x64
 8004848:	715a      	strb	r2, [r3, #5]
					}
					send_status[6] = 44; //,
 800484a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800484e:	222c      	movs	r2, #44	; 0x2c
 8004850:	719a      	strb	r2, [r3, #6]
					if(Tempdata[6] == 48){ //0
 8004852:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <main+0x3918>)
 8004854:	799b      	ldrb	r3, [r3, #6]
 8004856:	2b30      	cmp	r3, #48	; 0x30
 8004858:	d104      	bne.n	8004864 <main+0x37dc>
						send_status[7] = 48; //0
 800485a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800485e:	2230      	movs	r2, #48	; 0x30
 8004860:	71da      	strb	r2, [r3, #7]
 8004862:	e007      	b.n	8004874 <main+0x37ec>
					}
					else if(Tempdata[6] == 49){ //1
 8004864:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <main+0x3918>)
 8004866:	799b      	ldrb	r3, [r3, #6]
 8004868:	2b31      	cmp	r3, #49	; 0x31
 800486a:	d103      	bne.n	8004874 <main+0x37ec>
						send_status[7] = 49; //1
 800486c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004870:	2231      	movs	r2, #49	; 0x31
 8004872:	71da      	strb	r2, [r3, #7]
					//					}
					//					else if(Tempdata[6] == 49){
					//						send_status[7] = 49;
					//					}

					send_status[8] = 44;
 8004874:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004878:	222c      	movs	r2, #44	; 0x2c
 800487a:	721a      	strb	r2, [r3, #8]
					send_status[9] = 33;
 800487c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004880:	2221      	movs	r2, #33	; 0x21
 8004882:	725a      	strb	r2, [r3, #9]
					send_status[10] = 10;
 8004884:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004888:	220a      	movs	r2, #10
 800488a:	729a      	strb	r2, [r3, #10]

					HAL_UART_Transmit(&huart2, send_status, 11, 50);
 800488c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004890:	2332      	movs	r3, #50	; 0x32
 8004892:	220b      	movs	r2, #11
 8004894:	4848      	ldr	r0, [pc, #288]	; (80049b8 <main+0x3930>)
 8004896:	f006 ff0b 	bl	800b6b0 <HAL_UART_Transmit>



					if(Tempdata[6] == 48){
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <main+0x3918>)
 800489c:	799b      	ldrb	r3, [r3, #6]
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d10a      	bne.n	80048b8 <main+0x3830>
						//output off
						output = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
						//stop AC DAC
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80048a8:	2100      	movs	r1, #0
 80048aa:	4844      	ldr	r0, [pc, #272]	; (80049bc <main+0x3934>)
 80048ac:	f003 fa42 	bl	8007d34 <HAL_DAC_Stop_DMA>
						// stop DC DAC
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 80048b0:	2100      	movs	r1, #0
 80048b2:	4842      	ldr	r0, [pc, #264]	; (80049bc <main+0x3934>)
 80048b4:	f003 fa23 	bl	8007cfe <HAL_DAC_Stop>
					}
					if(Tempdata[6] == 49){
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <main+0x3918>)
 80048ba:	799b      	ldrb	r3, [r3, #6]
 80048bc:	2b31      	cmp	r3, #49	; 0x31
 80048be:	f040 80ba 	bne.w	8004a36 <main+0x39ae>
						// output on
						output = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
						Lcd_clear(&lcd);
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fc fa69 	bl	8000da4 <Lcd_clear>
						menu_mode = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
						measurment_mode =0;
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
 80048de:	e0aa      	b.n	8004a36 <main+0x39ae>
					}
				}
				else if(Tempdata[4] == 109){
 80048e0:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <main+0x3918>)
 80048e2:	791b      	ldrb	r3, [r3, #4]
 80048e4:	2b6d      	cmp	r3, #109	; 0x6d
 80048e6:	f040 80a6 	bne.w	8004a36 <main+0x39ae>
					// request measurement

					send_measurment = 1;
 80048ea:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <main+0x3938>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]

					if(Tempdata[6] == 116){
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <main+0x3918>)
 80048f2:	799b      	ldrb	r3, [r3, #6]
 80048f4:	2b74      	cmp	r3, #116	; 0x74
 80048f6:	d118      	bne.n	800492a <main+0x38a2>
						//type
						parameter_t = 1;
 80048f8:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004900:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004908:	f107 0362 	add.w	r3, r7, #98	; 0x62
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004910:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 8004918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004920:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e085      	b.n	8004a36 <main+0x39ae>

					}
					else if(Tempdata[6] == 97){
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <main+0x3918>)
 800492c:	799b      	ldrb	r3, [r3, #6]
 800492e:	2b61      	cmp	r3, #97	; 0x61
 8004930:	d118      	bne.n	8004964 <main+0x38dc>
						// Amplitude
						parameter_a = 1;
 8004932:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 800493a:	f107 0362 	add.w	r3, r7, #98	; 0x62
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004942:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 800494a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004952:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 800495a:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e068      	b.n	8004a36 <main+0x39ae>
					}
					else if(Tempdata[6] == 111){
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <main+0x3918>)
 8004966:	799b      	ldrb	r3, [r3, #6]
 8004968:	2b6f      	cmp	r3, #111	; 0x6f
 800496a:	d12b      	bne.n	80049c4 <main+0x393c>
						//offset
						parameter_o = 1;
 800496c:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004974:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 800497c:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004984:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 800498c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004994:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e04b      	b.n	8004a36 <main+0x39ae>
 800499e:	bf00      	nop
 80049a0:	20000558 	.word	0x20000558
 80049a4:	20001594 	.word	0x20001594
 80049a8:	20000014 	.word	0x20000014
 80049ac:	200001a4 	.word	0x200001a4
 80049b0:	20000018 	.word	0x20000018
 80049b4:	200001a0 	.word	0x200001a0
 80049b8:	2000150c 	.word	0x2000150c
 80049bc:	200000c0 	.word	0x200000c0
 80049c0:	2000165c 	.word	0x2000165c
					}
					else if(Tempdata[6] == 102){
 80049c4:	4bda      	ldr	r3, [pc, #872]	; (8004d30 <main+0x3ca8>)
 80049c6:	799b      	ldrb	r3, [r3, #6]
 80049c8:	2b66      	cmp	r3, #102	; 0x66
 80049ca:	d118      	bne.n	80049fe <main+0x3976>
						// frequency
						parameter_f = 1;
 80049cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 80049d4:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 80049dc:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 80049e4:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 80049ec:	f107 0365 	add.w	r3, r7, #101	; 0x65
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 80049f4:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e01b      	b.n	8004a36 <main+0x39ae>
					}
					else if(Tempdata[6] == 100){
 80049fe:	4bcc      	ldr	r3, [pc, #816]	; (8004d30 <main+0x3ca8>)
 8004a00:	799b      	ldrb	r3, [r3, #6]
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d117      	bne.n	8004a36 <main+0x39ae>
						//Duty Cycle
						parameter_d = 1;
 8004a06:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004a0e:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004a16:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 8004a1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004a26:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004a2e:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
					}


				}
				flag = 0;
 8004a36:	4bbf      	ldr	r3, [pc, #764]	; (8004d34 <main+0x3cac>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
			}

		}
		// Handles DC and AC measurements based on timer interrupt//////////////
		if(DC_measure && timer_interrupt && measurment_mode){
 8004a3c:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80e0 	beq.w	8004c06 <main+0x3b7e>
 8004a46:	4bbc      	ldr	r3, [pc, #752]	; (8004d38 <main+0x3cb0>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80db 	beq.w	8004c06 <main+0x3b7e>
 8004a50:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d6 	beq.w	8004c06 <main+0x3b7e>

			if(DCidx > 99){
 8004a5a:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 8004a5e:	2b63      	cmp	r3, #99	; 0x63
 8004a60:	f240 80a6 	bls.w	8004bb0 <main+0x3b28>

				for(uint8_t c = 0; c<100;c++){
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3293 	strb.w	r3, [r7, #659]	; 0x293
 8004a6a:	e010      	b.n	8004a8e <main+0x3a06>
					DC_CS = DC_CS + DC_value[c];
 8004a6c:	f897 2293 	ldrb.w	r2, [r7, #659]	; 0x293
 8004a70:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004a74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004a7e:	4413      	add	r3, r2
 8004a80:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
				for(uint8_t c = 0; c<100;c++){
 8004a84:	f897 3293 	ldrb.w	r3, [r7, #659]	; 0x293
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f887 3293 	strb.w	r3, [r7, #659]	; 0x293
 8004a8e:	f897 3293 	ldrb.w	r3, [r7, #659]	; 0x293
 8004a92:	2b63      	cmp	r3, #99	; 0x63
 8004a94:	d9ea      	bls.n	8004a6c <main+0x39e4>
				}

				DC_avg = DC_CS/100;
 8004a96:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004a9a:	4aa8      	ldr	r2, [pc, #672]	; (8004d3c <main+0x3cb4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f8a7 3276 	strh.w	r3, [r7, #630]	; 0x276

				DC_CS = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
				DCidx = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc


				scaled_dc_avg = (DC_avg*3300)/(3720); //scaling
 8004ab2:	f8b7 3276 	ldrh.w	r3, [r7, #630]	; 0x276
 8004ab6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	4aa0      	ldr	r2, [pc, #640]	; (8004d40 <main+0x3cb8>)
 8004ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ac4:	11d2      	asrs	r2, r2, #7
 8004ac6:	17db      	asrs	r3, r3, #31
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f8a7 3274 	strh.w	r3, [r7, #628]	; 0x274


				//// ASSIGN values to uart array but dont send /////
				DC_disp_offset[0] = 0x40;
 8004ace:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ad2:	2240      	movs	r2, #64	; 0x40
 8004ad4:	701a      	strb	r2, [r3, #0]
				DC_disp_offset[1] = 44;
 8004ad6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ada:	222c      	movs	r2, #44	; 0x2c
 8004adc:	705a      	strb	r2, [r3, #1]
				DC_disp_offset[2] = 109;
 8004ade:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ae2:	226d      	movs	r2, #109	; 0x6d
 8004ae4:	709a      	strb	r2, [r3, #2]
				DC_disp_offset[3] = 44;
 8004ae6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004aea:	222c      	movs	r2, #44	; 0x2c
 8004aec:	70da      	strb	r2, [r3, #3]
				DC_disp_offset[4] = 111;//o
 8004aee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004af2:	226f      	movs	r2, #111	; 0x6f
 8004af4:	711a      	strb	r2, [r3, #4]
				DC_disp_offset[5] = 44;//,
 8004af6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004afa:	222c      	movs	r2, #44	; 0x2c
 8004afc:	715a      	strb	r2, [r3, #5]
				DC_disp_offset[6] = (scaled_dc_avg/1000) + 48;
 8004afe:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004b02:	4a90      	ldr	r2, [pc, #576]	; (8004d44 <main+0x3cbc>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	3330      	adds	r3, #48	; 0x30
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b16:	719a      	strb	r2, [r3, #6]
				DC_disp_offset[7] = (scaled_dc_avg/100) % 10 + 48;
 8004b18:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004b1c:	4a87      	ldr	r2, [pc, #540]	; (8004d3c <main+0x3cb4>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <main+0x3cc0>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	08d9      	lsrs	r1, r3, #3
 8004b2e:	460b      	mov	r3, r1
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3330      	adds	r3, #48	; 0x30
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b44:	71da      	strb	r2, [r3, #7]
				DC_disp_offset[8] = (scaled_dc_avg/10) % 10 + 48;
 8004b46:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004b4a:	4a7f      	ldr	r2, [pc, #508]	; (8004d48 <main+0x3cc0>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	4b7c      	ldr	r3, [pc, #496]	; (8004d48 <main+0x3cc0>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	08d9      	lsrs	r1, r3, #3
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3330      	adds	r3, #48	; 0x30
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b72:	721a      	strb	r2, [r3, #8]
				DC_disp_offset[9] = (scaled_dc_avg/1) % 10 + 48;
 8004b74:	f8b7 2274 	ldrh.w	r2, [r7, #628]	; 0x274
 8004b78:	4b73      	ldr	r3, [pc, #460]	; (8004d48 <main+0x3cc0>)
 8004b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7e:	08d9      	lsrs	r1, r3, #3
 8004b80:	460b      	mov	r3, r1
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3330      	adds	r3, #48	; 0x30
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b96:	725a      	strb	r2, [r3, #9]
				DC_disp_offset[10] = 44;//,
 8004b98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b9c:	222c      	movs	r2, #44	; 0x2c
 8004b9e:	729a      	strb	r2, [r3, #10]
				DC_disp_offset[11] = 33;//!
 8004ba0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ba4:	2221      	movs	r2, #33	; 0x21
 8004ba6:	72da      	strb	r2, [r3, #11]
				DC_disp_offset[12] = 10;//\n
 8004ba8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bac:	220a      	movs	r2, #10
 8004bae:	731a      	strb	r2, [r3, #12]
				//				Lcd_string(&lcd, "V");


			}

			if(send_measurment == 1){
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <main+0x3cc4>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d109      	bne.n	8004bcc <main+0x3b44>
				HAL_UART_Transmit(&huart2, DC_disp_offset, 13, 50);
 8004bb8:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004bbc:	2332      	movs	r3, #50	; 0x32
 8004bbe:	220d      	movs	r2, #13
 8004bc0:	4863      	ldr	r0, [pc, #396]	; (8004d50 <main+0x3cc8>)
 8004bc2:	f006 fd75 	bl	800b6b0 <HAL_UART_Transmit>
				send_measurment = 0;
 8004bc6:	4b61      	ldr	r3, [pc, #388]	; (8004d4c <main+0x3cc4>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]

			}
			HAL_ADC_Start(&hadc3);
 8004bcc:	4861      	ldr	r0, [pc, #388]	; (8004d54 <main+0x3ccc>)
 8004bce:	f001 fc77 	bl	80064c0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 8004bd2:	2114      	movs	r1, #20
 8004bd4:	485f      	ldr	r0, [pc, #380]	; (8004d54 <main+0x3ccc>)
 8004bd6:	f001 fdbf 	bl	8006758 <HAL_ADC_PollForConversion>
			DC_value[DCidx] = HAL_ADC_GetValue(&hadc3);
 8004bda:	485e      	ldr	r0, [pc, #376]	; (8004d54 <main+0x3ccc>)
 8004bdc:	f001 febe 	bl	800695c <HAL_ADC_GetValue>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f897 22cc 	ldrb.w	r2, [r7, #716]	; 0x2cc
 8004be6:	b299      	uxth	r1, r3
 8004be8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004bec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8004bf0:	4858      	ldr	r0, [pc, #352]	; (8004d54 <main+0x3ccc>)
 8004bf2:	f001 fd7b 	bl	80066ec <HAL_ADC_Stop>
			DCidx ++ ;
 8004bf6:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc
			timer_interrupt = 0;
 8004c00:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <main+0x3cb0>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]

		}

		if(AC_measure && timer_interrupt && measurment_mode){
 8004c06:	f8b7 32ca 	ldrh.w	r3, [r7, #714]	; 0x2ca
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 82c7 	beq.w	800519e <main+0x4116>
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <main+0x3cb0>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 82c2 	beq.w	800519e <main+0x4116>
 8004c1a:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 82bd 	beq.w	800519e <main+0x4116>

			if(ACidx > 99){//??1000
 8004c24:	f8b7 32c8 	ldrh.w	r3, [r7, #712]	; 0x2c8
 8004c28:	2b63      	cmp	r3, #99	; 0x63
 8004c2a:	f240 824c 	bls.w	80050c6 <main+0x403e>

				for(uint8_t c = 0; c<100;c++){
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3292 	strb.w	r3, [r7, #658]	; 0x292
 8004c34:	e010      	b.n	8004c58 <main+0x3bd0>
					AC_CS = AC_CS + AC_value[c];
 8004c36:	f897 2292 	ldrb.w	r2, [r7, #658]	; 0x292
 8004c3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004c48:	4413      	add	r3, r2
 8004c4a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
				for(uint8_t c = 0; c<100;c++){
 8004c4e:	f897 3292 	ldrb.w	r3, [r7, #658]	; 0x292
 8004c52:	3301      	adds	r3, #1
 8004c54:	f887 3292 	strb.w	r3, [r7, #658]	; 0x292
 8004c58:	f897 3292 	ldrb.w	r3, [r7, #658]	; 0x292
 8004c5c:	2b63      	cmp	r3, #99	; 0x63
 8004c5e:	d9ea      	bls.n	8004c36 <main+0x3bae>
				}
				AC_avg = (AC_CS/100)*0.90;
 8004c60:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <main+0x3cb4>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fc51 	bl	8000514 <__aeabi_ui2d>
 8004c72:	a32b      	add	r3, pc, #172	; (adr r3, 8004d20 <main+0x3c98>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fcc6 	bl	8000608 <__aeabi_dmul>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4618      	mov	r0, r3
 8004c82:	4621      	mov	r1, r4
 8004c84:	f7fb ff82 	bl	8000b8c <__aeabi_d2uiz>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
				AC_CS = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
				ACidx = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8a7 32c8 	strh.w	r3, [r7, #712]	; 0x2c8
				for( uint8_t q = 0; q < 99; q ++){
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
 8004ca0:	e01c      	b.n	8004cdc <main+0x3c54>
					if(AC_value[q+1] > AC_value[q]){
 8004ca2:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004cac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004cb0:	f897 1291 	ldrb.w	r1, [r7, #657]	; 0x291
 8004cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004cb8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d908      	bls.n	8004cd2 <main+0x3c4a>
						AC_max = AC_value[q+1];
 8004cc0:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004cca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004cce:	f8a7 32be 	strh.w	r3, [r7, #702]	; 0x2be
				for( uint8_t q = 0; q < 99; q ++){
 8004cd2:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
 8004cdc:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8004ce0:	2b62      	cmp	r3, #98	; 0x62
 8004ce2:	d9de      	bls.n	8004ca2 <main+0x3c1a>
					}
				}
				AC_pk_pk = 2*(AC_max - AC_avg) *0.70;//scaling
 8004ce4:	f8b7 22be 	ldrh.w	r2, [r7, #702]	; 0x2be
 8004ce8:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fc1f 	bl	8000534 <__aeabi_i2d>
 8004cf6:	a30c      	add	r3, pc, #48	; (adr r3, 8004d28 <main+0x3ca0>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fc84 	bl	8000608 <__aeabi_dmul>
 8004d00:	4603      	mov	r3, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	4618      	mov	r0, r3
 8004d06:	4621      	mov	r1, r4
 8004d08:	f7fb ff40 	bl	8000b8c <__aeabi_d2uiz>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270

				for(uint8_t s = 0; s < 99; s++){
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3290 	strb.w	r3, [r7, #656]	; 0x290
 8004d18:	e071      	b.n	8004dfe <main+0x3d76>
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w
 8004d20:	cccccccd 	.word	0xcccccccd
 8004d24:	3feccccc 	.word	0x3feccccc
 8004d28:	66666666 	.word	0x66666666
 8004d2c:	3fe66666 	.word	0x3fe66666
 8004d30:	20000558 	.word	0x20000558
 8004d34:	200001a0 	.word	0x200001a0
 8004d38:	2000166d 	.word	0x2000166d
 8004d3c:	51eb851f 	.word	0x51eb851f
 8004d40:	08cf008d 	.word	0x08cf008d
 8004d44:	10624dd3 	.word	0x10624dd3
 8004d48:	cccccccd 	.word	0xcccccccd
 8004d4c:	2000165c 	.word	0x2000165c
 8004d50:	2000150c 	.word	0x2000150c
 8004d54:	200002b8 	.word	0x200002b8
					if ((AC_value[s+1] > AC_avg) && (AC_value[s] < AC_avg)){
 8004d58:	f897 3290 	ldrb.w	r3, [r7, #656]	; 0x290
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d66:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d242      	bcs.n	8004df4 <main+0x3d6c>
 8004d6e:	f897 2290 	ldrb.w	r2, [r7, #656]	; 0x290
 8004d72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d7a:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d938      	bls.n	8004df4 <main+0x3d6c>

						if(count == 0){
 8004d82:	f897 32b6 	ldrb.w	r3, [r7, #694]	; 0x2b6
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <main+0x3d12>
							f1 = s;
 8004d8a:	f897 3290 	ldrb.w	r3, [r7, #656]	; 0x290
 8004d8e:	f8a7 32b4 	strh.w	r3, [r7, #692]	; 0x2b4
							count = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 32b6 	strb.w	r3, [r7, #694]	; 0x2b6
 8004d98:	e02c      	b.n	8004df4 <main+0x3d6c>
						}
						else if (count == 1){
 8004d9a:	f897 32b6 	ldrb.w	r3, [r7, #694]	; 0x2b6
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d128      	bne.n	8004df4 <main+0x3d6c>
							f2 = s;
 8004da2:	f897 3290 	ldrb.w	r3, [r7, #656]	; 0x290
 8004da6:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288
							count = 2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	f887 32b6 	strb.w	r3, [r7, #694]	; 0x2b6
							AC_freq = 1/((f2-f1)*0.0001);
 8004db0:	f8b7 2288 	ldrh.w	r2, [r7, #648]	; 0x288
 8004db4:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fbba 	bl	8000534 <__aeabi_i2d>
 8004dc0:	a3e1      	add	r3, pc, #900	; (adr r3, 8005148 <main+0x40c0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fc1f 	bl	8000608 <__aeabi_dmul>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	49d6      	ldr	r1, [pc, #856]	; (8005130 <main+0x40a8>)
 8004dd8:	f7fb fd40 	bl	800085c <__aeabi_ddiv>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	4618      	mov	r0, r3
 8004de2:	4621      	mov	r1, r4
 8004de4:	f7fb fed2 	bl	8000b8c <__aeabi_d2uiz>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
							count = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 32b6 	strb.w	r3, [r7, #694]	; 0x2b6
				for(uint8_t s = 0; s < 99; s++){
 8004df4:	f897 3290 	ldrb.w	r3, [r7, #656]	; 0x290
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f887 3290 	strb.w	r3, [r7, #656]	; 0x290
 8004dfe:	f897 3290 	ldrb.w	r3, [r7, #656]	; 0x290
 8004e02:	2b62      	cmp	r3, #98	; 0x62
 8004e04:	d9a8      	bls.n	8004d58 <main+0x3cd0>

				////////Assign values to UART array but not sending them//////

				//// AMPLITUDE/////

				AC_disp_pk_pk[0] = 64;//@
 8004e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	701a      	strb	r2, [r3, #0]
				AC_disp_pk_pk[1] = 44;//,
 8004e0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e12:	222c      	movs	r2, #44	; 0x2c
 8004e14:	705a      	strb	r2, [r3, #1]
				AC_disp_pk_pk[2] = 109;//m
 8004e16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e1a:	226d      	movs	r2, #109	; 0x6d
 8004e1c:	709a      	strb	r2, [r3, #2]
				AC_disp_pk_pk[3] = 44;//,
 8004e1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e22:	222c      	movs	r2, #44	; 0x2c
 8004e24:	70da      	strb	r2, [r3, #3]
				AC_disp_pk_pk[4] = 97;//a
 8004e26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e2a:	2261      	movs	r2, #97	; 0x61
 8004e2c:	711a      	strb	r2, [r3, #4]
				AC_disp_pk_pk[5] = 44;//,
 8004e2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e32:	222c      	movs	r2, #44	; 0x2c
 8004e34:	715a      	strb	r2, [r3, #5]
				AC_disp_pk_pk[6] = (AC_pk_pk/1000) + 48;
 8004e36:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004e3a:	4abe      	ldr	r2, [pc, #760]	; (8005134 <main+0x40ac>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3330      	adds	r3, #48	; 0x30
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e4e:	719a      	strb	r2, [r3, #6]
				AC_disp_pk_pk[7] = (AC_pk_pk/100) %10 + 48;
 8004e50:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004e54:	4ab8      	ldr	r2, [pc, #736]	; (8005138 <main+0x40b0>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	4bb7      	ldr	r3, [pc, #732]	; (800513c <main+0x40b4>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	08d9      	lsrs	r1, r3, #3
 8004e66:	460b      	mov	r3, r1
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	3330      	adds	r3, #48	; 0x30
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e7c:	71da      	strb	r2, [r3, #7]
				AC_disp_pk_pk[8] = (AC_pk_pk/10) %10 + 48;
 8004e7e:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004e82:	4aae      	ldr	r2, [pc, #696]	; (800513c <main+0x40b4>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	4bab      	ldr	r3, [pc, #684]	; (800513c <main+0x40b4>)
 8004e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e92:	08d9      	lsrs	r1, r3, #3
 8004e94:	460b      	mov	r3, r1
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	3330      	adds	r3, #48	; 0x30
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004eaa:	721a      	strb	r2, [r3, #8]
				AC_disp_pk_pk[9] = (AC_pk_pk/1) %10 + 48;
 8004eac:	f8b7 2270 	ldrh.w	r2, [r7, #624]	; 0x270
 8004eb0:	4ba2      	ldr	r3, [pc, #648]	; (800513c <main+0x40b4>)
 8004eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb6:	08d9      	lsrs	r1, r3, #3
 8004eb8:	460b      	mov	r3, r1
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3330      	adds	r3, #48	; 0x30
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ece:	725a      	strb	r2, [r3, #9]
				AC_disp_pk_pk[10] = 44;//,
 8004ed0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ed4:	222c      	movs	r2, #44	; 0x2c
 8004ed6:	729a      	strb	r2, [r3, #10]
				AC_disp_pk_pk[11] = 33;//!
 8004ed8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004edc:	2221      	movs	r2, #33	; 0x21
 8004ede:	72da      	strb	r2, [r3, #11]
				AC_disp_pk_pk[12] = 10;//\n
 8004ee0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	731a      	strb	r2, [r3, #12]


				/////offset/////////////

				AC_disp_offset[0] = 64;//@
 8004ee8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	701a      	strb	r2, [r3, #0]
				AC_disp_offset[1] = 44;//,
 8004ef0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004ef4:	222c      	movs	r2, #44	; 0x2c
 8004ef6:	705a      	strb	r2, [r3, #1]
				AC_disp_offset[2] = 109;//m
 8004ef8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004efc:	226d      	movs	r2, #109	; 0x6d
 8004efe:	709a      	strb	r2, [r3, #2]
				AC_disp_offset[3] = 44;//,
 8004f00:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f04:	222c      	movs	r2, #44	; 0x2c
 8004f06:	70da      	strb	r2, [r3, #3]
				AC_disp_offset[4] = 111;//o
 8004f08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f0c:	226f      	movs	r2, #111	; 0x6f
 8004f0e:	711a      	strb	r2, [r3, #4]
				AC_disp_offset[5] = 44;//,
 8004f10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f14:	222c      	movs	r2, #44	; 0x2c
 8004f16:	715a      	strb	r2, [r3, #5]
				AC_disp_offset[6] = (AC_avg/1000) %10 + 48;
 8004f18:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004f1c:	4a85      	ldr	r2, [pc, #532]	; (8005134 <main+0x40ac>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	4b85      	ldr	r3, [pc, #532]	; (800513c <main+0x40b4>)
 8004f28:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2c:	08d9      	lsrs	r1, r3, #3
 8004f2e:	460b      	mov	r3, r1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3330      	adds	r3, #48	; 0x30
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f44:	719a      	strb	r2, [r3, #6]
				AC_disp_offset[7] = (AC_avg/100) %10 + 48;
 8004f46:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004f4a:	4a7b      	ldr	r2, [pc, #492]	; (8005138 <main+0x40b0>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	4b79      	ldr	r3, [pc, #484]	; (800513c <main+0x40b4>)
 8004f56:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5a:	08d9      	lsrs	r1, r3, #3
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3330      	adds	r3, #48	; 0x30
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f72:	71da      	strb	r2, [r3, #7]
				AC_disp_offset[8] = (AC_avg/10) %10 + 48;
 8004f74:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004f78:	4a70      	ldr	r2, [pc, #448]	; (800513c <main+0x40b4>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	08db      	lsrs	r3, r3, #3
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	4b6e      	ldr	r3, [pc, #440]	; (800513c <main+0x40b4>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	08d9      	lsrs	r1, r3, #3
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	3330      	adds	r3, #48	; 0x30
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fa0:	721a      	strb	r2, [r3, #8]
				AC_disp_offset[9] = (AC_avg/1) %10 + 48;
 8004fa2:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8004fa6:	4b65      	ldr	r3, [pc, #404]	; (800513c <main+0x40b4>)
 8004fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fac:	08d9      	lsrs	r1, r3, #3
 8004fae:	460b      	mov	r3, r1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3330      	adds	r3, #48	; 0x30
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fc4:	725a      	strb	r2, [r3, #9]
				AC_disp_offset[10] = 44;//,
 8004fc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fca:	222c      	movs	r2, #44	; 0x2c
 8004fcc:	729a      	strb	r2, [r3, #10]
				AC_disp_offset[11] = 33;//!
 8004fce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fd2:	2221      	movs	r2, #33	; 0x21
 8004fd4:	72da      	strb	r2, [r3, #11]
				AC_disp_offset[12] = 10;//\n
 8004fd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fda:	220a      	movs	r2, #10
 8004fdc:	731a      	strb	r2, [r3, #12]



				////// FREQUENCY /////////

				AC_disp_frequency[0] = 64;//@
 8004fde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	701a      	strb	r2, [r3, #0]
				AC_disp_frequency[1] = 44;//,
 8004fe6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004fea:	222c      	movs	r2, #44	; 0x2c
 8004fec:	705a      	strb	r2, [r3, #1]
				AC_disp_frequency[2] = 109;//m
 8004fee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ff2:	226d      	movs	r2, #109	; 0x6d
 8004ff4:	709a      	strb	r2, [r3, #2]
				AC_disp_frequency[3] = 44;//,
 8004ff6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ffa:	222c      	movs	r2, #44	; 0x2c
 8004ffc:	70da      	strb	r2, [r3, #3]
				AC_disp_frequency[4] = 102;//f
 8004ffe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005002:	2266      	movs	r2, #102	; 0x66
 8005004:	711a      	strb	r2, [r3, #4]
				AC_disp_frequency[5] = 44;//,
 8005006:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800500a:	222c      	movs	r2, #44	; 0x2c
 800500c:	715a      	strb	r2, [r3, #5]
				AC_disp_frequency[6] = (AC_freq/1000) %10 + 48;
 800500e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005012:	4a48      	ldr	r2, [pc, #288]	; (8005134 <main+0x40ac>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	0999      	lsrs	r1, r3, #6
 800501a:	4b48      	ldr	r3, [pc, #288]	; (800513c <main+0x40b4>)
 800501c:	fba3 2301 	umull	r2, r3, r3, r1
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	1aca      	subs	r2, r1, r3
 800502c:	b2d3      	uxtb	r3, r2
 800502e:	3330      	adds	r3, #48	; 0x30
 8005030:	b2da      	uxtb	r2, r3
 8005032:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005036:	719a      	strb	r2, [r3, #6]
				AC_disp_frequency[7] = (AC_freq/100) %10 + 48;
 8005038:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800503c:	4a3e      	ldr	r2, [pc, #248]	; (8005138 <main+0x40b0>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0959      	lsrs	r1, r3, #5
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <main+0x40b4>)
 8005046:	fba3 2301 	umull	r2, r3, r3, r1
 800504a:	08da      	lsrs	r2, r3, #3
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	1aca      	subs	r2, r1, r3
 8005056:	b2d3      	uxtb	r3, r2
 8005058:	3330      	adds	r3, #48	; 0x30
 800505a:	b2da      	uxtb	r2, r3
 800505c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005060:	71da      	strb	r2, [r3, #7]
				AC_disp_frequency[8] = (AC_freq/10) %10 + 48;
 8005062:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005066:	4a35      	ldr	r2, [pc, #212]	; (800513c <main+0x40b4>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	08d9      	lsrs	r1, r3, #3
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <main+0x40b4>)
 8005070:	fba3 2301 	umull	r2, r3, r3, r1
 8005074:	08da      	lsrs	r2, r3, #3
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	1aca      	subs	r2, r1, r3
 8005080:	b2d3      	uxtb	r3, r2
 8005082:	3330      	adds	r3, #48	; 0x30
 8005084:	b2da      	uxtb	r2, r3
 8005086:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800508a:	721a      	strb	r2, [r3, #8]
				AC_disp_frequency[9] = (AC_freq/1) %10 + 48;
 800508c:	f8d7 12b8 	ldr.w	r1, [r7, #696]	; 0x2b8
 8005090:	4b2a      	ldr	r3, [pc, #168]	; (800513c <main+0x40b4>)
 8005092:	fba3 2301 	umull	r2, r3, r3, r1
 8005096:	08da      	lsrs	r2, r3, #3
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	1aca      	subs	r2, r1, r3
 80050a2:	b2d3      	uxtb	r3, r2
 80050a4:	3330      	adds	r3, #48	; 0x30
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050ac:	725a      	strb	r2, [r3, #9]
				AC_disp_frequency[10] = 44;//,
 80050ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050b2:	222c      	movs	r2, #44	; 0x2c
 80050b4:	729a      	strb	r2, [r3, #10]
				AC_disp_frequency[11] = 33;//!
 80050b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	72da      	strb	r2, [r3, #11]
				AC_disp_frequency[12] = 10;//\n
 80050be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050c2:	220a      	movs	r2, #10
 80050c4:	731a      	strb	r2, [r3, #12]
				//				}

				//////////////////////////////////////////////////////////
			}

			if(parameter_a){
 80050c6:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <main+0x4066>


				if(send_measurment == 1){
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <main+0x40b8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d109      	bne.n	80050ee <main+0x4066>
					HAL_UART_Transmit(&huart2, AC_disp_pk_pk, 13, 50);
 80050da:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80050de:	2332      	movs	r3, #50	; 0x32
 80050e0:	220d      	movs	r2, #13
 80050e2:	4818      	ldr	r0, [pc, #96]	; (8005144 <main+0x40bc>)
 80050e4:	f006 fae4 	bl	800b6b0 <HAL_UART_Transmit>
					send_measurment = 0;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <main+0x40b8>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_o){
 80050ee:	f107 0365 	add.w	r3, r7, #101	; 0x65
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <main+0x408e>


				if(send_measurment == 1){
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <main+0x40b8>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d109      	bne.n	8005116 <main+0x408e>
					HAL_UART_Transmit(&huart2, AC_disp_offset, 13, 50);
 8005102:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005106:	2332      	movs	r3, #50	; 0x32
 8005108:	220d      	movs	r2, #13
 800510a:	480e      	ldr	r0, [pc, #56]	; (8005144 <main+0x40bc>)
 800510c:	f006 fad0 	bl	800b6b0 <HAL_UART_Transmit>
					send_measurment = 0;
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <main+0x40b8>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_f){
 8005116:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <main+0x40dc>


				if(send_measurment == 1){
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <main+0x40b8>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11c      	bne.n	8005164 <main+0x40dc>
 800512a:	e011      	b.n	8005150 <main+0x40c8>
 800512c:	f3af 8000 	nop.w
 8005130:	3ff00000 	.word	0x3ff00000
 8005134:	10624dd3 	.word	0x10624dd3
 8005138:	51eb851f 	.word	0x51eb851f
 800513c:	cccccccd 	.word	0xcccccccd
 8005140:	2000165c 	.word	0x2000165c
 8005144:	2000150c 	.word	0x2000150c
 8005148:	eb1c432d 	.word	0xeb1c432d
 800514c:	3f1a36e2 	.word	0x3f1a36e2
					HAL_UART_Transmit(&huart2, AC_disp_frequency, 13, 50);
 8005150:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8005154:	2332      	movs	r3, #50	; 0x32
 8005156:	220d      	movs	r2, #13
 8005158:	489f      	ldr	r0, [pc, #636]	; (80053d8 <main+0x4350>)
 800515a:	f006 faa9 	bl	800b6b0 <HAL_UART_Transmit>
					send_measurment = 0;
 800515e:	4b9f      	ldr	r3, [pc, #636]	; (80053dc <main+0x4354>)
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
				}

			}

			HAL_ADC_Start(&hadc3);
 8005164:	489e      	ldr	r0, [pc, #632]	; (80053e0 <main+0x4358>)
 8005166:	f001 f9ab 	bl	80064c0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 800516a:	2114      	movs	r1, #20
 800516c:	489c      	ldr	r0, [pc, #624]	; (80053e0 <main+0x4358>)
 800516e:	f001 faf3 	bl	8006758 <HAL_ADC_PollForConversion>
			AC_value[ACidx] = HAL_ADC_GetValue(&hadc3);
 8005172:	489b      	ldr	r0, [pc, #620]	; (80053e0 <main+0x4358>)
 8005174:	f001 fbf2 	bl	800695c <HAL_ADC_GetValue>
 8005178:	4603      	mov	r3, r0
 800517a:	f8b7 22c8 	ldrh.w	r2, [r7, #712]	; 0x2c8
 800517e:	b299      	uxth	r1, r3
 8005180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005184:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8005188:	4895      	ldr	r0, [pc, #596]	; (80053e0 <main+0x4358>)
 800518a:	f001 faaf 	bl	80066ec <HAL_ADC_Stop>
			ACidx++;
 800518e:	f8b7 32c8 	ldrh.w	r3, [r7, #712]	; 0x2c8
 8005192:	3301      	adds	r3, #1
 8005194:	f8a7 32c8 	strh.w	r3, [r7, #712]	; 0x2c8
			timer_interrupt = 0;
 8005198:	4b92      	ldr	r3, [pc, #584]	; (80053e4 <main+0x435c>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		}

		///////////////// OUTPUT MODE /////////////////////

		// DC output
		if(signal_d && output){// && DCDACMENU){
 800519e:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d031      	beq.n	800520e <main+0x4186>
 80051aa:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02d      	beq.n	800520e <main+0x4186>

			HAL_TIM_Base_Start(&htim2);
 80051b2:	488d      	ldr	r0, [pc, #564]	; (80053e8 <main+0x4360>)
 80051b4:	f004 ffee 	bl	800a194 <HAL_TIM_Base_Start>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80051b8:	2100      	movs	r1, #0
 80051ba:	488c      	ldr	r0, [pc, #560]	; (80053ec <main+0x4364>)
 80051bc:	f002 fe4e 	bl	8007e5c <HAL_DAC_Start>
			DAC_DC_val = (DAC_DC_offset/1000)*(4096)/3.3;
 80051c0:	ed97 7aa7 	vldr	s14, [r7, #668]	; 0x29c
 80051c4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80053f0 <main+0x4368>
 80051c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051cc:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80053f4 <main+0x436c>
 80051d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d4:	ee17 0a90 	vmov	r0, s15
 80051d8:	f7fb f9be 	bl	8000558 <__aeabi_f2d>
 80051dc:	a378      	add	r3, pc, #480	; (adr r3, 80053c0 <main+0x4338>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb fb3b 	bl	800085c <__aeabi_ddiv>
 80051e6:	4603      	mov	r3, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	4618      	mov	r0, r3
 80051ec:	4621      	mov	r1, r4
 80051ee:	f7fb fced 	bl	8000bcc <__aeabi_d2f>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_DC_val);
 80051f8:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 80051fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005200:	ee17 3a90 	vmov	r3, s15
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	4878      	ldr	r0, [pc, #480]	; (80053ec <main+0x4364>)
 800520a:	f002 fe02 	bl	8007e12 <HAL_DAC_SetValue>

		}

		//AC output

		if(signal_s && output){
 800520e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d07c      	beq.n	8005314 <main+0x428c>
 800521a:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d078      	beq.n	8005314 <main+0x428c>

			//			TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
			HAL_TIM_Base_Start(&htim2);
 8005222:	4871      	ldr	r0, [pc, #452]	; (80053e8 <main+0x4360>)
 8005224:	f004 ffb6 	bl	800a194 <HAL_TIM_Base_Start>
			//			HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
			for (int i=0;i<1000;i++)
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800522e:	e05e      	b.n	80052ee <main+0x4266>
			{
				//				sine_val_DAC[i] = DAC_offset_output*4096/3.3 +(((sin(i*2*PI/1000) + 1)* DAC_amplitude_output/3.3 *(4096/2)));
				//				sine_val_DAC[i] = (DAC_offset_output*4096/3.3) + ((sin(i*2*PI/1000))*((DAC_amplitude_output/2)*4096/3.3)); //default
				sine_val_DAC[i] = (DAC_offset_output*4096/3300) + ((sin(i*2*PI/1000))*((DAC_amplitude_output/2)*4096/3300)); //default
 8005230:	edd7 7aaa 	vldr	s15, [r7, #680]	; 0x2a8
 8005234:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80053f4 <main+0x436c>
 8005238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80053f8 <main+0x4370>
 8005240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005244:	ee16 0a90 	vmov	r0, s13
 8005248:	f7fb f986 	bl	8000558 <__aeabi_f2d>
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
 8005250:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb f96c 	bl	8000534 <__aeabi_i2d>
 800525c:	a35a      	add	r3, pc, #360	; (adr r3, 80053c8 <main+0x4340>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f9d1 	bl	8000608 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	4b62      	ldr	r3, [pc, #392]	; (80053fc <main+0x4374>)
 8005274:	f7fb faf2 	bl	800085c <__aeabi_ddiv>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	ec43 2b17 	vmov	d7, r2, r3
 8005280:	eeb0 0a47 	vmov.f32	s0, s14
 8005284:	eef0 0a67 	vmov.f32	s1, s15
 8005288:	f008 f866 	bl	800d358 <sin>
 800528c:	ec59 8b10 	vmov	r8, r9, d0
 8005290:	ed97 7aac 	vldr	s14, [r7, #688]	; 0x2b0
 8005294:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800529c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80053f4 <main+0x436c>
 80052a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80053f8 <main+0x4370>
 80052a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052ac:	ee16 0a90 	vmov	r0, s13
 80052b0:	f7fb f952 	bl	8000558 <__aeabi_f2d>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4640      	mov	r0, r8
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fb f9a4 	bl	8000608 <__aeabi_dmul>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4620      	mov	r0, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7fa ffe8 	bl	800029c <__adddf3>
 80052cc:	4603      	mov	r3, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	4618      	mov	r0, r3
 80052d2:	4621      	mov	r1, r4
 80052d4:	f7fb fc5a 	bl	8000b8c <__aeabi_d2uiz>
 80052d8:	4601      	mov	r1, r0
 80052da:	4a49      	ldr	r2, [pc, #292]	; (8005400 <main+0x4378>)
 80052dc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80052e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0;i<1000;i++)
 80052e4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80052e8:	3301      	adds	r3, #1
 80052ea:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80052ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80052f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f6:	db9b      	blt.n	8005230 <main+0x41a8>
			}

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val_DAC, 1000, DAC_ALIGN_12B_R);
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005300:	4a3f      	ldr	r2, [pc, #252]	; (8005400 <main+0x4378>)
 8005302:	2100      	movs	r1, #0
 8005304:	4839      	ldr	r0, [pc, #228]	; (80053ec <main+0x4364>)
 8005306:	f002 fdf5 	bl	8007ef4 <HAL_DAC_Start_DMA>
			LCD_scroll_count++;
 800530a:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 800530e:	3301      	adds	r3, #1
 8005310:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294

		}

		//pulse output

		if(signal_p && output){
 8005314:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	f43b aff7 	beq.w	8001310 <main+0x288>
 8005322:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8005326:	2b00      	cmp	r3, #0
 8005328:	f43b aff2 	beq.w	8001310 <main+0x288>
			HAL_TIM_Base_Start(&htim2);
 800532c:	482e      	ldr	r0, [pc, #184]	; (80053e8 <main+0x4360>)
 800532e:	f004 ff31 	bl	800a194 <HAL_TIM_Base_Start>
			//HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
			//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
			//			TIM2->EGR = ((TIM2->EGR)|0b01);
			TIM2->ARR =(72e6/(DAC_frequency_output*100)) - 1;
 8005332:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 8005336:	2264      	movs	r2, #100	; 0x64
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f8f9 	bl	8000534 <__aeabi_i2d>
 8005342:	4603      	mov	r3, r0
 8005344:	460c      	mov	r4, r1
 8005346:	461a      	mov	r2, r3
 8005348:	4623      	mov	r3, r4
 800534a:	a121      	add	r1, pc, #132	; (adr r1, 80053d0 <main+0x4348>)
 800534c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005350:	f7fb fa84 	bl	800085c <__aeabi_ddiv>
 8005354:	4603      	mov	r3, r0
 8005356:	460c      	mov	r4, r1
 8005358:	4618      	mov	r0, r3
 800535a:	4621      	mov	r1, r4
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	4b28      	ldr	r3, [pc, #160]	; (8005404 <main+0x437c>)
 8005362:	f7fa ff99 	bl	8000298 <__aeabi_dsub>
 8005366:	4603      	mov	r3, r0
 8005368:	460c      	mov	r4, r1
 800536a:	461a      	mov	r2, r3
 800536c:	4623      	mov	r3, r4
 800536e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005372:	4610      	mov	r0, r2
 8005374:	4619      	mov	r1, r3
 8005376:	f7fb fc09 	bl	8000b8c <__aeabi_d2uiz>
 800537a:	4603      	mov	r3, r0
 800537c:	62e3      	str	r3, [r4, #44]	; 0x2c
			get_Pulse_array(DutyCycle, Amplitude_pulse, Offset_pulse);
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <main+0x4380>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <main+0x4384>)
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	4b21      	ldr	r3, [pc, #132]	; (8005410 <main+0x4388>)
 800538c:	edd3 6a00 	vldr	s13, [r3]
 8005390:	eeb0 1a66 	vmov.f32	s2, s13
 8005394:	eef0 0a47 	vmov.f32	s1, s14
 8005398:	eeb0 0a67 	vmov.f32	s0, s15
 800539c:	f7fb fdec 	bl	8000f78 <get_Pulse_array>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, Pulse_array, 100, DAC_ALIGN_12B_R);
 80053a0:	2300      	movs	r3, #0
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2364      	movs	r3, #100	; 0x64
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <main+0x438c>)
 80053a8:	2100      	movs	r1, #0
 80053aa:	4810      	ldr	r0, [pc, #64]	; (80053ec <main+0x4364>)
 80053ac:	f002 fda2 	bl	8007ef4 <HAL_DAC_Start_DMA>
			LCD_scroll_count++;
 80053b0:	f8b7 3294 	ldrh.w	r3, [r7, #660]	; 0x294
 80053b4:	3301      	adds	r3, #1
 80053b6:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
		pinstateM = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80053ba:	f7fb bfa9 	b.w	8001310 <main+0x288>
 80053be:	bf00      	nop
 80053c0:	66666666 	.word	0x66666666
 80053c4:	400a6666 	.word	0x400a6666
 80053c8:	4d12d84a 	.word	0x4d12d84a
 80053cc:	400921fb 	.word	0x400921fb
 80053d0:	00000000 	.word	0x00000000
 80053d4:	41912a88 	.word	0x41912a88
 80053d8:	2000150c 	.word	0x2000150c
 80053dc:	2000165c 	.word	0x2000165c
 80053e0:	200002b8 	.word	0x200002b8
 80053e4:	2000166d 	.word	0x2000166d
 80053e8:	2000050c 	.word	0x2000050c
 80053ec:	200000c0 	.word	0x200000c0
 80053f0:	447a0000 	.word	0x447a0000
 80053f4:	45800000 	.word	0x45800000
 80053f8:	454e4000 	.word	0x454e4000
 80053fc:	408f4000 	.word	0x408f4000
 8005400:	2000056c 	.word	0x2000056c
 8005404:	3ff00000 	.word	0x3ff00000
 8005408:	20000010 	.word	0x20000010
 800540c:	20000014 	.word	0x20000014
 8005410:	20000018 	.word	0x20000018
 8005414:	20000324 	.word	0x20000324

08005418 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0a6      	sub	sp, #152	; 0x98
 800541c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800541e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005422:	2228      	movs	r2, #40	; 0x28
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f007 fb88 	bl	800cb3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800542c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	2258      	movs	r2, #88	; 0x58
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f007 fb7a 	bl	800cb3c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005448:	2302      	movs	r3, #2
 800544a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800544c:	2301      	movs	r3, #1
 800544e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005450:	2310      	movs	r3, #16
 8005452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005456:	2302      	movs	r3, #2
 8005458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800545c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005476:	4618      	mov	r0, r3
 8005478:	f003 faca 	bl	8008a10 <HAL_RCC_OscConfig>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8005482:	f000 faf9 	bl	8005a78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005486:	230f      	movs	r3, #15
 8005488:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800548a:	2302      	movs	r3, #2
 800548c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800548e:	2300      	movs	r3, #0
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005496:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005498:	2300      	movs	r3, #0
 800549a:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800549c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80054a0:	2102      	movs	r1, #2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f004 f9ca 	bl	800983c <HAL_RCC_ClockConfig>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80054ae:	f000 fae3 	bl	8005a78 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80054b2:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <SystemClock_Config+0xcc>)
 80054b4:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80054ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fbec 	bl	8009ca8 <HAL_RCCEx_PeriphCLKConfig>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80054d6:	f000 facf 	bl	8005a78 <Error_Handler>
	}
}
 80054da:	bf00      	nop
 80054dc:	3798      	adds	r7, #152	; 0x98
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	00101102 	.word	0x00101102

080054e8 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 80054ee:	f107 031c 	add.w	r3, r7, #28
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	611a      	str	r2, [r3, #16]
 8005508:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 800550a:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800550c:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <MX_ADC3_Init+0xdc>)
 800550e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005510:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005518:	2200      	movs	r2, #0
 800551a:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800551e:	2200      	movs	r2, #0
 8005520:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005524:	2201      	movs	r2, #1
 8005526:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005530:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005532:	2200      	movs	r2, #0
 8005534:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005538:	2201      	movs	r2, #1
 800553a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800553c:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8005542:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005544:	2201      	movs	r2, #1
 8005546:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005552:	2204      	movs	r2, #4
 8005554:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005558:	2200      	movs	r2, #0
 800555a:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800555e:	2200      	movs	r2, #0
 8005560:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005562:	4817      	ldr	r0, [pc, #92]	; (80055c0 <MX_ADC3_Init+0xd8>)
 8005564:	f000 fdb2 	bl	80060cc <HAL_ADC_Init>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 800556e:	f000 fa83 	bl	8005a78 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	4619      	mov	r1, r3
 800557c:	4810      	ldr	r0, [pc, #64]	; (80055c0 <MX_ADC3_Init+0xd8>)
 800557e:	f002 f81b 	bl	80075b8 <HAL_ADCEx_MultiModeConfigChannel>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_ADC3_Init+0xa4>
	{
		Error_Handler();
 8005588:	f000 fa76 	bl	8005a78 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800558c:	2301      	movs	r3, #1
 800558e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8005590:	2301      	movs	r3, #1
 8005592:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4805      	ldr	r0, [pc, #20]	; (80055c0 <MX_ADC3_Init+0xd8>)
 80055aa:	f001 fd19 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <MX_ADC3_Init+0xd0>
	{
		Error_Handler();
 80055b4:	f000 fa60 	bl	8005a78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80055b8:	bf00      	nop
 80055ba:	3728      	adds	r7, #40	; 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	200002b8 	.word	0x200002b8
 80055c4:	50000400 	.word	0x50000400

080055c8 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <MX_DAC1_Init+0x4c>)
 80055da:	4a0f      	ldr	r2, [pc, #60]	; (8005618 <MX_DAC1_Init+0x50>)
 80055dc:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80055de:	480d      	ldr	r0, [pc, #52]	; (8005614 <MX_DAC1_Init+0x4c>)
 80055e0:	f002 fb6b 	bl	8007cba <HAL_DAC_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_DAC1_Init+0x26>
	{
		Error_Handler();
 80055ea:	f000 fa45 	bl	8005a78 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80055ee:	2324      	movs	r3, #36	; 0x24
 80055f0:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80055f2:	2302      	movs	r3, #2
 80055f4:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	2200      	movs	r2, #0
 80055fa:	4619      	mov	r1, r3
 80055fc:	4805      	ldr	r0, [pc, #20]	; (8005614 <MX_DAC1_Init+0x4c>)
 80055fe:	f002 fd27 	bl	8008050 <HAL_DAC_ConfigChannel>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <MX_DAC1_Init+0x44>
	{
		Error_Handler();
 8005608:	f000 fa36 	bl	8005a78 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200000c0 	.word	0x200000c0
 8005618:	40007400 	.word	0x40007400

0800561c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b09a      	sub	sp, #104	; 0x68
 8005620:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	609a      	str	r2, [r3, #8]
 800562e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	605a      	str	r2, [r3, #4]
 800563a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800563c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
 800564c:	615a      	str	r2, [r3, #20]
 800564e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	222c      	movs	r2, #44	; 0x2c
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f007 fa70 	bl	800cb3c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800565c:	4b43      	ldr	r3, [pc, #268]	; (800576c <MX_TIM1_Init+0x150>)
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <MX_TIM1_Init+0x154>)
 8005660:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3599;
 8005662:	4b42      	ldr	r3, [pc, #264]	; (800576c <MX_TIM1_Init+0x150>)
 8005664:	f640 620f 	movw	r2, #3599	; 0xe0f
 8005668:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800566a:	4b40      	ldr	r3, [pc, #256]	; (800576c <MX_TIM1_Init+0x150>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1;
 8005670:	4b3e      	ldr	r3, [pc, #248]	; (800576c <MX_TIM1_Init+0x150>)
 8005672:	2201      	movs	r2, #1
 8005674:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005676:	4b3d      	ldr	r3, [pc, #244]	; (800576c <MX_TIM1_Init+0x150>)
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800567c:	4b3b      	ldr	r3, [pc, #236]	; (800576c <MX_TIM1_Init+0x150>)
 800567e:	2200      	movs	r2, #0
 8005680:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005682:	4b3a      	ldr	r3, [pc, #232]	; (800576c <MX_TIM1_Init+0x150>)
 8005684:	2200      	movs	r2, #0
 8005686:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005688:	4838      	ldr	r0, [pc, #224]	; (800576c <MX_TIM1_Init+0x150>)
 800568a:	f004 fd2b 	bl	800a0e4 <HAL_TIM_Base_Init>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8005694:	f000 f9f0 	bl	8005a78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800569c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800569e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056a2:	4619      	mov	r1, r3
 80056a4:	4831      	ldr	r0, [pc, #196]	; (800576c <MX_TIM1_Init+0x150>)
 80056a6:	f005 f931 	bl	800a90c <HAL_TIM_ConfigClockSource>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80056b0:	f000 f9e2 	bl	8005a78 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80056b4:	482d      	ldr	r0, [pc, #180]	; (800576c <MX_TIM1_Init+0x150>)
 80056b6:	f004 fdd5 	bl	800a264 <HAL_TIM_OC_Init>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80056c0:	f000 f9da 	bl	8005a78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c4:	2300      	movs	r3, #0
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056c8:	2300      	movs	r3, #0
 80056ca:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056d4:	4619      	mov	r1, r3
 80056d6:	4825      	ldr	r0, [pc, #148]	; (800576c <MX_TIM1_Init+0x150>)
 80056d8:	f005 fe6c 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80056e2:	f000 f9c9 	bl	8005a78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80056e6:	2310      	movs	r3, #16
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ee:	2300      	movs	r3, #0
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056f2:	2300      	movs	r3, #0
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005706:	2200      	movs	r2, #0
 8005708:	4619      	mov	r1, r3
 800570a:	4818      	ldr	r0, [pc, #96]	; (800576c <MX_TIM1_Init+0x150>)
 800570c:	f005 f884 	bl	800a818 <HAL_TIM_OC_ConfigChannel>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8005716:	f000 f9af 	bl	8005a78 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800572e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005732:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800573c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4807      	ldr	r0, [pc, #28]	; (800576c <MX_TIM1_Init+0x150>)
 8005750:	f005 febc 	bl	800b4cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800575a:	f000 f98d 	bl	8005a78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800575e:	4803      	ldr	r0, [pc, #12]	; (800576c <MX_TIM1_Init+0x150>)
 8005760:	f000 faa8 	bl	8005cb4 <HAL_TIM_MspPostInit>

}
 8005764:	bf00      	nop
 8005766:	3768      	adds	r7, #104	; 0x68
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	200004bc 	.word	0x200004bc
 8005770:	40012c00 	.word	0x40012c00

08005774 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800577a:	f107 0310 	add.w	r3, r7, #16
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <MX_TIM2_Init+0x94>)
 8005794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005798:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <MX_TIM2_Init+0x94>)
 800579c:	2200      	movs	r2, #0
 800579e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b19      	ldr	r3, [pc, #100]	; (8005808 <MX_TIM2_Init+0x94>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100-1;
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <MX_TIM2_Init+0x94>)
 80057a8:	2263      	movs	r2, #99	; 0x63
 80057aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <MX_TIM2_Init+0x94>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <MX_TIM2_Init+0x94>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057b8:	4813      	ldr	r0, [pc, #76]	; (8005808 <MX_TIM2_Init+0x94>)
 80057ba:	f004 fc93 	bl	800a0e4 <HAL_TIM_Base_Init>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80057c4:	f000 f958 	bl	8005a78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057cc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	4619      	mov	r1, r3
 80057d4:	480c      	ldr	r0, [pc, #48]	; (8005808 <MX_TIM2_Init+0x94>)
 80057d6:	f005 f899 	bl	800a90c <HAL_TIM_ConfigClockSource>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80057e0:	f000 f94a 	bl	8005a78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057e4:	2320      	movs	r3, #32
 80057e6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4805      	ldr	r0, [pc, #20]	; (8005808 <MX_TIM2_Init+0x94>)
 80057f2:	f005 fddf 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80057fc:	f000 f93c 	bl	8005a78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005800:	bf00      	nop
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	2000050c 	.word	0x2000050c

0800580c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005810:	4b14      	ldr	r3, [pc, #80]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005812:	4a15      	ldr	r2, [pc, #84]	; (8005868 <MX_USART2_UART_Init+0x5c>)
 8005814:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800581c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005820:	2200      	movs	r2, #0
 8005822:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005826:	2200      	movs	r2, #0
 8005828:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <MX_USART2_UART_Init+0x58>)
 800582c:	2200      	movs	r2, #0
 800582e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005832:	220c      	movs	r2, #12
 8005834:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005838:	2200      	movs	r2, #0
 800583a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <MX_USART2_UART_Init+0x58>)
 800583e:	2200      	movs	r2, #0
 8005840:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005844:	2200      	movs	r2, #0
 8005846:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <MX_USART2_UART_Init+0x58>)
 800584a:	2200      	movs	r2, #0
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800584e:	4805      	ldr	r0, [pc, #20]	; (8005864 <MX_USART2_UART_Init+0x58>)
 8005850:	f005 fee0 	bl	800b614 <HAL_UART_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800585a:	f000 f90d 	bl	8005a78 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000150c 	.word	0x2000150c
 8005868:	40004400 	.word	0x40004400

0800586c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <MX_DMA_Init+0x38>)
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <MX_DMA_Init+0x38>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6153      	str	r3, [r2, #20]
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <MX_DMA_Init+0x38>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800588a:	2200      	movs	r2, #0
 800588c:	2100      	movs	r1, #0
 800588e:	200d      	movs	r0, #13
 8005890:	f002 f9dd 	bl	8007c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005894:	200d      	movs	r0, #13
 8005896:	f002 f9f6 	bl	8007c86 <HAL_NVIC_EnableIRQ>

}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000

080058a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ae:	f107 0314 	add.w	r3, r7, #20
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80058be:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c8:	6153      	str	r3, [r2, #20]
 80058ca:	4b68      	ldr	r3, [pc, #416]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80058d6:	4b65      	ldr	r3, [pc, #404]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	4a64      	ldr	r2, [pc, #400]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058e0:	6153      	str	r3, [r2, #20]
 80058e2:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	4a5e      	ldr	r2, [pc, #376]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	6153      	str	r3, [r2, #20]
 80058fa:	4b5c      	ldr	r3, [pc, #368]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005906:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 800590c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005910:	6153      	str	r3, [r2, #20]
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <MX_GPIO_Init+0x1c4>)
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|D4_Pin|D3_Pin|D2_Pin
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8005924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005928:	f003 f836 	bl	8008998 <HAL_GPIO_WritePin>
			|DB4_Pin|DB5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RS_Pin|DB6_Pin|D5_Pin|DB7_Pin, GPIO_PIN_RESET);
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005932:	484f      	ldr	r0, [pc, #316]	; (8005a70 <MX_GPIO_Init+0x1c8>)
 8005934:	f003 f830 	bl	8008998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RNW_Pin|E_Pin, GPIO_PIN_RESET);
 8005938:	2200      	movs	r2, #0
 800593a:	f640 0104 	movw	r1, #2052	; 0x804
 800593e:	484d      	ldr	r0, [pc, #308]	; (8005a74 <MX_GPIO_Init+0x1cc>)
 8005940:	f003 f82a 	bl	8008998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005948:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800594a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800594e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4619      	mov	r1, r3
 800595a:	4845      	ldr	r0, [pc, #276]	; (8005a70 <MX_GPIO_Init+0x1c8>)
 800595c:	f002 fe7a 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8005960:	2320      	movs	r3, #32
 8005962:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005964:	2301      	movs	r3, #1
 8005966:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005968:	2301      	movs	r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596c:	2300      	movs	r3, #0
 800596e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800597a:	f002 fe6b 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS_Pin DB6_Pin DB7_Pin */
	GPIO_InitStruct.Pin = RS_Pin|DB6_Pin|DB7_Pin;
 800597e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005982:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005984:	2311      	movs	r3, #17
 8005986:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005988:	2301      	movs	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005990:	f107 0314 	add.w	r3, r7, #20
 8005994:	4619      	mov	r1, r3
 8005996:	4836      	ldr	r0, [pc, #216]	; (8005a70 <MX_GPIO_Init+0x1c8>)
 8005998:	f002 fe5c 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pins : RNW_Pin E_Pin */
	GPIO_InitStruct.Pin = RNW_Pin|E_Pin;
 800599c:	f640 0304 	movw	r3, #2052	; 0x804
 80059a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80059a2:	2311      	movs	r3, #17
 80059a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059aa:	2300      	movs	r3, #0
 80059ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	4619      	mov	r1, r3
 80059b4:	482f      	ldr	r0, [pc, #188]	; (8005a74 <MX_GPIO_Init+0x1cc>)
 80059b6:	f002 fe4d 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pin : D5_Pin */
	GPIO_InitStruct.Pin = D5_Pin;
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059be:	2301      	movs	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c6:	2300      	movs	r3, #0
 80059c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4619      	mov	r1, r3
 80059d0:	4827      	ldr	r0, [pc, #156]	; (8005a70 <MX_GPIO_Init+0x1c8>)
 80059d2:	f002 fe3f 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D3_Pin D2_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D3_Pin|D2_Pin;
 80059d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80059da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059dc:	2301      	movs	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e4:	2300      	movs	r3, #0
 80059e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	4619      	mov	r1, r3
 80059ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059f2:	f002 fe2f 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pins : DB4_Pin DB5_Pin */
	GPIO_InitStruct.Pin = DB4_Pin|DB5_Pin;
 80059f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80059fc:	2311      	movs	r3, #17
 80059fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a00:	2301      	movs	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a12:	f002 fe1f 	bl	8008654 <HAL_GPIO_Init>

	/*Configure GPIO pins : buttonM_Pin buttonL_Pin buttonR_Pin buttonU_Pin
                           buttonD_Pin */
	GPIO_InitStruct.Pin = buttonM_Pin|buttonL_Pin|buttonR_Pin|buttonU_Pin
 8005a16:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8005a1a:	617b      	str	r3, [r7, #20]
			|buttonD_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005a20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4811      	ldr	r0, [pc, #68]	; (8005a74 <MX_GPIO_Init+0x1cc>)
 8005a2e:	f002 fe11 	bl	8008654 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005a32:	2200      	movs	r2, #0
 8005a34:	2100      	movs	r1, #0
 8005a36:	200a      	movs	r0, #10
 8005a38:	f002 f909 	bl	8007c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f002 f922 	bl	8007c86 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	2017      	movs	r0, #23
 8005a48:	f002 f901 	bl	8007c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005a4c:	2017      	movs	r0, #23
 8005a4e:	f002 f91a 	bl	8007c86 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005a52:	2200      	movs	r2, #0
 8005a54:	2100      	movs	r1, #0
 8005a56:	2028      	movs	r0, #40	; 0x28
 8005a58:	f002 f8f9 	bl	8007c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005a5c:	2028      	movs	r0, #40	; 0x28
 8005a5e:	f002 f912 	bl	8007c86 <HAL_NVIC_EnableIRQ>

}
 8005a62:	bf00      	nop
 8005a64:	3728      	adds	r7, #40	; 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	48000800 	.word	0x48000800
 8005a74:	48000400 	.word	0x48000400

08005a78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005a7c:	bf00      	nop
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_MspInit+0x44>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <HAL_MspInit+0x44>)
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	6193      	str	r3, [r2, #24]
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_MspInit+0x44>)
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_MspInit+0x44>)
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	4a08      	ldr	r2, [pc, #32]	; (8005acc <HAL_MspInit+0x44>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	61d3      	str	r3, [r2, #28]
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_MspInit+0x44>)
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005abe:	2007      	movs	r0, #7
 8005ac0:	f002 f8ba 	bl	8007c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_ADC_MspInit+0x84>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d12b      	bne.n	8005b4a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8005af2:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005af8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afc:	6153      	str	r3, [r2, #20]
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b14:	6153      	str	r3, [r2, #20]
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_ADC_MspInit+0x88>)
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PB1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005b22:	2302      	movs	r3, #2
 8005b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b26:	2303      	movs	r3, #3
 8005b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b2e:	f107 0314 	add.w	r3, r7, #20
 8005b32:	4619      	mov	r1, r3
 8005b34:	4809      	ldr	r0, [pc, #36]	; (8005b5c <HAL_ADC_MspInit+0x8c>)
 8005b36:	f002 fd8d 	bl	8008654 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	202f      	movs	r0, #47	; 0x2f
 8005b40:	f002 f885 	bl	8007c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8005b44:	202f      	movs	r0, #47	; 0x2f
 8005b46:	f002 f89e 	bl	8007c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005b4a:	bf00      	nop
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	50000400 	.word	0x50000400
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	48000400 	.word	0x48000400

08005b60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2c      	ldr	r2, [pc, #176]	; (8005c30 <HAL_DAC_MspInit+0xd0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d152      	bne.n	8005c28 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005b82:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	4a2b      	ldr	r2, [pc, #172]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	61d3      	str	r3, [r2, #28]
 8005b8e:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	6153      	str	r3, [r2, #20]
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <HAL_DAC_MspInit+0xd4>)
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005bb2:	2310      	movs	r3, #16
 8005bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bc8:	f002 fd44 	bl	8008654 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bce:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_DAC_MspInit+0xdc>)
 8005bd0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bd2:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005bde:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005bf4:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005c00:	480d      	ldr	r0, [pc, #52]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005c02:	f002 fafc 	bl	80081fe <HAL_DMA_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8005c0c:	f7ff ff34 	bl	8005a78 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_DAC_MspInit+0xe0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <HAL_DAC_MspInit+0xe0>)
 8005c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c1a:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_DAC_MspInit+0xd8>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005c28:	bf00      	nop
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40007400 	.word	0x40007400
 8005c34:	40021000 	.word	0x40021000
 8005c38:	2000026c 	.word	0x2000026c
 8005c3c:	40020030 	.word	0x40020030
 8005c40:	40010000 	.word	0x40010000

08005c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <HAL_TIM_Base_MspInit+0x68>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d114      	bne.n	8005c80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c60:	6193      	str	r3, [r2, #24]
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2100      	movs	r1, #0
 8005c72:	201b      	movs	r0, #27
 8005c74:	f001 ffeb 	bl	8007c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005c78:	201b      	movs	r0, #27
 8005c7a:	f002 f804 	bl	8007c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005c7e:	e010      	b.n	8005ca2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d10b      	bne.n	8005ca2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	61d3      	str	r3, [r2, #28]
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_TIM_Base_MspInit+0x6c>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cbc:	f107 030c 	add.w	r3, r7, #12
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <HAL_TIM_MspPostInit+0x64>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce0:	6153      	str	r3, [r2, #20]
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	4619      	mov	r1, r3
 8005d08:	4805      	ldr	r0, [pc, #20]	; (8005d20 <HAL_TIM_MspPostInit+0x6c>)
 8005d0a:	f002 fca3 	bl	8008654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005d0e:	bf00      	nop
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	48000800 	.word	0x48000800

08005d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d2c:	f107 0314 	add.w	r3, r7, #20
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <HAL_UART_MspInit+0x8c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d130      	bne.n	8005da8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d50:	61d3      	str	r3, [r2, #28]
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d68:	6153      	str	r3, [r2, #20]
 8005d6a:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <HAL_UART_MspInit+0x90>)
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005d76:	230c      	movs	r3, #12
 8005d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d82:	2300      	movs	r3, #0
 8005d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d86:	2307      	movs	r3, #7
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d8a:	f107 0314 	add.w	r3, r7, #20
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d94:	f002 fc5e 	bl	8008654 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	2026      	movs	r0, #38	; 0x26
 8005d9e:	f001 ff56 	bl	8007c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005da2:	2026      	movs	r0, #38	; 0x26
 8005da4:	f001 ff6f 	bl	8007c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005da8:	bf00      	nop
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40004400 	.word	0x40004400
 8005db4:	40021000 	.word	0x40021000

08005db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dca:	e7fe      	b.n	8005dca <HardFault_Handler+0x4>

08005dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dd0:	e7fe      	b.n	8005dd0 <MemManage_Handler+0x4>

08005dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dd6:	e7fe      	b.n	8005dd6 <BusFault_Handler+0x4>

08005dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ddc:	e7fe      	b.n	8005ddc <UsageFault_Handler+0x4>

08005dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e0c:	f000 f8fe 	bl	800600c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
//		time_pressM = HAL_GetTick();
//		button_pressed_mid = 1;
//	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005e18:	2010      	movs	r0, #16
 8005e1a:	f002 fdd5 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005e28:	4802      	ldr	r0, [pc, #8]	; (8005e34 <DMA1_Channel3_IRQHandler+0x10>)
 8005e2a:	f002 fb05 	bl	8008438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	2000026c 	.word	0x2000026c

08005e38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005e3c:	2020      	movs	r0, #32
 8005e3e:	f002 fdc3 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005e42:	2040      	movs	r0, #64	; 0x40
 8005e44:	f002 fdc0 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005e48:	2080      	movs	r0, #128	; 0x80
 8005e4a:	f002 fdbd 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005e4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e52:	f002 fdb9 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	timer_interrupt = 1;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <TIM1_CC_IRQHandler+0x14>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e66:	4803      	ldr	r0, [pc, #12]	; (8005e74 <TIM1_CC_IRQHandler+0x18>)
 8005e68:	f004 fbb6 	bl	800a5d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005e6c:	bf00      	nop
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	2000166d 	.word	0x2000166d
 8005e74:	200004bc 	.word	0x200004bc

08005e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005e7c:	4802      	ldr	r0, [pc, #8]	; (8005e88 <USART2_IRQHandler+0x10>)
 8005e7e:	f005 fcf9 	bl	800b874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2000150c 	.word	0x2000150c

08005e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
//			button_pressed = 1;
//		}
//button_state = current_state;

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005e94:	f002 fd98 	bl	80089c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005ea0:	4802      	ldr	r0, [pc, #8]	; (8005eac <ADC3_IRQHandler+0x10>)
 8005ea2:	f000 fd69 	bl	8006978 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200002b8 	.word	0x200002b8

08005eb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <_sbrk+0x50>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <_sbrk+0x16>
		heap_end = &end;
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <_sbrk+0x50>)
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <_sbrk+0x54>)
 8005ec4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <_sbrk+0x50>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <_sbrk+0x50>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	466a      	mov	r2, sp
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d907      	bls.n	8005eea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005eda:	f006 fe05 	bl	800cae8 <__errno>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee8:	e006      	b.n	8005ef8 <_sbrk+0x48>
	}

	heap_end += incr;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <_sbrk+0x50>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4a03      	ldr	r2, [pc, #12]	; (8005f00 <_sbrk+0x50>)
 8005ef4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200000b0 	.word	0x200000b0
 8005f04:	20001688 	.word	0x20001688

08005f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <SystemInit+0x20>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <SystemInit+0x20>)
 8005f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f32:	490e      	ldr	r1, [pc, #56]	; (8005f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f34:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <LoopForever+0xe>)
  movs r3, #0
 8005f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f38:	e002      	b.n	8005f40 <LoopCopyDataInit>

08005f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3e:	3304      	adds	r3, #4

08005f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f44:	d3f9      	bcc.n	8005f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f46:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f48:	4c0b      	ldr	r4, [pc, #44]	; (8005f78 <LoopForever+0x16>)
  movs r3, #0
 8005f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f4c:	e001      	b.n	8005f52 <LoopFillZerobss>

08005f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f50:	3204      	adds	r2, #4

08005f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f54:	d3fb      	bcc.n	8005f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f56:	f7ff ffd7 	bl	8005f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f5a:	f006 fdcb 	bl	800caf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f5e:	f7fb f893 	bl	8001088 <main>

08005f62 <LoopForever>:

LoopForever:
    b LoopForever
 8005f62:	e7fe      	b.n	8005f62 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005f64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f6c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005f70:	0800e738 	.word	0x0800e738
  ldr r2, =_sbss
 8005f74:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8005f78:	20001684 	.word	0x20001684

08005f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f7c:	e7fe      	b.n	8005f7c <ADC1_2_IRQHandler>
	...

08005f80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <HAL_Init+0x28>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <HAL_Init+0x28>)
 8005f8a:	f043 0310 	orr.w	r3, r3, #16
 8005f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f90:	2003      	movs	r0, #3
 8005f92:	f001 fe51 	bl	8007c38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f000 f808 	bl	8005fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f9c:	f7ff fd74 	bl	8005a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40022000 	.word	0x40022000

08005fac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_InitTick+0x54>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_InitTick+0x58>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fe69 	bl	8007ca2 <HAL_SYSTICK_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00e      	b.n	8005ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b0f      	cmp	r3, #15
 8005fde:	d80a      	bhi.n	8005ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	f001 fe31 	bl	8007c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fec:	4a06      	ldr	r2, [pc, #24]	; (8006008 <HAL_InitTick+0x5c>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2000001c 	.word	0x2000001c
 8006004:	20000024 	.word	0x20000024
 8006008:	20000020 	.word	0x20000020

0800600c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_IncTick+0x20>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <HAL_IncTick+0x24>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4413      	add	r3, r2
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_IncTick+0x24>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000024 	.word	0x20000024
 8006030:	2000167c 	.word	0x2000167c

08006034 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return uwTick;  
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <HAL_GetTick+0x14>)
 800603a:	681b      	ldr	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	2000167c 	.word	0x2000167c

0800604c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006054:	f7ff ffee 	bl	8006034 <HAL_GetTick>
 8006058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d005      	beq.n	8006072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <HAL_Delay+0x40>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006072:	bf00      	nop
 8006074:	f7ff ffde 	bl	8006034 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	429a      	cmp	r2, r3
 8006082:	d8f7      	bhi.n	8006074 <HAL_Delay+0x28>
  {
  }
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000024 	.word	0x20000024

08006090 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b09a      	sub	sp, #104	; 0x68
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e1e3      	b.n	80064b4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d176      	bne.n	80061ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d152      	bne.n	80061ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fcd5 	bl	8005ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d13b      	bne.n	80061ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fb95 	bl	8007864 <ADC_Disable>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d12f      	bne.n	80061ac <HAL_ADC_Init+0xe0>
 800614c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006150:	2b00      	cmp	r3, #0
 8006152:	d12b      	bne.n	80061ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800615c:	f023 0302 	bic.w	r3, r3, #2
 8006160:	f043 0202 	orr.w	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006176:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006186:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006188:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <HAL_ADC_Init+0x308>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a92      	ldr	r2, [pc, #584]	; (80063d8 <HAL_ADC_Init+0x30c>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	0c9a      	lsrs	r2, r3, #18
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800619e:	e002      	b.n	80061a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f9      	bne.n	80061a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c8:	d110      	bne.n	80061ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f023 0312 	bic.w	r3, r3, #18
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8150 	bne.w	800649a <HAL_ADC_Init+0x3ce>
 80061fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 814b 	bne.w	800649a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800620e:	2b00      	cmp	r3, #0
 8006210:	f040 8143 	bne.w	800649a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800621c:	f043 0202 	orr.w	r2, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800622c:	d004      	beq.n	8006238 <HAL_ADC_Init+0x16c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a6a      	ldr	r2, [pc, #424]	; (80063dc <HAL_ADC_Init+0x310>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_ADC_Init+0x170>
 8006238:	4b69      	ldr	r3, [pc, #420]	; (80063e0 <HAL_ADC_Init+0x314>)
 800623a:	e000      	b.n	800623e <HAL_ADC_Init+0x172>
 800623c:	4b69      	ldr	r3, [pc, #420]	; (80063e4 <HAL_ADC_Init+0x318>)
 800623e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006248:	d102      	bne.n	8006250 <HAL_ADC_Init+0x184>
 800624a:	4b64      	ldr	r3, [pc, #400]	; (80063dc <HAL_ADC_Init+0x310>)
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e01a      	b.n	8006286 <HAL_ADC_Init+0x1ba>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a61      	ldr	r2, [pc, #388]	; (80063dc <HAL_ADC_Init+0x310>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d103      	bne.n	8006262 <HAL_ADC_Init+0x196>
 800625a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e011      	b.n	8006286 <HAL_ADC_Init+0x1ba>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a60      	ldr	r2, [pc, #384]	; (80063e8 <HAL_ADC_Init+0x31c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d102      	bne.n	8006272 <HAL_ADC_Init+0x1a6>
 800626c:	4b5f      	ldr	r3, [pc, #380]	; (80063ec <HAL_ADC_Init+0x320>)
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e009      	b.n	8006286 <HAL_ADC_Init+0x1ba>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a5d      	ldr	r2, [pc, #372]	; (80063ec <HAL_ADC_Init+0x320>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d102      	bne.n	8006282 <HAL_ADC_Init+0x1b6>
 800627c:	4b5a      	ldr	r3, [pc, #360]	; (80063e8 <HAL_ADC_Init+0x31c>)
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e001      	b.n	8006286 <HAL_ADC_Init+0x1ba>
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d108      	bne.n	80062a6 <HAL_ADC_Init+0x1da>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_ADC_Init+0x1da>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_ADC_Init+0x1dc>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11c      	bne.n	80062e6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <HAL_ADC_Init+0x202>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_ADC_Init+0x202>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_ADC_Init+0x204>
 80062ce:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80062d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7e5b      	ldrb	r3, [r3, #25]
 80062ea:	035b      	lsls	r3, r3, #13
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062f0:	2a01      	cmp	r2, #1
 80062f2:	d002      	beq.n	80062fa <HAL_ADC_Init+0x22e>
 80062f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062f8:	e000      	b.n	80062fc <HAL_ADC_Init+0x230>
 80062fa:	2200      	movs	r2, #0
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	4313      	orrs	r3, r2
 800630a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800630c:	4313      	orrs	r3, r2
 800630e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11b      	bne.n	8006352 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7e5b      	ldrb	r3, [r3, #25]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	3b01      	subs	r3, #1
 8006328:	045a      	lsls	r2, r3, #17
 800632a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632c:	4313      	orrs	r3, r2
 800632e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006332:	663b      	str	r3, [r7, #96]	; 0x60
 8006334:	e00d      	b.n	8006352 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	2b01      	cmp	r3, #1
 8006358:	d054      	beq.n	8006404 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <HAL_ADC_Init+0x31c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_ADC_Init+0x2a2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <HAL_ADC_Init+0x320>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d140      	bne.n	80063f0 <HAL_ADC_Init+0x324>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8006376:	d02a      	beq.n	80063ce <HAL_ADC_Init+0x302>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d022      	beq.n	80063c8 <HAL_ADC_Init+0x2fc>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800638a:	d01a      	beq.n	80063c2 <HAL_ADC_Init+0x2f6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8006394:	d012      	beq.n	80063bc <HAL_ADC_Init+0x2f0>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800639e:	d00a      	beq.n	80063b6 <HAL_ADC_Init+0x2ea>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80063a8:	d002      	beq.n	80063b0 <HAL_ADC_Init+0x2e4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	e023      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80063b4:	e020      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80063ba:	e01d      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80063c0:	e01a      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c6:	e017      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80063cc:	e014      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80063d2:	e011      	b.n	80063f8 <HAL_ADC_Init+0x32c>
 80063d4:	2000001c 	.word	0x2000001c
 80063d8:	431bde83 	.word	0x431bde83
 80063dc:	50000100 	.word	0x50000100
 80063e0:	50000300 	.word	0x50000300
 80063e4:	50000700 	.word	0x50000700
 80063e8:	50000400 	.word	0x50000400
 80063ec:	50000500 	.word	0x50000500
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063fc:	4313      	orrs	r3, r2
 80063fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006400:	4313      	orrs	r3, r2
 8006402:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	2b00      	cmp	r3, #0
 8006410:	d114      	bne.n	800643c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006420:	f023 0302 	bic.w	r3, r3, #2
 8006424:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7e1b      	ldrb	r3, [r3, #24]
 800642a:	039a      	lsls	r2, r3, #14
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4313      	orrs	r3, r2
 8006436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006438:	4313      	orrs	r3, r2
 800643a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <HAL_ADC_Init+0x3f0>)
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800644c:	430b      	orrs	r3, r1
 800644e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10c      	bne.n	8006472 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	f023 010f 	bic.w	r1, r3, #15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	1e5a      	subs	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
 8006470:	e007      	b.n	8006482 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 020f 	bic.w	r2, r2, #15
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f023 0303 	bic.w	r3, r3, #3
 8006490:	f043 0201 	orr.w	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40
 8006498:	e00a      	b.n	80064b0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f023 0312 	bic.w	r3, r3, #18
 80064a2:	f043 0210 	orr.w	r2, r3, #16
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80064b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3768      	adds	r7, #104	; 0x68
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	fff0c007 	.word	0xfff0c007

080064c0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 80f9 	bne.w	80066ce <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_Start+0x2a>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e0f4      	b.n	80066d4 <HAL_ADC_Start+0x214>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 f952 	bl	800779c <ADC_Enable>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 80e0 	bne.w	80066c4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006520:	d004      	beq.n	800652c <HAL_ADC_Start+0x6c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6d      	ldr	r2, [pc, #436]	; (80066dc <HAL_ADC_Start+0x21c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d106      	bne.n	800653a <HAL_ADC_Start+0x7a>
 800652c:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <HAL_ADC_Start+0x220>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <HAL_ADC_Start+0x9a>
 8006538:	e005      	b.n	8006546 <HAL_ADC_Start+0x86>
 800653a:	4b6a      	ldr	r3, [pc, #424]	; (80066e4 <HAL_ADC_Start+0x224>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_ADC_Start+0x9a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654e:	d004      	beq.n	800655a <HAL_ADC_Start+0x9a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a64      	ldr	r2, [pc, #400]	; (80066e8 <HAL_ADC_Start+0x228>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d115      	bne.n	8006586 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d036      	beq.n	80065e2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800657c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006584:	e02d      	b.n	80065e2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800659a:	d004      	beq.n	80065a6 <HAL_ADC_Start+0xe6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a4e      	ldr	r2, [pc, #312]	; (80066dc <HAL_ADC_Start+0x21c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10a      	bne.n	80065bc <HAL_ADC_Start+0xfc>
 80065a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e008      	b.n	80065ce <HAL_ADC_Start+0x10e>
 80065bc:	4b4a      	ldr	r3, [pc, #296]	; (80066e8 <HAL_ADC_Start+0x228>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d106      	bne.n	80065fe <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	f023 0206 	bic.w	r2, r3, #6
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	645a      	str	r2, [r3, #68]	; 0x44
 80065fc:	e002      	b.n	8006604 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	221c      	movs	r2, #28
 8006612:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800661c:	d004      	beq.n	8006628 <HAL_ADC_Start+0x168>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2e      	ldr	r2, [pc, #184]	; (80066dc <HAL_ADC_Start+0x21c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d106      	bne.n	8006636 <HAL_ADC_Start+0x176>
 8006628:	4b2d      	ldr	r3, [pc, #180]	; (80066e0 <HAL_ADC_Start+0x220>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03e      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 8006634:	e005      	b.n	8006642 <HAL_ADC_Start+0x182>
 8006636:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <HAL_ADC_Start+0x224>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2b00      	cmp	r3, #0
 8006640:	d037      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800664a:	d004      	beq.n	8006656 <HAL_ADC_Start+0x196>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a22      	ldr	r2, [pc, #136]	; (80066dc <HAL_ADC_Start+0x21c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d106      	bne.n	8006664 <HAL_ADC_Start+0x1a4>
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <HAL_ADC_Start+0x220>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2b05      	cmp	r3, #5
 8006660:	d027      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 8006662:	e005      	b.n	8006670 <HAL_ADC_Start+0x1b0>
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <HAL_ADC_Start+0x224>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2b05      	cmp	r3, #5
 800666e:	d020      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006678:	d004      	beq.n	8006684 <HAL_ADC_Start+0x1c4>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_ADC_Start+0x21c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d106      	bne.n	8006692 <HAL_ADC_Start+0x1d2>
 8006684:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <HAL_ADC_Start+0x220>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	2b09      	cmp	r3, #9
 800668e:	d010      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 8006690:	e005      	b.n	800669e <HAL_ADC_Start+0x1de>
 8006692:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <HAL_ADC_Start+0x224>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2b09      	cmp	r3, #9
 800669c:	d009      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a6:	d004      	beq.n	80066b2 <HAL_ADC_Start+0x1f2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <HAL_ADC_Start+0x228>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10f      	bne.n	80066d2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0204 	orr.w	r2, r2, #4
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	e006      	b.n	80066d2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066cc:	e001      	b.n	80066d2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
 80066d0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	50000100 	.word	0x50000100
 80066e0:	50000300 	.word	0x50000300
 80066e4:	50000700 	.word	0x50000700
 80066e8:	50000400 	.word	0x50000400

080066ec <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_ADC_Stop+0x1a>
 8006702:	2302      	movs	r3, #2
 8006704:	e023      	b.n	800674e <HAL_ADC_Stop+0x62>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800670e:	216c      	movs	r1, #108	; 0x6c
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f90d 	bl	8007930 <ADC_ConversionStop>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d111      	bne.n	8006744 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 f89f 	bl	8007864 <ADC_Disable>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	f043 0201 	orr.w	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b08      	cmp	r3, #8
 800676c:	d102      	bne.n	8006774 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800676e:	2308      	movs	r3, #8
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e03a      	b.n	80067ea <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800677c:	d004      	beq.n	8006788 <HAL_ADC_PollForConversion+0x30>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a72      	ldr	r2, [pc, #456]	; (800694c <HAL_ADC_PollForConversion+0x1f4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d101      	bne.n	800678c <HAL_ADC_PollForConversion+0x34>
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <HAL_ADC_PollForConversion+0x1f8>)
 800678a:	e000      	b.n	800678e <HAL_ADC_PollForConversion+0x36>
 800678c:	4b71      	ldr	r3, [pc, #452]	; (8006954 <HAL_ADC_PollForConversion+0x1fc>)
 800678e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2b00      	cmp	r3, #0
 800679a:	d112      	bne.n	80067c2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d11d      	bne.n	80067e6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f043 0220 	orr.w	r2, r3, #32
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0bf      	b.n	8006942 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e0ad      	b.n	8006942 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80067e6:	230c      	movs	r3, #12
 80067e8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f2:	d004      	beq.n	80067fe <HAL_ADC_PollForConversion+0xa6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a54      	ldr	r2, [pc, #336]	; (800694c <HAL_ADC_PollForConversion+0x1f4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d106      	bne.n	800680c <HAL_ADC_PollForConversion+0xb4>
 80067fe:	4b54      	ldr	r3, [pc, #336]	; (8006950 <HAL_ADC_PollForConversion+0x1f8>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <HAL_ADC_PollForConversion+0xd4>
 800680a:	e005      	b.n	8006818 <HAL_ADC_PollForConversion+0xc0>
 800680c:	4b51      	ldr	r3, [pc, #324]	; (8006954 <HAL_ADC_PollForConversion+0x1fc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <HAL_ADC_PollForConversion+0xd4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006820:	d004      	beq.n	800682c <HAL_ADC_PollForConversion+0xd4>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_ADC_PollForConversion+0x200>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d104      	bne.n	8006836 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	e00f      	b.n	8006856 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800683e:	d004      	beq.n	800684a <HAL_ADC_PollForConversion+0xf2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a41      	ldr	r2, [pc, #260]	; (800694c <HAL_ADC_PollForConversion+0x1f4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d102      	bne.n	8006850 <HAL_ADC_PollForConversion+0xf8>
 800684a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800684e:	e000      	b.n	8006852 <HAL_ADC_PollForConversion+0xfa>
 8006850:	4b41      	ldr	r3, [pc, #260]	; (8006958 <HAL_ADC_PollForConversion+0x200>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8006856:	f7ff fbed 	bl	8006034 <HAL_GetTick>
 800685a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800685c:	e021      	b.n	80068a2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d01d      	beq.n	80068a2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_ADC_PollForConversion+0x124>
 800686c:	f7ff fbe2 	bl	8006034 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d212      	bcs.n	80068a2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4013      	ands	r3, r2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0204 	orr.w	r2, r3, #4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e04f      	b.n	8006942 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0d6      	beq.n	800685e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d131      	bne.n	800692e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d12c      	bne.n	800692e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d125      	bne.n	800692e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d112      	bne.n	8006916 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d112      	bne.n	800692e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0201 	orr.w	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40
 8006914:	e00b      	b.n	800692e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f043 0220 	orr.w	r2, r3, #32
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	50000100 	.word	0x50000100
 8006950:	50000300 	.word	0x50000300
 8006954:	50000700 	.word	0x50000700
 8006958:	50000400 	.word	0x50000400

0800695c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006984:	2300      	movs	r3, #0
 8006986:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d106      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x30>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d00f      	beq.n	80069c8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	f040 80c0 	bne.w	8006b38 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	f040 80b8 	bne.w	8006b38 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069e8:	d004      	beq.n	80069f4 <HAL_ADC_IRQHandler+0x7c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a95      	ldr	r2, [pc, #596]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d106      	bne.n	8006a02 <HAL_ADC_IRQHandler+0x8a>
 80069f4:	4b94      	ldr	r3, [pc, #592]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d03e      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a00:	e005      	b.n	8006a0e <HAL_ADC_IRQHandler+0x96>
 8006a02:	4b92      	ldr	r3, [pc, #584]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d037      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a16:	d004      	beq.n	8006a22 <HAL_ADC_IRQHandler+0xaa>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a89      	ldr	r2, [pc, #548]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d106      	bne.n	8006a30 <HAL_ADC_IRQHandler+0xb8>
 8006a22:	4b89      	ldr	r3, [pc, #548]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d027      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a2e:	e005      	b.n	8006a3c <HAL_ADC_IRQHandler+0xc4>
 8006a30:	4b86      	ldr	r3, [pc, #536]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 031f 	and.w	r3, r3, #31
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	d020      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a44:	d004      	beq.n	8006a50 <HAL_ADC_IRQHandler+0xd8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d106      	bne.n	8006a5e <HAL_ADC_IRQHandler+0xe6>
 8006a50:	4b7d      	ldr	r3, [pc, #500]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2b09      	cmp	r3, #9
 8006a5a:	d010      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a5c:	e005      	b.n	8006a6a <HAL_ADC_IRQHandler+0xf2>
 8006a5e:	4b7b      	ldr	r3, [pc, #492]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d009      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a72:	d004      	beq.n	8006a7e <HAL_ADC_IRQHandler+0x106>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a75      	ldr	r2, [pc, #468]	; (8006c50 <HAL_ADC_IRQHandler+0x2d8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d104      	bne.n	8006a88 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e00f      	b.n	8006aa8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a90:	d004      	beq.n	8006a9c <HAL_ADC_IRQHandler+0x124>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d102      	bne.n	8006aa2 <HAL_ADC_IRQHandler+0x12a>
 8006a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006aa0:	e000      	b.n	8006aa4 <HAL_ADC_IRQHandler+0x12c>
 8006aa2:	4b6b      	ldr	r3, [pc, #428]	; (8006c50 <HAL_ADC_IRQHandler+0x2d8>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d139      	bne.n	8006b2a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d134      	bne.n	8006b2a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d12d      	bne.n	8006b2a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11a      	bne.n	8006b12 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 020c 	bic.w	r2, r2, #12
 8006aea:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d112      	bne.n	8006b2a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f043 0201 	orr.w	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8006b10:	e00b      	b.n	8006b2a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0210 	orr.w	r2, r3, #16
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f043 0201 	orr.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fab0 	bl	8006090 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	220c      	movs	r2, #12
 8006b36:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d106      	bne.n	8006b54 <HAL_ADC_IRQHandler+0x1dc>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d00f      	beq.n	8006b74 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	f040 813c 	bne.w	8006ddc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	f040 8134 	bne.w	8006ddc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b88:	d004      	beq.n	8006b94 <HAL_ADC_IRQHandler+0x21c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d106      	bne.n	8006ba2 <HAL_ADC_IRQHandler+0x22a>
 8006b94:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03e      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006ba0:	e005      	b.n	8006bae <HAL_ADC_IRQHandler+0x236>
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d037      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb6:	d004      	beq.n	8006bc2 <HAL_ADC_IRQHandler+0x24a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d106      	bne.n	8006bd0 <HAL_ADC_IRQHandler+0x258>
 8006bc2:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d027      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006bce:	e005      	b.n	8006bdc <HAL_ADC_IRQHandler+0x264>
 8006bd0:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d020      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006be4:	d004      	beq.n	8006bf0 <HAL_ADC_IRQHandler+0x278>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d106      	bne.n	8006bfe <HAL_ADC_IRQHandler+0x286>
 8006bf0:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <HAL_ADC_IRQHandler+0x2d0>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d010      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006bfc:	e005      	b.n	8006c0a <HAL_ADC_IRQHandler+0x292>
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <HAL_ADC_IRQHandler+0x2d4>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d009      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c12:	d004      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x2a6>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <HAL_ADC_IRQHandler+0x2d8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d104      	bne.n	8006c28 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	e018      	b.n	8006c5a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c30:	d004      	beq.n	8006c3c <HAL_ADC_IRQHandler+0x2c4>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <HAL_ADC_IRQHandler+0x2cc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10b      	bne.n	8006c54 <HAL_ADC_IRQHandler+0x2dc>
 8006c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c40:	e009      	b.n	8006c56 <HAL_ADC_IRQHandler+0x2de>
 8006c42:	bf00      	nop
 8006c44:	50000100 	.word	0x50000100
 8006c48:	50000300 	.word	0x50000300
 8006c4c:	50000700 	.word	0x50000700
 8006c50:	50000400 	.word	0x50000400
 8006c54:	4b9d      	ldr	r3, [pc, #628]	; (8006ecc <HAL_ADC_IRQHandler+0x554>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80b2 	bne.w	8006dce <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 80a5 	bne.w	8006dce <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 809f 	bne.w	8006dce <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	f040 8097 	bne.w	8006dce <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca8:	d004      	beq.n	8006cb4 <HAL_ADC_IRQHandler+0x33c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a88      	ldr	r2, [pc, #544]	; (8006ed0 <HAL_ADC_IRQHandler+0x558>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d106      	bne.n	8006cc2 <HAL_ADC_IRQHandler+0x34a>
 8006cb4:	4b87      	ldr	r3, [pc, #540]	; (8006ed4 <HAL_ADC_IRQHandler+0x55c>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d03e      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006cc0:	e005      	b.n	8006cce <HAL_ADC_IRQHandler+0x356>
 8006cc2:	4b85      	ldr	r3, [pc, #532]	; (8006ed8 <HAL_ADC_IRQHandler+0x560>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d037      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cd6:	d004      	beq.n	8006ce2 <HAL_ADC_IRQHandler+0x36a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a7c      	ldr	r2, [pc, #496]	; (8006ed0 <HAL_ADC_IRQHandler+0x558>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d106      	bne.n	8006cf0 <HAL_ADC_IRQHandler+0x378>
 8006ce2:	4b7c      	ldr	r3, [pc, #496]	; (8006ed4 <HAL_ADC_IRQHandler+0x55c>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	2b06      	cmp	r3, #6
 8006cec:	d027      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006cee:	e005      	b.n	8006cfc <HAL_ADC_IRQHandler+0x384>
 8006cf0:	4b79      	ldr	r3, [pc, #484]	; (8006ed8 <HAL_ADC_IRQHandler+0x560>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d020      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d04:	d004      	beq.n	8006d10 <HAL_ADC_IRQHandler+0x398>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a71      	ldr	r2, [pc, #452]	; (8006ed0 <HAL_ADC_IRQHandler+0x558>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d106      	bne.n	8006d1e <HAL_ADC_IRQHandler+0x3a6>
 8006d10:	4b70      	ldr	r3, [pc, #448]	; (8006ed4 <HAL_ADC_IRQHandler+0x55c>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	d010      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006d1c:	e005      	b.n	8006d2a <HAL_ADC_IRQHandler+0x3b2>
 8006d1e:	4b6e      	ldr	r3, [pc, #440]	; (8006ed8 <HAL_ADC_IRQHandler+0x560>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	d009      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d32:	d004      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x3c6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <HAL_ADC_IRQHandler+0x554>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d104      	bne.n	8006d48 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e00f      	b.n	8006d68 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d50:	d004      	beq.n	8006d5c <HAL_ADC_IRQHandler+0x3e4>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a5e      	ldr	r2, [pc, #376]	; (8006ed0 <HAL_ADC_IRQHandler+0x558>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d102      	bne.n	8006d62 <HAL_ADC_IRQHandler+0x3ea>
 8006d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d60:	e000      	b.n	8006d64 <HAL_ADC_IRQHandler+0x3ec>
 8006d62:	4b5a      	ldr	r3, [pc, #360]	; (8006ecc <HAL_ADC_IRQHandler+0x554>)
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d12d      	bne.n	8006dce <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11a      	bne.n	8006db6 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d8e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d112      	bne.n	8006dce <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	641a      	str	r2, [r3, #64]	; 0x40
 8006db4:	e00b      	b.n	8006dce <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0210 	orr.w	r2, r3, #16
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8de 	bl	8006f90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2260      	movs	r2, #96	; 0x60
 8006dda:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	2b80      	cmp	r3, #128	; 0x80
 8006de8:	d113      	bne.n	8006e12 <HAL_ADC_IRQHandler+0x49a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df4:	2b80      	cmp	r3, #128	; 0x80
 8006df6:	d10c      	bne.n	8006e12 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff f94d 	bl	80060a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e20:	d115      	bne.n	8006e4e <HAL_ADC_IRQHandler+0x4d6>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e30:	d10d      	bne.n	8006e4e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f8ba 	bl	8006fb8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e4c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d115      	bne.n	8006e8a <HAL_ADC_IRQHandler+0x512>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6c:	d10d      	bne.n	8006e8a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8a6 	bl	8006fcc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d151      	bne.n	8006f3c <HAL_ADC_IRQHandler+0x5c4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d14a      	bne.n	8006f3c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d102      	bne.n	8006eb4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	e02d      	b.n	8006f10 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ebc:	d004      	beq.n	8006ec8 <HAL_ADC_IRQHandler+0x550>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <HAL_ADC_IRQHandler+0x558>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d109      	bne.n	8006edc <HAL_ADC_IRQHandler+0x564>
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <HAL_ADC_IRQHandler+0x55c>)
 8006eca:	e008      	b.n	8006ede <HAL_ADC_IRQHandler+0x566>
 8006ecc:	50000400 	.word	0x50000400
 8006ed0:	50000100 	.word	0x50000100
 8006ed4:	50000300 	.word	0x50000300
 8006ed8:	50000700 	.word	0x50000700
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_ADC_IRQHandler+0x614>)
 8006ede:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d10a      	bne.n	8006f10 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e007      	b.n	8006f10 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d10e      	bne.n	8006f34 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	f043 0202 	orr.w	r2, r3, #2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff f8c2 	bl	80060b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4a:	d11b      	bne.n	8006f84 <HAL_ADC_IRQHandler+0x60c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5a:	d113      	bne.n	8006f84 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f043 0208 	orr.w	r2, r3, #8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f810 	bl	8006fa4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8006f84:	bf00      	nop
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	50000700 	.word	0x50000700

08006f90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b09b      	sub	sp, #108	; 0x6c
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_ADC_ConfigChannel+0x22>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e2cb      	b.n	800759a <HAL_ADC_ConfigChannel+0x5ba>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 82af 	bne.w	8007578 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d81c      	bhi.n	800705c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	461a      	mov	r2, r3
 8007036:	231f      	movs	r3, #31
 8007038:	4093      	lsls	r3, r2
 800703a:	43db      	mvns	r3, r3
 800703c:	4019      	ands	r1, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	fa00 f203 	lsl.w	r2, r0, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
 800705a:	e063      	b.n	8007124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b09      	cmp	r3, #9
 8007062:	d81e      	bhi.n	80070a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	3b1e      	subs	r3, #30
 8007078:	221f      	movs	r2, #31
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	4019      	ands	r1, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4413      	add	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	3b1e      	subs	r3, #30
 8007094:	fa00 f203 	lsl.w	r2, r0, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	635a      	str	r2, [r3, #52]	; 0x34
 80070a0:	e040      	b.n	8007124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b0e      	cmp	r3, #14
 80070a8:	d81e      	bhi.n	80070e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	3b3c      	subs	r3, #60	; 0x3c
 80070be:	221f      	movs	r2, #31
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	4019      	ands	r1, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	3b3c      	subs	r3, #60	; 0x3c
 80070da:	fa00 f203 	lsl.w	r2, r0, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
 80070e6:	e01d      	b.n	8007124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	3b5a      	subs	r3, #90	; 0x5a
 80070fc:	221f      	movs	r2, #31
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43db      	mvns	r3, r3
 8007104:	4019      	ands	r1, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	3b5a      	subs	r3, #90	; 0x5a
 8007118:	fa00 f203 	lsl.w	r2, r0, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b00      	cmp	r3, #0
 8007130:	f040 80e5 	bne.w	80072fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b09      	cmp	r3, #9
 800713a:	d91c      	bls.n	8007176 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6999      	ldr	r1, [r3, #24]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4413      	add	r3, r2
 800714c:	3b1e      	subs	r3, #30
 800714e:	2207      	movs	r2, #7
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	4019      	ands	r1, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6898      	ldr	r0, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	4413      	add	r3, r2
 8007166:	3b1e      	subs	r3, #30
 8007168:	fa00 f203 	lsl.w	r2, r0, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	619a      	str	r2, [r3, #24]
 8007174:	e019      	b.n	80071aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6959      	ldr	r1, [r3, #20]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	4413      	add	r3, r2
 8007186:	2207      	movs	r2, #7
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	43db      	mvns	r3, r3
 800718e:	4019      	ands	r1, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6898      	ldr	r0, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	4413      	add	r3, r2
 800719e:	fa00 f203 	lsl.w	r2, r0, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	08db      	lsrs	r3, r3, #3
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	fa02 f303 	lsl.w	r3, r2, r3
 80071c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d84f      	bhi.n	800726c <HAL_ADC_ConfigChannel+0x28c>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	08007207 	.word	0x08007207
 80071dc:	08007229 	.word	0x08007229
 80071e0:	0800724b 	.word	0x0800724b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80071ea:	4b9f      	ldr	r3, [pc, #636]	; (8007468 <HAL_ADC_ConfigChannel+0x488>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	0691      	lsls	r1, r2, #26
 80071f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071f6:	430a      	orrs	r2, r1
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007202:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007204:	e07e      	b.n	8007304 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800720c:	4b96      	ldr	r3, [pc, #600]	; (8007468 <HAL_ADC_ConfigChannel+0x488>)
 800720e:	4013      	ands	r3, r2
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	0691      	lsls	r1, r2, #26
 8007216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007218:	430a      	orrs	r2, r1
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007224:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007226:	e06d      	b.n	8007304 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800722e:	4b8e      	ldr	r3, [pc, #568]	; (8007468 <HAL_ADC_ConfigChannel+0x488>)
 8007230:	4013      	ands	r3, r2
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	0691      	lsls	r1, r2, #26
 8007238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800723a:	430a      	orrs	r2, r1
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007246:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007248:	e05c      	b.n	8007304 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007250:	4b85      	ldr	r3, [pc, #532]	; (8007468 <HAL_ADC_ConfigChannel+0x488>)
 8007252:	4013      	ands	r3, r2
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	0691      	lsls	r1, r2, #26
 800725a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800725c:	430a      	orrs	r2, r1
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007268:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800726a:	e04b      	b.n	8007304 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	069b      	lsls	r3, r3, #26
 800727c:	429a      	cmp	r2, r3
 800727e:	d107      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800728e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	069b      	lsls	r3, r3, #26
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d107      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80072b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	069b      	lsls	r3, r3, #26
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d107      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80072d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	069b      	lsls	r3, r3, #26
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d10a      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80072fc:	e001      	b.n	8007302 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <HAL_ADC_ConfigChannel+0x324>
      break;
 8007302:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b01      	cmp	r3, #1
 8007310:	d108      	bne.n	8007324 <HAL_ADC_ConfigChannel+0x344>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_ADC_ConfigChannel+0x344>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_ADC_ConfigChannel+0x346>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 8131 	bne.w	800758e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d00f      	beq.n	8007354 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2201      	movs	r2, #1
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	43da      	mvns	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	400a      	ands	r2, r1
 800734e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007352:	e049      	b.n	80073e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b09      	cmp	r3, #9
 8007374:	d91c      	bls.n	80073b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6999      	ldr	r1, [r3, #24]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	3b1b      	subs	r3, #27
 8007388:	2207      	movs	r2, #7
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	4019      	ands	r1, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6898      	ldr	r0, [r3, #8]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	3b1b      	subs	r3, #27
 80073a2:	fa00 f203 	lsl.w	r2, r0, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	619a      	str	r2, [r3, #24]
 80073ae:	e01b      	b.n	80073e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	2207      	movs	r2, #7
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	43db      	mvns	r3, r3
 80073ca:	4019      	ands	r1, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	6898      	ldr	r0, [r3, #8]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	4613      	mov	r3, r2
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	4413      	add	r3, r2
 80073dc:	fa00 f203 	lsl.w	r2, r0, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073f0:	d004      	beq.n	80073fc <HAL_ADC_ConfigChannel+0x41c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_ADC_ConfigChannel+0x48c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <HAL_ADC_ConfigChannel+0x420>
 80073fc:	4b1c      	ldr	r3, [pc, #112]	; (8007470 <HAL_ADC_ConfigChannel+0x490>)
 80073fe:	e000      	b.n	8007402 <HAL_ADC_ConfigChannel+0x422>
 8007400:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <HAL_ADC_ConfigChannel+0x494>)
 8007402:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b10      	cmp	r3, #16
 800740a:	d105      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800740c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d015      	beq.n	8007444 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800741c:	2b11      	cmp	r3, #17
 800741e:	d105      	bne.n	800742c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8007420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8007430:	2b12      	cmp	r3, #18
 8007432:	f040 80ac 	bne.w	800758e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8007436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 80a5 	bne.w	800758e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800744c:	d102      	bne.n	8007454 <HAL_ADC_ConfigChannel+0x474>
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <HAL_ADC_ConfigChannel+0x48c>)
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e023      	b.n	800749c <HAL_ADC_ConfigChannel+0x4bc>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a04      	ldr	r2, [pc, #16]	; (800746c <HAL_ADC_ConfigChannel+0x48c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d10c      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x498>
 800745e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e01a      	b.n	800749c <HAL_ADC_ConfigChannel+0x4bc>
 8007466:	bf00      	nop
 8007468:	83fff000 	.word	0x83fff000
 800746c:	50000100 	.word	0x50000100
 8007470:	50000300 	.word	0x50000300
 8007474:	50000700 	.word	0x50000700
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a4a      	ldr	r2, [pc, #296]	; (80075a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d102      	bne.n	8007488 <HAL_ADC_ConfigChannel+0x4a8>
 8007482:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <HAL_ADC_ConfigChannel+0x5cc>)
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	e009      	b.n	800749c <HAL_ADC_ConfigChannel+0x4bc>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a47      	ldr	r2, [pc, #284]	; (80075ac <HAL_ADC_ConfigChannel+0x5cc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d102      	bne.n	8007498 <HAL_ADC_ConfigChannel+0x4b8>
 8007492:	4b45      	ldr	r3, [pc, #276]	; (80075a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e001      	b.n	800749c <HAL_ADC_ConfigChannel+0x4bc>
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d108      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x4dc>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x4dc>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <HAL_ADC_ConfigChannel+0x4de>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d150      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80074c2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d010      	beq.n	80074ea <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d107      	bne.n	80074e4 <HAL_ADC_ConfigChannel+0x504>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_ADC_ConfigChannel+0x504>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <HAL_ADC_ConfigChannel+0x506>
 80074e4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d13c      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d11d      	bne.n	800752e <HAL_ADC_ConfigChannel+0x54e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fa:	d118      	bne.n	800752e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80074fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007506:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007508:	4b29      	ldr	r3, [pc, #164]	; (80075b0 <HAL_ADC_ConfigChannel+0x5d0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a29      	ldr	r2, [pc, #164]	; (80075b4 <HAL_ADC_ConfigChannel+0x5d4>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	0c9a      	lsrs	r2, r3, #18
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800751e:	e002      	b.n	8007526 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3b01      	subs	r3, #1
 8007524:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f9      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800752c:	e02e      	b.n	800758c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b11      	cmp	r3, #17
 8007534:	d10b      	bne.n	800754e <HAL_ADC_ConfigChannel+0x56e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800753e:	d106      	bne.n	800754e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8007540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800754c:	e01e      	b.n	800758c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b12      	cmp	r3, #18
 8007554:	d11a      	bne.n	800758c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800755e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007560:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007562:	e013      	b.n	800758c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007576:	e00a      	b.n	800758e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800758a:	e000      	b.n	800758e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800758c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007596:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800759a:	4618      	mov	r0, r3
 800759c:	376c      	adds	r7, #108	; 0x6c
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	50000400 	.word	0x50000400
 80075ac:	50000500 	.word	0x50000500
 80075b0:	2000001c 	.word	0x2000001c
 80075b4:	431bde83 	.word	0x431bde83

080075b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b099      	sub	sp, #100	; 0x64
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d0:	d102      	bne.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80075d2:	4b6d      	ldr	r3, [pc, #436]	; (8007788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	e01a      	b.n	800760e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6a      	ldr	r2, [pc, #424]	; (8007788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d103      	bne.n	80075ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80075e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	e011      	b.n	800760e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a67      	ldr	r2, [pc, #412]	; (800778c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d102      	bne.n	80075fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80075f4:	4b66      	ldr	r3, [pc, #408]	; (8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80075f6:	60bb      	str	r3, [r7, #8]
 80075f8:	e009      	b.n	800760e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a64      	ldr	r2, [pc, #400]	; (8007790 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d102      	bne.n	800760a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007604:	4b61      	ldr	r3, [pc, #388]	; (800778c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007606:	60bb      	str	r3, [r7, #8]
 8007608:	e001      	b.n	800760e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0b0      	b.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8007622:	2302      	movs	r3, #2
 8007624:	e0a9      	b.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	f040 808d 	bne.w	8007758 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 8086 	bne.w	8007758 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007654:	d004      	beq.n	8007660 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a4b      	ldr	r2, [pc, #300]	; (8007788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d101      	bne.n	8007664 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007660:	4b4c      	ldr	r3, [pc, #304]	; (8007794 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8007662:	e000      	b.n	8007666 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007664:	4b4c      	ldr	r3, [pc, #304]	; (8007798 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8007666:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d040      	beq.n	80076f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007682:	035b      	lsls	r3, r3, #13
 8007684:	430b      	orrs	r3, r1
 8007686:	431a      	orrs	r2, r3
 8007688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d108      	bne.n	80076ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d15c      	bne.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d107      	bne.n	80076ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80076ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d14b      	bne.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80076d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80076dc:	f023 030f 	bic.w	r3, r3, #15
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	6811      	ldr	r1, [r2, #0]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	6892      	ldr	r2, [r2, #8]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	431a      	orrs	r2, r3
 80076ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80076f0:	e03c      	b.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80076f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d108      	bne.n	800771e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d123      	bne.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d107      	bne.n	8007740 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8007740:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007742:	2b00      	cmp	r3, #0
 8007744:	d112      	bne.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8007746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800774e:	f023 030f 	bic.w	r3, r3, #15
 8007752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007754:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007756:	e009      	b.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800776a:	e000      	b.n	800776e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800776c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800777a:	4618      	mov	r0, r3
 800777c:	3764      	adds	r7, #100	; 0x64
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	50000100 	.word	0x50000100
 800778c:	50000400 	.word	0x50000400
 8007790:	50000500 	.word	0x50000500
 8007794:	50000300 	.word	0x50000300
 8007798:	50000700 	.word	0x50000700

0800779c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d108      	bne.n	80077c8 <ADC_Enable+0x2c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <ADC_Enable+0x2c>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <ADC_Enable+0x2e>
 80077c8:	2300      	movs	r3, #0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d143      	bne.n	8007856 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	4b22      	ldr	r3, [pc, #136]	; (8007860 <ADC_Enable+0xc4>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00d      	beq.n	80077f8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	f043 0210 	orr.w	r2, r3, #16
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	f043 0201 	orr.w	r2, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e02f      	b.n	8007858 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8007808:	f7fe fc14 	bl	8006034 <HAL_GetTick>
 800780c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800780e:	e01b      	b.n	8007848 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007810:	f7fe fc10 	bl	8006034 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d914      	bls.n	8007848 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d00d      	beq.n	8007848 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	f043 0210 	orr.w	r2, r3, #16
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	f043 0201 	orr.w	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e007      	b.n	8007858 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b01      	cmp	r3, #1
 8007854:	d1dc      	bne.n	8007810 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	8000003f 	.word	0x8000003f

08007864 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d108      	bne.n	8007890 <ADC_Disable+0x2c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <ADC_Disable+0x2c>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <ADC_Disable+0x2e>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d047      	beq.n	8007926 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 030d 	and.w	r3, r3, #13
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10f      	bne.n	80078c4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0202 	orr.w	r2, r2, #2
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2203      	movs	r2, #3
 80078ba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80078bc:	f7fe fbba 	bl	8006034 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80078c2:	e029      	b.n	8007918 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	f043 0210 	orr.w	r2, r3, #16
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d4:	f043 0201 	orr.w	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e023      	b.n	8007928 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078e0:	f7fe fba8 	bl	8006034 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d914      	bls.n	8007918 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d10d      	bne.n	8007918 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f043 0210 	orr.w	r2, r3, #16
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e007      	b.n	8007928 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d0dc      	beq.n	80078e0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 030c 	and.w	r3, r3, #12
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 809a 	beq.w	8007a8a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007964:	d12a      	bne.n	80079bc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800796a:	2b01      	cmp	r3, #1
 800796c:	d126      	bne.n	80079bc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8007972:	2b01      	cmp	r3, #1
 8007974:	d122      	bne.n	80079bc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8007976:	230c      	movs	r3, #12
 8007978:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800797a:	e014      	b.n	80079a6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4a45      	ldr	r2, [pc, #276]	; (8007a94 <ADC_ConversionStop+0x164>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d90d      	bls.n	80079a0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	f043 0210 	orr.w	r2, r3, #16
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	f043 0201 	orr.w	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e075      	b.n	8007a8c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	3301      	adds	r3, #1
 80079a4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	d1e3      	bne.n	800797c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2240      	movs	r2, #64	; 0x40
 80079ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b60      	cmp	r3, #96	; 0x60
 80079c0:	d015      	beq.n	80079ee <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d10e      	bne.n	80079ee <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0210 	orr.w	r2, r2, #16
 80079ec:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b0c      	cmp	r3, #12
 80079f2:	d015      	beq.n	8007a20 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d10e      	bne.n	8007a20 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d107      	bne.n	8007a20 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0220 	orr.w	r2, r2, #32
 8007a1e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b60      	cmp	r3, #96	; 0x60
 8007a24:	d004      	beq.n	8007a30 <ADC_ConversionStop+0x100>
 8007a26:	2b6c      	cmp	r3, #108	; 0x6c
 8007a28:	d105      	bne.n	8007a36 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	617b      	str	r3, [r7, #20]
        break;
 8007a2e:	e005      	b.n	8007a3c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007a30:	2308      	movs	r3, #8
 8007a32:	617b      	str	r3, [r7, #20]
        break;
 8007a34:	e002      	b.n	8007a3c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007a36:	2304      	movs	r3, #4
 8007a38:	617b      	str	r3, [r7, #20]
        break;
 8007a3a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007a3c:	f7fe fafa 	bl	8006034 <HAL_GetTick>
 8007a40:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007a42:	e01b      	b.n	8007a7c <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007a44:	f7fe faf6 	bl	8006034 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b0b      	cmp	r3, #11
 8007a50:	d914      	bls.n	8007a7c <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	f043 0210 	orr.w	r2, r3, #16
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a70:	f043 0201 	orr.w	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e007      	b.n	8007a8c <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1dc      	bne.n	8007a44 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	000993ff 	.word	0x000993ff

08007a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aca:	4a04      	ldr	r2, [pc, #16]	; (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	60d3      	str	r3, [r2, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	0a1b      	lsrs	r3, r3, #8
 8007aea:	f003 0307 	and.w	r3, r3, #7
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	e000ed00 	.word	0xe000ed00

08007afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	db0b      	blt.n	8007b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	f003 021f 	and.w	r2, r3, #31
 8007b14:	4907      	ldr	r1, [pc, #28]	; (8007b34 <__NVIC_EnableIRQ+0x38>)
 8007b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	e000e100 	.word	0xe000e100

08007b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db0a      	blt.n	8007b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	490c      	ldr	r1, [pc, #48]	; (8007b84 <__NVIC_SetPriority+0x4c>)
 8007b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b56:	0112      	lsls	r2, r2, #4
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b60:	e00a      	b.n	8007b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	4908      	ldr	r1, [pc, #32]	; (8007b88 <__NVIC_SetPriority+0x50>)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	3b04      	subs	r3, #4
 8007b70:	0112      	lsls	r2, r2, #4
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	440b      	add	r3, r1
 8007b76:	761a      	strb	r2, [r3, #24]
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	e000e100 	.word	0xe000e100
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	; 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f1c3 0307 	rsb	r3, r3, #7
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	bf28      	it	cs
 8007baa:	2304      	movcs	r3, #4
 8007bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d902      	bls.n	8007bbc <NVIC_EncodePriority+0x30>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3b03      	subs	r3, #3
 8007bba:	e000      	b.n	8007bbe <NVIC_EncodePriority+0x32>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	401a      	ands	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	43d9      	mvns	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be4:	4313      	orrs	r3, r2
         );
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3724      	adds	r7, #36	; 0x24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c04:	d301      	bcc.n	8007c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c06:	2301      	movs	r3, #1
 8007c08:	e00f      	b.n	8007c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	; (8007c34 <SysTick_Config+0x40>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c12:	210f      	movs	r1, #15
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	f7ff ff8e 	bl	8007b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <SysTick_Config+0x40>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c22:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <SysTick_Config+0x40>)
 8007c24:	2207      	movs	r2, #7
 8007c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	e000e010 	.word	0xe000e010

08007c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ff29 	bl	8007a98 <__NVIC_SetPriorityGrouping>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	4603      	mov	r3, r0
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c60:	f7ff ff3e 	bl	8007ae0 <__NVIC_GetPriorityGrouping>
 8007c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f7ff ff8e 	bl	8007b8c <NVIC_EncodePriority>
 8007c70:	4602      	mov	r2, r0
 8007c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff ff5d 	bl	8007b38 <__NVIC_SetPriority>
}
 8007c7e:	bf00      	nop
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff ff31 	bl	8007afc <__NVIC_EnableIRQ>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ffa2 	bl	8007bf4 <SysTick_Config>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e014      	b.n	8007cf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	791b      	ldrb	r3, [r3, #4]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fd ff3f 	bl	8005b60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	43da      	mvns	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	400a      	ands	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43da      	mvns	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	400a      	ands	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	2201      	movs	r2, #1
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	43da      	mvns	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	400a      	ands	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10f      	bne.n	8007d9a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fae3 	bl	800834a <HAL_DMA_Abort>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	e00e      	b.n	8007db8 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fad3 	bl	800834a <HAL_DMA_Abort>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007db6:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	711a      	strb	r2, [r3, #4]
 8007dc4:	e002      	b.n	8007dcc <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	3308      	adds	r3, #8
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	e004      	b.n	8007e46 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4413      	add	r3, r2
 8007e42:	3314      	adds	r3, #20
 8007e44:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_DAC_Start+0x16>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e039      	b.n	8007ee6 <HAL_DAC_Start+0x8a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	2201      	movs	r2, #1
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10f      	bne.n	8007eb8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007ea2:	2b3c      	cmp	r3, #60	; 0x3c
 8007ea4:	d118      	bne.n	8007ed8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0201 	orr.w	r2, r2, #1
 8007eb4:	605a      	str	r2, [r3, #4]
 8007eb6:	e00f      	b.n	8007ed8 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007ec2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007ec6:	d107      	bne.n	8007ed8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0202 	orr.w	r2, r2, #2
 8007ed6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	795b      	ldrb	r3, [r3, #5]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_DAC_Start_DMA+0x1e>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e08e      	b.n	8008030 <HAL_DAC_Start_DMA+0x13c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d12a      	bne.n	8007f7a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	4a43      	ldr	r2, [pc, #268]	; (8008038 <HAL_DAC_Start_DMA+0x144>)
 8007f2a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4a42      	ldr	r2, [pc, #264]	; (800803c <HAL_DAC_Start_DMA+0x148>)
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4a41      	ldr	r2, [pc, #260]	; (8008040 <HAL_DAC_Start_DMA+0x14c>)
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d009      	beq.n	8007f66 <HAL_DAC_Start_DMA+0x72>
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	d00c      	beq.n	8007f70 <HAL_DAC_Start_DMA+0x7c>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d000      	beq.n	8007f5c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007f5a:	e039      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	617b      	str	r3, [r7, #20]
        break;
 8007f64:	e034      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	617b      	str	r3, [r7, #20]
        break;
 8007f6e:	e02f      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3310      	adds	r3, #16
 8007f76:	617b      	str	r3, [r7, #20]
        break;
 8007f78:	e02a      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	4a31      	ldr	r2, [pc, #196]	; (8008044 <HAL_DAC_Start_DMA+0x150>)
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	4a30      	ldr	r2, [pc, #192]	; (8008048 <HAL_DAC_Start_DMA+0x154>)
 8007f88:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	4a2f      	ldr	r2, [pc, #188]	; (800804c <HAL_DAC_Start_DMA+0x158>)
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007fa0:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d009      	beq.n	8007fbc <HAL_DAC_Start_DMA+0xc8>
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d00c      	beq.n	8007fc6 <HAL_DAC_Start_DMA+0xd2>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d000      	beq.n	8007fb2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007fb0:	e00e      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	617b      	str	r3, [r7, #20]
        break;
 8007fba:	e009      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3318      	adds	r3, #24
 8007fc2:	617b      	str	r3, [r7, #20]
        break;
 8007fc4:	e004      	b.n	8007fd0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	331c      	adds	r3, #28
 8007fcc:	617b      	str	r3, [r7, #20]
        break;
 8007fce:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6898      	ldr	r0, [r3, #8]
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	f000 f94c 	bl	800828c <HAL_DMA_Start_IT>
 8007ff4:	e00e      	b.n	8008014 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008004:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68d8      	ldr	r0, [r3, #12]
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	f000 f93c 	bl	800828c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	409a      	lsls	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	08008127 	.word	0x08008127
 800803c:	08008149 	.word	0x08008149
 8008040:	08008165 	.word	0x08008165
 8008044:	08008193 	.word	0x08008193
 8008048:	080081b5 	.word	0x080081b5
 800804c:	080081d1 	.word	0x080081d1

08008050 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	2300      	movs	r3, #0
 8008062:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	795b      	ldrb	r3, [r3, #5]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_DAC_ConfigChannel+0x20>
 800806c:	2302      	movs	r3, #2
 800806e:	e036      	b.n	80080de <HAL_DAC_ConfigChannel+0x8e>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2202      	movs	r2, #2
 800807a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8008084:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43db      	mvns	r3, r3
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4013      	ands	r3, r2
 8008094:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6819      	ldr	r1, [r3, #0]
 80080be:	22c0      	movs	r2, #192	; 0xc0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	fa02 f303 	lsl.w	r3, r2, r3
 80080c6:	43da      	mvns	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	400a      	ands	r2, r1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fe4e 	bl	8007dd6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	711a      	strb	r2, [r3, #4]
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fe47 	bl	8007dea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f043 0204 	orr.w	r2, r3, #4
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fe3d 	bl	8007dfe <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	711a      	strb	r2, [r3, #4]
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ffa2 	bl	80080ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	711a      	strb	r2, [r3, #4]
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7ff ff9b 	bl	80080fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f043 0204 	orr.w	r2, r3, #4
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff ff91 	bl	8008112 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	711a      	strb	r2, [r3, #4]
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e037      	b.n	8008284 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800822a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800822e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9b8 	bl	80085dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}  
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_DMA_Start_IT+0x20>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e04a      	b.n	8008342 <HAL_DMA_Start_IT+0xb6>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d13a      	bne.n	8008334 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f94b 	bl	800857e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 020e 	orr.w	r2, r2, #14
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e00f      	b.n	8008322 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 020a 	orr.w	r2, r2, #10
 8008310:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0204 	bic.w	r2, r2, #4
 8008320:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	e005      	b.n	8008340 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800833c:	2302      	movs	r3, #2
 800833e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8008340:	7dfb      	ldrb	r3, [r7, #23]
} 
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008358:	2b02      	cmp	r3, #2
 800835a:	d008      	beq.n	800836e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2204      	movs	r2, #4
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e020      	b.n	80083b0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 020e 	bic.w	r2, r2, #14
 800837c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	2101      	movs	r1, #1
 8008398:	fa01 f202 	lsl.w	r2, r1, r2
 800839c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d005      	beq.n	80083de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2204      	movs	r2, #4
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e027      	b.n	800842e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 020e 	bic.w	r2, r2, #14
 80083ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0201 	bic.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008406:	2101      	movs	r1, #1
 8008408:	fa01 f202 	lsl.w	r2, r1, r2
 800840c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
    } 
  }
  return status;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	2204      	movs	r2, #4
 8008456:	409a      	lsls	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d024      	beq.n	80084aa <HAL_DMA_IRQHandler+0x72>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01f      	beq.n	80084aa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0204 	bic.w	r2, r2, #4
 8008486:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008490:	2104      	movs	r1, #4
 8008492:	fa01 f202 	lsl.w	r2, r1, r2
 8008496:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d06a      	beq.n	8008576 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80084a8:	e065      	b.n	8008576 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	2202      	movs	r2, #2
 80084b0:	409a      	lsls	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02c      	beq.n	8008514 <HAL_DMA_IRQHandler+0xdc>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d027      	beq.n	8008514 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10b      	bne.n	80084ea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 020a 	bic.w	r2, r2, #10
 80084e0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	2102      	movs	r1, #2
 80084f4:	fa01 f202 	lsl.w	r2, r1, r2
 80084f8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d035      	beq.n	8008576 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8008512:	e030      	b.n	8008576 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	2208      	movs	r2, #8
 800851a:	409a      	lsls	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d028      	beq.n	8008576 <HAL_DMA_IRQHandler+0x13e>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b00      	cmp	r3, #0
 800852c:	d023      	beq.n	8008576 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 020e 	bic.w	r2, r2, #14
 800853c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	2101      	movs	r1, #1
 8008548:	fa01 f202 	lsl.w	r2, r1, r2
 800854c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
    }
  }
}  
 8008574:	e7ff      	b.n	8008576 <HAL_DMA_IRQHandler+0x13e>
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	2101      	movs	r1, #1
 8008596:	fa01 f202 	lsl.w	r2, r1, r2
 800859a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d108      	bne.n	80085be <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085bc:	e007      	b.n	80085ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	60da      	str	r2, [r3, #12]
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <DMA_CalcBaseAndBitshift+0x60>)
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d80f      	bhi.n	8008610 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <DMA_CalcBaseAndBitshift+0x64>)
 80085f8:	4413      	add	r3, r2
 80085fa:	4a12      	ldr	r2, [pc, #72]	; (8008644 <DMA_CalcBaseAndBitshift+0x68>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a0f      	ldr	r2, [pc, #60]	; (8008648 <DMA_CalcBaseAndBitshift+0x6c>)
 800860c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800860e:	e00e      	b.n	800862e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	4b0d      	ldr	r3, [pc, #52]	; (800864c <DMA_CalcBaseAndBitshift+0x70>)
 8008618:	4413      	add	r3, r2
 800861a:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <DMA_CalcBaseAndBitshift+0x68>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	009a      	lsls	r2, r3, #2
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a09      	ldr	r2, [pc, #36]	; (8008650 <DMA_CalcBaseAndBitshift+0x74>)
 800862c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40020407 	.word	0x40020407
 8008640:	bffdfff8 	.word	0xbffdfff8
 8008644:	cccccccd 	.word	0xcccccccd
 8008648:	40020000 	.word	0x40020000
 800864c:	bffdfbf8 	.word	0xbffdfbf8
 8008650:	40020400 	.word	0x40020400

08008654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008662:	e160      	b.n	8008926 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	2101      	movs	r1, #1
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	4013      	ands	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8152 	beq.w	8008920 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d005      	beq.n	8008694 <HAL_GPIO_Init+0x40>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d130      	bne.n	80086f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	2203      	movs	r2, #3
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	43db      	mvns	r3, r3
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4013      	ands	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086ca:	2201      	movs	r2, #1
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4013      	ands	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f003 0201 	and.w	r2, r3, #1
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d017      	beq.n	8008732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	2203      	movs	r2, #3
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	43db      	mvns	r3, r3
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4013      	ands	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d123      	bne.n	8008786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	08da      	lsrs	r2, r3, #3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3208      	adds	r2, #8
 8008746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	220f      	movs	r2, #15
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43db      	mvns	r3, r3
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4013      	ands	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	08da      	lsrs	r2, r3, #3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3208      	adds	r2, #8
 8008780:	6939      	ldr	r1, [r7, #16]
 8008782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	2203      	movs	r2, #3
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	43db      	mvns	r3, r3
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4013      	ands	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f003 0203 	and.w	r2, r3, #3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	fa02 f303 	lsl.w	r3, r2, r3
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80ac 	beq.w	8008920 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087c8:	4b5e      	ldr	r3, [pc, #376]	; (8008944 <HAL_GPIO_Init+0x2f0>)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	4a5d      	ldr	r2, [pc, #372]	; (8008944 <HAL_GPIO_Init+0x2f0>)
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	6193      	str	r3, [r2, #24]
 80087d4:	4b5b      	ldr	r3, [pc, #364]	; (8008944 <HAL_GPIO_Init+0x2f0>)
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	60bb      	str	r3, [r7, #8]
 80087de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80087e0:	4a59      	ldr	r2, [pc, #356]	; (8008948 <HAL_GPIO_Init+0x2f4>)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	089b      	lsrs	r3, r3, #2
 80087e6:	3302      	adds	r3, #2
 80087e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	220f      	movs	r2, #15
 80087f8:	fa02 f303 	lsl.w	r3, r2, r3
 80087fc:	43db      	mvns	r3, r3
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4013      	ands	r3, r2
 8008802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800880a:	d025      	beq.n	8008858 <HAL_GPIO_Init+0x204>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a4f      	ldr	r2, [pc, #316]	; (800894c <HAL_GPIO_Init+0x2f8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d01f      	beq.n	8008854 <HAL_GPIO_Init+0x200>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a4e      	ldr	r2, [pc, #312]	; (8008950 <HAL_GPIO_Init+0x2fc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d019      	beq.n	8008850 <HAL_GPIO_Init+0x1fc>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a4d      	ldr	r2, [pc, #308]	; (8008954 <HAL_GPIO_Init+0x300>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d013      	beq.n	800884c <HAL_GPIO_Init+0x1f8>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a4c      	ldr	r2, [pc, #304]	; (8008958 <HAL_GPIO_Init+0x304>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00d      	beq.n	8008848 <HAL_GPIO_Init+0x1f4>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a4b      	ldr	r2, [pc, #300]	; (800895c <HAL_GPIO_Init+0x308>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <HAL_GPIO_Init+0x1f0>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a4a      	ldr	r2, [pc, #296]	; (8008960 <HAL_GPIO_Init+0x30c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d101      	bne.n	8008840 <HAL_GPIO_Init+0x1ec>
 800883c:	2306      	movs	r3, #6
 800883e:	e00c      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008840:	2307      	movs	r3, #7
 8008842:	e00a      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008844:	2305      	movs	r3, #5
 8008846:	e008      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008848:	2304      	movs	r3, #4
 800884a:	e006      	b.n	800885a <HAL_GPIO_Init+0x206>
 800884c:	2303      	movs	r3, #3
 800884e:	e004      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008850:	2302      	movs	r3, #2
 8008852:	e002      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <HAL_GPIO_Init+0x206>
 8008858:	2300      	movs	r3, #0
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	f002 0203 	and.w	r2, r2, #3
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	4093      	lsls	r3, r2
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800886a:	4937      	ldr	r1, [pc, #220]	; (8008948 <HAL_GPIO_Init+0x2f4>)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	089b      	lsrs	r3, r3, #2
 8008870:	3302      	adds	r3, #2
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008878:	4b3a      	ldr	r3, [pc, #232]	; (8008964 <HAL_GPIO_Init+0x310>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	43db      	mvns	r3, r3
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4013      	ands	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800889c:	4a31      	ldr	r2, [pc, #196]	; (8008964 <HAL_GPIO_Init+0x310>)
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80088a2:	4b30      	ldr	r3, [pc, #192]	; (8008964 <HAL_GPIO_Init+0x310>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	43db      	mvns	r3, r3
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4013      	ands	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80088c6:	4a27      	ldr	r2, [pc, #156]	; (8008964 <HAL_GPIO_Init+0x310>)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088cc:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_GPIO_Init+0x310>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	43db      	mvns	r3, r3
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4013      	ands	r3, r2
 80088da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80088f0:	4a1c      	ldr	r2, [pc, #112]	; (8008964 <HAL_GPIO_Init+0x310>)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088f6:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <HAL_GPIO_Init+0x310>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	43db      	mvns	r3, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4013      	ands	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800891a:	4a12      	ldr	r2, [pc, #72]	; (8008964 <HAL_GPIO_Init+0x310>)
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	3301      	adds	r3, #1
 8008924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	f47f ae97 	bne.w	8008664 <HAL_GPIO_Init+0x10>
  }
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40021000 	.word	0x40021000
 8008948:	40010000 	.word	0x40010000
 800894c:	48000400 	.word	0x48000400
 8008950:	48000800 	.word	0x48000800
 8008954:	48000c00 	.word	0x48000c00
 8008958:	48001000 	.word	0x48001000
 800895c:	48001400 	.word	0x48001400
 8008960:	48001800 	.word	0x48001800
 8008964:	40010400 	.word	0x40010400

08008968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	887b      	ldrh	r3, [r7, #2]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e001      	b.n	800898a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	807b      	strh	r3, [r7, #2]
 80089a4:	4613      	mov	r3, r2
 80089a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089a8:	787b      	ldrb	r3, [r7, #1]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089ae:	887a      	ldrh	r2, [r7, #2]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80089b4:	e002      	b.n	80089bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80089d2:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089d4:	695a      	ldr	r2, [r3, #20]
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d006      	beq.n	80089ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089de:	4a05      	ldr	r2, [pc, #20]	; (80089f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f806 	bl	80089f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	40010400 	.word	0x40010400

080089f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a1c:	1d3b      	adds	r3, r7, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f000 bf01 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a2a:	1d3b      	adds	r3, r7, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8160 	beq.w	8008cfa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008a3a:	4bae      	ldr	r3, [pc, #696]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f003 030c 	and.w	r3, r3, #12
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d00c      	beq.n	8008a60 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a46:	4bab      	ldr	r3, [pc, #684]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f003 030c 	and.w	r3, r3, #12
 8008a4e:	2b08      	cmp	r3, #8
 8008a50:	d159      	bne.n	8008b06 <HAL_RCC_OscConfig+0xf6>
 8008a52:	4ba8      	ldr	r3, [pc, #672]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5e:	d152      	bne.n	8008b06 <HAL_RCC_OscConfig+0xf6>
 8008a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008a6c:	fa93 f3a3 	rbit	r3, r3
 8008a70:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008a74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a78:	fab3 f383 	clz	r3, r3
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCC_OscConfig+0x82>
 8008a8c:	4b99      	ldr	r3, [pc, #612]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	e015      	b.n	8008abe <HAL_RCC_OscConfig+0xae>
 8008a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a96:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008a9e:	fa93 f3a3 	rbit	r3, r3
 8008aa2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008aaa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008aae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008ab2:	fa93 f3a3 	rbit	r3, r3
 8008ab6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008aba:	4b8e      	ldr	r3, [pc, #568]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ac2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008ac6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008aca:	fa92 f2a2 	rbit	r2, r2
 8008ace:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008ad2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008ad6:	fab2 f282 	clz	r2, r2
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	f042 0220 	orr.w	r2, r2, #32
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	f002 021f 	and.w	r2, r2, #31
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 8102 	beq.w	8008cf8 <HAL_RCC_OscConfig+0x2e8>
 8008af4:	1d3b      	adds	r3, r7, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 80fc 	bne.w	8008cf8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f000 be93 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b10:	d106      	bne.n	8008b20 <HAL_RCC_OscConfig+0x110>
 8008b12:	4b78      	ldr	r3, [pc, #480]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a77      	ldr	r2, [pc, #476]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e030      	b.n	8008b82 <HAL_RCC_OscConfig+0x172>
 8008b20:	1d3b      	adds	r3, r7, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10c      	bne.n	8008b44 <HAL_RCC_OscConfig+0x134>
 8008b2a:	4b72      	ldr	r3, [pc, #456]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a71      	ldr	r2, [pc, #452]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	4b6f      	ldr	r3, [pc, #444]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a6e      	ldr	r2, [pc, #440]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	e01e      	b.n	8008b82 <HAL_RCC_OscConfig+0x172>
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b4e:	d10c      	bne.n	8008b6a <HAL_RCC_OscConfig+0x15a>
 8008b50:	4b68      	ldr	r3, [pc, #416]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a67      	ldr	r2, [pc, #412]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	4b65      	ldr	r3, [pc, #404]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a64      	ldr	r2, [pc, #400]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	e00b      	b.n	8008b82 <HAL_RCC_OscConfig+0x172>
 8008b6a:	4b62      	ldr	r3, [pc, #392]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a61      	ldr	r2, [pc, #388]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4b5f      	ldr	r3, [pc, #380]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a5e      	ldr	r2, [pc, #376]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b80:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b82:	1d3b      	adds	r3, r7, #4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d059      	beq.n	8008c40 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b8c:	f7fd fa52 	bl	8006034 <HAL_GetTick>
 8008b90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b94:	e00a      	b.n	8008bac <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b96:	f7fd fa4d 	bl	8006034 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b64      	cmp	r3, #100	; 0x64
 8008ba4:	d902      	bls.n	8008bac <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	f000 be40 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
 8008bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bb0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008bb8:	fa93 f3a3 	rbit	r3, r3
 8008bbc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008bc0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bc4:	fab3 f383 	clz	r3, r3
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d102      	bne.n	8008bde <HAL_RCC_OscConfig+0x1ce>
 8008bd8:	4b46      	ldr	r3, [pc, #280]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	e015      	b.n	8008c0a <HAL_RCC_OscConfig+0x1fa>
 8008bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008be2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008bea:	fa93 f3a3 	rbit	r3, r3
 8008bee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bf6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008bfa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008bfe:	fa93 f3a3 	rbit	r3, r3
 8008c02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008c06:	4b3b      	ldr	r3, [pc, #236]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c0e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008c12:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008c16:	fa92 f2a2 	rbit	r2, r2
 8008c1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008c1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008c22:	fab2 f282 	clz	r2, r2
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	f042 0220 	orr.w	r2, r2, #32
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	f002 021f 	and.w	r2, r2, #31
 8008c32:	2101      	movs	r1, #1
 8008c34:	fa01 f202 	lsl.w	r2, r1, r2
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0ab      	beq.n	8008b96 <HAL_RCC_OscConfig+0x186>
 8008c3e:	e05c      	b.n	8008cfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fd f9f8 	bl	8006034 <HAL_GetTick>
 8008c44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c48:	e00a      	b.n	8008c60 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c4a:	f7fd f9f3 	bl	8006034 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b64      	cmp	r3, #100	; 0x64
 8008c58:	d902      	bls.n	8008c60 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	f000 bde6 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
 8008c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c64:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008c6c:	fa93 f3a3 	rbit	r3, r3
 8008c70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008c74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c78:	fab3 f383 	clz	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f043 0301 	orr.w	r3, r3, #1
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <HAL_RCC_OscConfig+0x282>
 8008c8c:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	e015      	b.n	8008cbe <HAL_RCC_OscConfig+0x2ae>
 8008c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008c9e:	fa93 f3a3 	rbit	r3, r3
 8008ca2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008caa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008cae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <HAL_RCC_OscConfig+0x2e4>)
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cc2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008cc6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008cca:	fa92 f2a2 	rbit	r2, r2
 8008cce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008cd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008cd6:	fab2 f282 	clz	r2, r2
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	f042 0220 	orr.w	r2, r2, #32
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	f002 021f 	and.w	r2, r2, #31
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8008cec:	4013      	ands	r3, r2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ab      	bne.n	8008c4a <HAL_RCC_OscConfig+0x23a>
 8008cf2:	e002      	b.n	8008cfa <HAL_RCC_OscConfig+0x2ea>
 8008cf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cfa:	1d3b      	adds	r3, r7, #4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8170 	beq.w	8008fea <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008d0a:	4bd0      	ldr	r3, [pc, #832]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f003 030c 	and.w	r3, r3, #12
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00c      	beq.n	8008d30 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008d16:	4bcd      	ldr	r3, [pc, #820]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f003 030c 	and.w	r3, r3, #12
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d16d      	bne.n	8008dfe <HAL_RCC_OscConfig+0x3ee>
 8008d22:	4bca      	ldr	r3, [pc, #808]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2e:	d166      	bne.n	8008dfe <HAL_RCC_OscConfig+0x3ee>
 8008d30:	2302      	movs	r3, #2
 8008d32:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d36:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008d3a:	fa93 f3a3 	rbit	r3, r3
 8008d3e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008d42:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d46:	fab3 f383 	clz	r3, r3
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d102      	bne.n	8008d60 <HAL_RCC_OscConfig+0x350>
 8008d5a:	4bbc      	ldr	r3, [pc, #752]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	e013      	b.n	8008d88 <HAL_RCC_OscConfig+0x378>
 8008d60:	2302      	movs	r3, #2
 8008d62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008d6a:	fa93 f3a3 	rbit	r3, r3
 8008d6e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008d72:	2302      	movs	r3, #2
 8008d74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008d78:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008d7c:	fa93 f3a3 	rbit	r3, r3
 8008d80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008d84:	4bb1      	ldr	r3, [pc, #708]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008d8e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008d92:	fa92 f2a2 	rbit	r2, r2
 8008d96:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008d9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008d9e:	fab2 f282 	clz	r2, r2
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	f042 0220 	orr.w	r2, r2, #32
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	f002 021f 	and.w	r2, r2, #31
 8008dae:	2101      	movs	r1, #1
 8008db0:	fa01 f202 	lsl.w	r2, r1, r2
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <HAL_RCC_OscConfig+0x3ba>
 8008dba:	1d3b      	adds	r3, r7, #4
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d002      	beq.n	8008dca <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f000 bd31 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dca:	4ba0      	ldr	r3, [pc, #640]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dd2:	1d3b      	adds	r3, r7, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	21f8      	movs	r1, #248	; 0xf8
 8008dda:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dde:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008de2:	fa91 f1a1 	rbit	r1, r1
 8008de6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008dea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008dee:	fab1 f181 	clz	r1, r1
 8008df2:	b2c9      	uxtb	r1, r1
 8008df4:	408b      	lsls	r3, r1
 8008df6:	4995      	ldr	r1, [pc, #596]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dfc:	e0f5      	b.n	8008fea <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8085 	beq.w	8008f14 <HAL_RCC_OscConfig+0x504>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008e14:	fa93 f3a3 	rbit	r3, r3
 8008e18:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008e1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e20:	fab3 f383 	clz	r3, r3
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	461a      	mov	r2, r3
 8008e32:	2301      	movs	r3, #1
 8008e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e36:	f7fd f8fd 	bl	8006034 <HAL_GetTick>
 8008e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e3e:	e00a      	b.n	8008e56 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e40:	f7fd f8f8 	bl	8006034 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d902      	bls.n	8008e56 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	f000 bceb 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
 8008e56:	2302      	movs	r3, #2
 8008e58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008e60:	fa93 f3a3 	rbit	r3, r3
 8008e64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008e68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e6c:	fab3 f383 	clz	r3, r3
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d102      	bne.n	8008e86 <HAL_RCC_OscConfig+0x476>
 8008e80:	4b72      	ldr	r3, [pc, #456]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	e013      	b.n	8008eae <HAL_RCC_OscConfig+0x49e>
 8008e86:	2302      	movs	r3, #2
 8008e88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e90:	fa93 f3a3 	rbit	r3, r3
 8008e94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008e98:	2302      	movs	r3, #2
 8008e9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008e9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008ea2:	fa93 f3a3 	rbit	r3, r3
 8008ea6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008eaa:	4b68      	ldr	r3, [pc, #416]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008eb4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008eb8:	fa92 f2a2 	rbit	r2, r2
 8008ebc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008ec0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ec4:	fab2 f282 	clz	r2, r2
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	f042 0220 	orr.w	r2, r2, #32
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	f002 021f 	and.w	r2, r2, #31
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0af      	beq.n	8008e40 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ee0:	4b5a      	ldr	r3, [pc, #360]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	21f8      	movs	r1, #248	; 0xf8
 8008ef0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ef4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008ef8:	fa91 f1a1 	rbit	r1, r1
 8008efc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008f00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008f04:	fab1 f181 	clz	r1, r1
 8008f08:	b2c9      	uxtb	r1, r1
 8008f0a:	408b      	lsls	r3, r1
 8008f0c:	494f      	ldr	r1, [pc, #316]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	600b      	str	r3, [r1, #0]
 8008f12:	e06a      	b.n	8008fea <HAL_RCC_OscConfig+0x5da>
 8008f14:	2301      	movs	r3, #1
 8008f16:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f1a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008f1e:	fa93 f3a3 	rbit	r3, r3
 8008f22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008f26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f2a:	fab3 f383 	clz	r3, r3
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008f34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f40:	f7fd f878 	bl	8006034 <HAL_GetTick>
 8008f44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f48:	e00a      	b.n	8008f60 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f4a:	f7fd f873 	bl	8006034 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d902      	bls.n	8008f60 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	f000 bc66 	b.w	800982c <HAL_RCC_OscConfig+0xe1c>
 8008f60:	2302      	movs	r3, #2
 8008f62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f6a:	fa93 f3a3 	rbit	r3, r3
 8008f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f76:	fab3 f383 	clz	r3, r3
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d102      	bne.n	8008f90 <HAL_RCC_OscConfig+0x580>
 8008f8a:	4b30      	ldr	r3, [pc, #192]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	e013      	b.n	8008fb8 <HAL_RCC_OscConfig+0x5a8>
 8008f90:	2302      	movs	r3, #2
 8008f92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9a:	fa93 f3a3 	rbit	r3, r3
 8008f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fa8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fac:	fa93 f3a3 	rbit	r3, r3
 8008fb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fb4:	4b25      	ldr	r3, [pc, #148]	; (800904c <HAL_RCC_OscConfig+0x63c>)
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008fbe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008fc2:	fa92 f2a2 	rbit	r2, r2
 8008fc6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008fca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008fce:	fab2 f282 	clz	r2, r2
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	f042 0220 	orr.w	r2, r2, #32
 8008fd8:	b2d2      	uxtb	r2, r2
 8008fda:	f002 021f 	and.w	r2, r2, #31
 8008fde:	2101      	movs	r1, #1
 8008fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1af      	bne.n	8008f4a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fea:	1d3b      	adds	r3, r7, #4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80da 	beq.w	80091ae <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ffa:	1d3b      	adds	r3, r7, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d069      	beq.n	80090d8 <HAL_RCC_OscConfig+0x6c8>
 8009004:	2301      	movs	r3, #1
 8009006:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900e:	fa93 f3a3 	rbit	r3, r3
 8009012:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8009016:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800901a:	fab3 f383 	clz	r3, r3
 800901e:	b2db      	uxtb	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <HAL_RCC_OscConfig+0x640>)
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	461a      	mov	r2, r3
 800902a:	2301      	movs	r3, #1
 800902c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800902e:	f7fd f801 	bl	8006034 <HAL_GetTick>
 8009032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009036:	e00d      	b.n	8009054 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009038:	f7fc fffc 	bl	8006034 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d905      	bls.n	8009054 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e3ef      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 800904c:	40021000 	.word	0x40021000
 8009050:	10908120 	.word	0x10908120
 8009054:	2302      	movs	r3, #2
 8009056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800905e:	fa93 f2a3 	rbit	r2, r3
 8009062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800906c:	2202      	movs	r2, #2
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	fa93 f2a3 	rbit	r2, r3
 800907a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009084:	2202      	movs	r2, #2
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	fa93 f2a3 	rbit	r2, r3
 8009092:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009096:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009098:	4ba4      	ldr	r3, [pc, #656]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800909a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800909c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80090a0:	2102      	movs	r1, #2
 80090a2:	6019      	str	r1, [r3, #0]
 80090a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	fa93 f1a3 	rbit	r1, r3
 80090ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80090b2:	6019      	str	r1, [r3, #0]
  return result;
 80090b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	fab3 f383 	clz	r3, r3
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2101      	movs	r1, #1
 80090cc:	fa01 f303 	lsl.w	r3, r1, r3
 80090d0:	4013      	ands	r3, r2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0b0      	beq.n	8009038 <HAL_RCC_OscConfig+0x628>
 80090d6:	e06a      	b.n	80091ae <HAL_RCC_OscConfig+0x79e>
 80090d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80090dc:	2201      	movs	r2, #1
 80090de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	fa93 f2a3 	rbit	r2, r3
 80090ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80090ee:	601a      	str	r2, [r3, #0]
  return result;
 80090f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80090f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090f6:	fab3 f383 	clz	r3, r3
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b8c      	ldr	r3, [pc, #560]	; (8009330 <HAL_RCC_OscConfig+0x920>)
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	461a      	mov	r2, r3
 8009106:	2300      	movs	r3, #0
 8009108:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800910a:	f7fc ff93 	bl	8006034 <HAL_GetTick>
 800910e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009112:	e009      	b.n	8009128 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009114:	f7fc ff8e 	bl	8006034 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e381      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 8009128:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800912c:	2202      	movs	r2, #2
 800912e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009130:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	fa93 f2a3 	rbit	r2, r3
 800913a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009144:	2202      	movs	r2, #2
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	fa93 f2a3 	rbit	r2, r3
 8009152:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800915c:	2202      	movs	r2, #2
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	fa93 f2a3 	rbit	r2, r3
 800916a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800916e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009170:	4b6e      	ldr	r3, [pc, #440]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009174:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009178:	2102      	movs	r1, #2
 800917a:	6019      	str	r1, [r3, #0]
 800917c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	fa93 f1a3 	rbit	r1, r3
 8009186:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800918a:	6019      	str	r1, [r3, #0]
  return result;
 800918c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	fab3 f383 	clz	r3, r3
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2101      	movs	r1, #1
 80091a4:	fa01 f303 	lsl.w	r3, r1, r3
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1b2      	bne.n	8009114 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ae:	1d3b      	adds	r3, r7, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 8157 	beq.w	800946c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091be:	2300      	movs	r3, #0
 80091c0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091c4:	4b59      	ldr	r3, [pc, #356]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d112      	bne.n	80091f6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d0:	4b56      	ldr	r3, [pc, #344]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	4a55      	ldr	r2, [pc, #340]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80091d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091da:	61d3      	str	r3, [r2, #28]
 80091dc:	4b53      	ldr	r3, [pc, #332]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80091e4:	f107 030c 	add.w	r3, r7, #12
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091f6:	4b4f      	ldr	r3, [pc, #316]	; (8009334 <HAL_RCC_OscConfig+0x924>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d11a      	bne.n	8009238 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009202:	4b4c      	ldr	r3, [pc, #304]	; (8009334 <HAL_RCC_OscConfig+0x924>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4b      	ldr	r2, [pc, #300]	; (8009334 <HAL_RCC_OscConfig+0x924>)
 8009208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800920e:	f7fc ff11 	bl	8006034 <HAL_GetTick>
 8009212:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009216:	e009      	b.n	800922c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009218:	f7fc ff0c 	bl	8006034 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b64      	cmp	r3, #100	; 0x64
 8009226:	d901      	bls.n	800922c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e2ff      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800922c:	4b41      	ldr	r3, [pc, #260]	; (8009334 <HAL_RCC_OscConfig+0x924>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0ef      	beq.n	8009218 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d106      	bne.n	8009250 <HAL_RCC_OscConfig+0x840>
 8009242:	4b3a      	ldr	r3, [pc, #232]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	4a39      	ldr	r2, [pc, #228]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	6213      	str	r3, [r2, #32]
 800924e:	e02f      	b.n	80092b0 <HAL_RCC_OscConfig+0x8a0>
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <HAL_RCC_OscConfig+0x864>
 800925a:	4b34      	ldr	r3, [pc, #208]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	4a33      	ldr	r2, [pc, #204]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	6213      	str	r3, [r2, #32]
 8009266:	4b31      	ldr	r3, [pc, #196]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	4a30      	ldr	r2, [pc, #192]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800926c:	f023 0304 	bic.w	r3, r3, #4
 8009270:	6213      	str	r3, [r2, #32]
 8009272:	e01d      	b.n	80092b0 <HAL_RCC_OscConfig+0x8a0>
 8009274:	1d3b      	adds	r3, r7, #4
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b05      	cmp	r3, #5
 800927c:	d10c      	bne.n	8009298 <HAL_RCC_OscConfig+0x888>
 800927e:	4b2b      	ldr	r3, [pc, #172]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	4a2a      	ldr	r2, [pc, #168]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009284:	f043 0304 	orr.w	r3, r3, #4
 8009288:	6213      	str	r3, [r2, #32]
 800928a:	4b28      	ldr	r3, [pc, #160]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	4a27      	ldr	r2, [pc, #156]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6213      	str	r3, [r2, #32]
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0x8a0>
 8009298:	4b24      	ldr	r3, [pc, #144]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	4a23      	ldr	r2, [pc, #140]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	6213      	str	r3, [r2, #32]
 80092a4:	4b21      	ldr	r3, [pc, #132]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	4a20      	ldr	r2, [pc, #128]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 80092aa:	f023 0304 	bic.w	r3, r3, #4
 80092ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80092b0:	1d3b      	adds	r3, r7, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d06a      	beq.n	8009390 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ba:	f7fc febb 	bl	8006034 <HAL_GetTick>
 80092be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c2:	e00b      	b.n	80092dc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c4:	f7fc feb6 	bl	8006034 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e2a7      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 80092dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80092e0:	2202      	movs	r2, #2
 80092e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	fa93 f2a3 	rbit	r2, r3
 80092ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80092f8:	2202      	movs	r2, #2
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	fa93 f2a3 	rbit	r2, r3
 8009306:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800930a:	601a      	str	r2, [r3, #0]
  return result;
 800930c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009310:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009312:	fab3 f383 	clz	r3, r3
 8009316:	b2db      	uxtb	r3, r3
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f043 0302 	orr.w	r3, r3, #2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d108      	bne.n	8009338 <HAL_RCC_OscConfig+0x928>
 8009326:	4b01      	ldr	r3, [pc, #4]	; (800932c <HAL_RCC_OscConfig+0x91c>)
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	e013      	b.n	8009354 <HAL_RCC_OscConfig+0x944>
 800932c:	40021000 	.word	0x40021000
 8009330:	10908120 	.word	0x10908120
 8009334:	40007000 	.word	0x40007000
 8009338:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800933c:	2202      	movs	r2, #2
 800933e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009340:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	fa93 f2a3 	rbit	r2, r3
 800934a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	4bc0      	ldr	r3, [pc, #768]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009358:	2102      	movs	r1, #2
 800935a:	6011      	str	r1, [r2, #0]
 800935c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009360:	6812      	ldr	r2, [r2, #0]
 8009362:	fa92 f1a2 	rbit	r1, r2
 8009366:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800936a:	6011      	str	r1, [r2, #0]
  return result;
 800936c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	fab2 f282 	clz	r2, r2
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	f002 021f 	and.w	r2, r2, #31
 8009382:	2101      	movs	r1, #1
 8009384:	fa01 f202 	lsl.w	r2, r1, r2
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d09a      	beq.n	80092c4 <HAL_RCC_OscConfig+0x8b4>
 800938e:	e063      	b.n	8009458 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009390:	f7fc fe50 	bl	8006034 <HAL_GetTick>
 8009394:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009398:	e00b      	b.n	80093b2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800939a:	f7fc fe4b 	bl	8006034 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e23c      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 80093b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80093b6:	2202      	movs	r2, #2
 80093b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	fa93 f2a3 	rbit	r2, r3
 80093c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80093ce:	2202      	movs	r2, #2
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	fa93 f2a3 	rbit	r2, r3
 80093dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80093e0:	601a      	str	r2, [r3, #0]
  return result;
 80093e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80093e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093e8:	fab3 f383 	clz	r3, r3
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	095b      	lsrs	r3, r3, #5
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f043 0302 	orr.w	r3, r3, #2
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d102      	bne.n	8009402 <HAL_RCC_OscConfig+0x9f2>
 80093fc:	4b95      	ldr	r3, [pc, #596]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 80093fe:	6a1b      	ldr	r3, [r3, #32]
 8009400:	e00d      	b.n	800941e <HAL_RCC_OscConfig+0xa0e>
 8009402:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009406:	2202      	movs	r2, #2
 8009408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	fa93 f2a3 	rbit	r2, r3
 8009414:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	4b8e      	ldr	r3, [pc, #568]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009422:	2102      	movs	r1, #2
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	fa92 f1a2 	rbit	r1, r2
 8009430:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009434:	6011      	str	r1, [r2, #0]
  return result;
 8009436:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800943a:	6812      	ldr	r2, [r2, #0]
 800943c:	fab2 f282 	clz	r2, r2
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	f002 021f 	and.w	r2, r2, #31
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f202 	lsl.w	r2, r1, r2
 8009452:	4013      	ands	r3, r2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1a0      	bne.n	800939a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009458:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800945c:	2b01      	cmp	r3, #1
 800945e:	d105      	bne.n	800946c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009460:	4b7c      	ldr	r3, [pc, #496]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	4a7b      	ldr	r2, [pc, #492]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 8009466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800946a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800946c:	1d3b      	adds	r3, r7, #4
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 81d9 	beq.w	800982a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009478:	4b76      	ldr	r3, [pc, #472]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f003 030c 	and.w	r3, r3, #12
 8009480:	2b08      	cmp	r3, #8
 8009482:	f000 81a6 	beq.w	80097d2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b02      	cmp	r3, #2
 800948e:	f040 811e 	bne.w	80096ce <HAL_RCC_OscConfig+0xcbe>
 8009492:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800949a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	fa93 f2a3 	rbit	r2, r3
 80094a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80094aa:	601a      	str	r2, [r3, #0]
  return result;
 80094ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80094b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b2:	fab3 f383 	clz	r3, r3
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80094bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	461a      	mov	r2, r3
 80094c4:	2300      	movs	r3, #0
 80094c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094c8:	f7fc fdb4 	bl	8006034 <HAL_GetTick>
 80094cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80094d0:	e009      	b.n	80094e6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094d2:	f7fc fdaf 	bl	8006034 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e1a2      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 80094e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80094ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	fa93 f2a3 	rbit	r2, r3
 80094fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80094fe:	601a      	str	r2, [r3, #0]
  return result;
 8009500:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009504:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009506:	fab3 f383 	clz	r3, r3
 800950a:	b2db      	uxtb	r3, r3
 800950c:	095b      	lsrs	r3, r3, #5
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b01      	cmp	r3, #1
 8009518:	d102      	bne.n	8009520 <HAL_RCC_OscConfig+0xb10>
 800951a:	4b4e      	ldr	r3, [pc, #312]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	e01b      	b.n	8009558 <HAL_RCC_OscConfig+0xb48>
 8009520:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800952a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	fa93 f2a3 	rbit	r2, r3
 8009534:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800953e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	fa93 f2a3 	rbit	r2, r3
 800954e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	4b3f      	ldr	r3, [pc, #252]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800955c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009560:	6011      	str	r1, [r2, #0]
 8009562:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	fa92 f1a2 	rbit	r1, r2
 800956c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009570:	6011      	str	r1, [r2, #0]
  return result;
 8009572:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	fab2 f282 	clz	r2, r2
 800957c:	b2d2      	uxtb	r2, r2
 800957e:	f042 0220 	orr.w	r2, r2, #32
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	f002 021f 	and.w	r2, r2, #31
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f202 	lsl.w	r2, r1, r2
 800958e:	4013      	ands	r3, r2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d19e      	bne.n	80094d2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009594:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	f023 020f 	bic.w	r2, r3, #15
 800959c:	1d3b      	adds	r3, r7, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	492c      	ldr	r1, [pc, #176]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80095a8:	4b2a      	ldr	r3, [pc, #168]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80095b0:	1d3b      	adds	r3, r7, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6a19      	ldr	r1, [r3, #32]
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	430b      	orrs	r3, r1
 80095be:	4925      	ldr	r1, [pc, #148]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	604b      	str	r3, [r1, #4]
 80095c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	fa93 f2a3 	rbit	r2, r3
 80095d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095dc:	601a      	str	r2, [r3, #0]
  return result;
 80095de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095e2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095e4:	fab3 f383 	clz	r3, r3
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	461a      	mov	r2, r3
 80095f6:	2301      	movs	r3, #1
 80095f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fa:	f7fc fd1b 	bl	8006034 <HAL_GetTick>
 80095fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009602:	e009      	b.n	8009618 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009604:	f7fc fd16 	bl	8006034 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e109      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 8009618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800961c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	fa93 f2a3 	rbit	r2, r3
 800962c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009630:	601a      	str	r2, [r3, #0]
  return result;
 8009632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009638:	fab3 f383 	clz	r3, r3
 800963c:	b2db      	uxtb	r3, r3
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d105      	bne.n	8009658 <HAL_RCC_OscConfig+0xc48>
 800964c:	4b01      	ldr	r3, [pc, #4]	; (8009654 <HAL_RCC_OscConfig+0xc44>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	e01e      	b.n	8009690 <HAL_RCC_OscConfig+0xc80>
 8009652:	bf00      	nop
 8009654:	40021000 	.word	0x40021000
 8009658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800965c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009662:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	fa93 f2a3 	rbit	r2, r3
 800966c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	fa93 f2a3 	rbit	r2, r3
 8009686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	4b6a      	ldr	r3, [pc, #424]	; (8009838 <HAL_RCC_OscConfig+0xe28>)
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009694:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	fa92 f1a2 	rbit	r1, r2
 80096a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80096a8:	6011      	str	r1, [r2, #0]
  return result;
 80096aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	fab2 f282 	clz	r2, r2
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	f042 0220 	orr.w	r2, r2, #32
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	f002 021f 	and.w	r2, r2, #31
 80096c0:	2101      	movs	r1, #1
 80096c2:	fa01 f202 	lsl.w	r2, r1, r2
 80096c6:	4013      	ands	r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d09b      	beq.n	8009604 <HAL_RCC_OscConfig+0xbf4>
 80096cc:	e0ad      	b.n	800982a <HAL_RCC_OscConfig+0xe1a>
 80096ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	fa93 f2a3 	rbit	r2, r3
 80096e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096e6:	601a      	str	r2, [r3, #0]
  return result;
 80096e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ee:	fab3 f383 	clz	r3, r3
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80096f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	461a      	mov	r2, r3
 8009700:	2300      	movs	r3, #0
 8009702:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009704:	f7fc fc96 	bl	8006034 <HAL_GetTick>
 8009708:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800970c:	e009      	b.n	8009722 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800970e:	f7fc fc91 	bl	8006034 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d901      	bls.n	8009722 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e084      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
 8009722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800972a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800972c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	fa93 f2a3 	rbit	r2, r3
 8009736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800973a:	601a      	str	r2, [r3, #0]
  return result;
 800973c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009740:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009742:	fab3 f383 	clz	r3, r3
 8009746:	b2db      	uxtb	r3, r3
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	b2db      	uxtb	r3, r3
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d102      	bne.n	800975c <HAL_RCC_OscConfig+0xd4c>
 8009756:	4b38      	ldr	r3, [pc, #224]	; (8009838 <HAL_RCC_OscConfig+0xe28>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	e01b      	b.n	8009794 <HAL_RCC_OscConfig+0xd84>
 800975c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	fa93 f2a3 	rbit	r2, r3
 8009770:	f107 0320 	add.w	r3, r7, #32
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	f107 031c 	add.w	r3, r7, #28
 800977a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f107 031c 	add.w	r3, r7, #28
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	fa93 f2a3 	rbit	r2, r3
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	4b29      	ldr	r3, [pc, #164]	; (8009838 <HAL_RCC_OscConfig+0xe28>)
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	f107 0214 	add.w	r2, r7, #20
 8009798:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800979c:	6011      	str	r1, [r2, #0]
 800979e:	f107 0214 	add.w	r2, r7, #20
 80097a2:	6812      	ldr	r2, [r2, #0]
 80097a4:	fa92 f1a2 	rbit	r1, r2
 80097a8:	f107 0210 	add.w	r2, r7, #16
 80097ac:	6011      	str	r1, [r2, #0]
  return result;
 80097ae:	f107 0210 	add.w	r2, r7, #16
 80097b2:	6812      	ldr	r2, [r2, #0]
 80097b4:	fab2 f282 	clz	r2, r2
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	f042 0220 	orr.w	r2, r2, #32
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	f002 021f 	and.w	r2, r2, #31
 80097c4:	2101      	movs	r1, #1
 80097c6:	fa01 f202 	lsl.w	r2, r1, r2
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d19e      	bne.n	800970e <HAL_RCC_OscConfig+0xcfe>
 80097d0:	e02b      	b.n	800982a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e025      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80097e0:	4b15      	ldr	r3, [pc, #84]	; (8009838 <HAL_RCC_OscConfig+0xe28>)
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80097e8:	4b13      	ldr	r3, [pc, #76]	; (8009838 <HAL_RCC_OscConfig+0xe28>)
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80097f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80097f4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80097f8:	1d3b      	adds	r3, r7, #4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d111      	bne.n	8009826 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009802:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800980a:	1d3b      	adds	r3, r7, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009810:	429a      	cmp	r2, r3
 8009812:	d108      	bne.n	8009826 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009818:	f003 020f 	and.w	r2, r3, #15
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009822:	429a      	cmp	r2, r3
 8009824:	d001      	beq.n	800982a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40021000 	.word	0x40021000

0800983c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b09e      	sub	sp, #120	; 0x78
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e162      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009854:	4b90      	ldr	r3, [pc, #576]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d910      	bls.n	8009884 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009862:	4b8d      	ldr	r3, [pc, #564]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f023 0207 	bic.w	r2, r3, #7
 800986a:	498b      	ldr	r1, [pc, #556]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	4313      	orrs	r3, r2
 8009870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009872:	4b89      	ldr	r3, [pc, #548]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d001      	beq.n	8009884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e14a      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d008      	beq.n	80098a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009890:	4b82      	ldr	r3, [pc, #520]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	497f      	ldr	r1, [pc, #508]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80dc 	beq.w	8009a68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d13c      	bne.n	8009932 <HAL_RCC_ClockConfig+0xf6>
 80098b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098c0:	fa93 f3a3 	rbit	r3, r3
 80098c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80098c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098c8:	fab3 f383 	clz	r3, r3
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d102      	bne.n	80098e2 <HAL_RCC_ClockConfig+0xa6>
 80098dc:	4b6f      	ldr	r3, [pc, #444]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	e00f      	b.n	8009902 <HAL_RCC_ClockConfig+0xc6>
 80098e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ea:	fa93 f3a3 	rbit	r3, r3
 80098ee:	667b      	str	r3, [r7, #100]	; 0x64
 80098f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098f4:	663b      	str	r3, [r7, #96]	; 0x60
 80098f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f8:	fa93 f3a3 	rbit	r3, r3
 80098fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098fe:	4b67      	ldr	r3, [pc, #412]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009906:	65ba      	str	r2, [r7, #88]	; 0x58
 8009908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800990a:	fa92 f2a2 	rbit	r2, r2
 800990e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009912:	fab2 f282 	clz	r2, r2
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	f042 0220 	orr.w	r2, r2, #32
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	f002 021f 	and.w	r2, r2, #31
 8009922:	2101      	movs	r1, #1
 8009924:	fa01 f202 	lsl.w	r2, r1, r2
 8009928:	4013      	ands	r3, r2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d17b      	bne.n	8009a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e0f3      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d13c      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x178>
 800993a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800993e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	fa93 f3a3 	rbit	r3, r3
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800994a:	fab3 f383 	clz	r3, r3
 800994e:	b2db      	uxtb	r3, r3
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f043 0301 	orr.w	r3, r3, #1
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b01      	cmp	r3, #1
 800995c:	d102      	bne.n	8009964 <HAL_RCC_ClockConfig+0x128>
 800995e:	4b4f      	ldr	r3, [pc, #316]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	e00f      	b.n	8009984 <HAL_RCC_ClockConfig+0x148>
 8009964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009968:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800996a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996c:	fa93 f3a3 	rbit	r3, r3
 8009970:	647b      	str	r3, [r7, #68]	; 0x44
 8009972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997a:	fa93 f3a3 	rbit	r3, r3
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009980:	4b46      	ldr	r3, [pc, #280]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009988:	63ba      	str	r2, [r7, #56]	; 0x38
 800998a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800998c:	fa92 f2a2 	rbit	r2, r2
 8009990:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009994:	fab2 f282 	clz	r2, r2
 8009998:	b2d2      	uxtb	r2, r2
 800999a:	f042 0220 	orr.w	r2, r2, #32
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	f002 021f 	and.w	r2, r2, #31
 80099a4:	2101      	movs	r1, #1
 80099a6:	fa01 f202 	lsl.w	r2, r1, r2
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d13a      	bne.n	8009a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0b2      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
 80099b4:	2302      	movs	r3, #2
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	fa93 f3a3 	rbit	r3, r3
 80099be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c2:	fab3 f383 	clz	r3, r3
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	095b      	lsrs	r3, r3, #5
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f043 0301 	orr.w	r3, r3, #1
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d102      	bne.n	80099dc <HAL_RCC_ClockConfig+0x1a0>
 80099d6:	4b31      	ldr	r3, [pc, #196]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	e00d      	b.n	80099f8 <HAL_RCC_ClockConfig+0x1bc>
 80099dc:	2302      	movs	r3, #2
 80099de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	fa93 f3a3 	rbit	r3, r3
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
 80099e8:	2302      	movs	r3, #2
 80099ea:	623b      	str	r3, [r7, #32]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	fa93 f3a3 	rbit	r3, r3
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2202      	movs	r2, #2
 80099fa:	61ba      	str	r2, [r7, #24]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	fa92 f2a2 	rbit	r2, r2
 8009a02:	617a      	str	r2, [r7, #20]
  return result;
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	fab2 f282 	clz	r2, r2
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	f042 0220 	orr.w	r2, r2, #32
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	f002 021f 	and.w	r2, r2, #31
 8009a16:	2101      	movs	r1, #1
 8009a18:	fa01 f202 	lsl.w	r2, r1, r2
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e079      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a26:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f023 0203 	bic.w	r2, r3, #3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	491a      	ldr	r1, [pc, #104]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a38:	f7fc fafc 	bl	8006034 <HAL_GetTick>
 8009a3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a3e:	e00a      	b.n	8009a56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a40:	f7fc faf8 	bl	8006034 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e061      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <HAL_RCC_ClockConfig+0x260>)
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f003 020c 	and.w	r2, r3, #12
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d1eb      	bne.n	8009a40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d214      	bcs.n	8009aa0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f023 0207 	bic.w	r2, r3, #7
 8009a7e:	4906      	ldr	r1, [pc, #24]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <HAL_RCC_ClockConfig+0x25c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d005      	beq.n	8009aa0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e040      	b.n	8009b1a <HAL_RCC_ClockConfig+0x2de>
 8009a98:	40022000 	.word	0x40022000
 8009a9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d008      	beq.n	8009abe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aac:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <HAL_RCC_ClockConfig+0x2e8>)
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	491a      	ldr	r1, [pc, #104]	; (8009b24 <HAL_RCC_ClockConfig+0x2e8>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0308 	and.w	r3, r3, #8
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009aca:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <HAL_RCC_ClockConfig+0x2e8>)
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4912      	ldr	r1, [pc, #72]	; (8009b24 <HAL_RCC_ClockConfig+0x2e8>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009ade:	f000 f829 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <HAL_RCC_ClockConfig+0x2e8>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aec:	22f0      	movs	r2, #240	; 0xf0
 8009aee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	fa92 f2a2 	rbit	r2, r2
 8009af6:	60fa      	str	r2, [r7, #12]
  return result;
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	fab2 f282 	clz	r2, r2
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	40d3      	lsrs	r3, r2
 8009b02:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <HAL_RCC_ClockConfig+0x2ec>)
 8009b04:	5cd3      	ldrb	r3, [r2, r3]
 8009b06:	fa21 f303 	lsr.w	r3, r1, r3
 8009b0a:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <HAL_RCC_ClockConfig+0x2f0>)
 8009b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009b0e:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <HAL_RCC_ClockConfig+0x2f4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fc fa4a 	bl	8005fac <HAL_InitTick>
  
  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3778      	adds	r7, #120	; 0x78
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	40021000 	.word	0x40021000
 8009b28:	0800e4e8 	.word	0x0800e4e8
 8009b2c:	2000001c 	.word	0x2000001c
 8009b30:	20000020 	.word	0x20000020

08009b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b08b      	sub	sp, #44	; 0x2c
 8009b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009b4e:	4b2a      	ldr	r3, [pc, #168]	; (8009bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	f003 030c 	and.w	r3, r3, #12
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d002      	beq.n	8009b64 <HAL_RCC_GetSysClockFreq+0x30>
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d003      	beq.n	8009b6a <HAL_RCC_GetSysClockFreq+0x36>
 8009b62:	e03f      	b.n	8009be4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009b64:	4b25      	ldr	r3, [pc, #148]	; (8009bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8009b66:	623b      	str	r3, [r7, #32]
      break;
 8009b68:	e03f      	b.n	8009bea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009b70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009b74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	fa92 f2a2 	rbit	r2, r2
 8009b7c:	607a      	str	r2, [r7, #4]
  return result;
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	fab2 f282 	clz	r2, r2
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	40d3      	lsrs	r3, r2
 8009b88:	4a1d      	ldr	r2, [pc, #116]	; (8009c00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009b8a:	5cd3      	ldrb	r3, [r2, r3]
 8009b8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009b8e:	4b1a      	ldr	r3, [pc, #104]	; (8009bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	220f      	movs	r2, #15
 8009b98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	fa92 f2a2 	rbit	r2, r2
 8009ba0:	60fa      	str	r2, [r7, #12]
  return result;
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	fab2 f282 	clz	r2, r2
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	40d3      	lsrs	r3, r2
 8009bac:	4a15      	ldr	r2, [pc, #84]	; (8009c04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009bbc:	4a0f      	ldr	r2, [pc, #60]	; (8009bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
 8009bcc:	e007      	b.n	8009bde <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009bce:	4a0b      	ldr	r2, [pc, #44]	; (8009bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	623b      	str	r3, [r7, #32]
      break;
 8009be2:	e002      	b.n	8009bea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8009be6:	623b      	str	r3, [r7, #32]
      break;
 8009be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bea:	6a3b      	ldr	r3, [r7, #32]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	372c      	adds	r7, #44	; 0x2c
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	40021000 	.word	0x40021000
 8009bfc:	007a1200 	.word	0x007a1200
 8009c00:	0800e500 	.word	0x0800e500
 8009c04:	0800e510 	.word	0x0800e510

08009c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c0c:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	2000001c 	.word	0x2000001c

08009c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009c26:	f7ff ffef 	bl	8009c08 <HAL_RCC_GetHCLKFreq>
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009c38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	fa92 f2a2 	rbit	r2, r2
 8009c40:	603a      	str	r2, [r7, #0]
  return result;
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	fab2 f282 	clz	r2, r2
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	40d3      	lsrs	r3, r2
 8009c4c:	4a04      	ldr	r2, [pc, #16]	; (8009c60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009c4e:	5cd3      	ldrb	r3, [r2, r3]
 8009c50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40021000 	.word	0x40021000
 8009c60:	0800e4f8 	.word	0x0800e4f8

08009c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009c6a:	f7ff ffcd 	bl	8009c08 <HAL_RCC_GetHCLKFreq>
 8009c6e:	4601      	mov	r1, r0
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009c78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	fa92 f2a2 	rbit	r2, r2
 8009c84:	603a      	str	r2, [r7, #0]
  return result;
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	fab2 f282 	clz	r2, r2
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	40d3      	lsrs	r3, r2
 8009c90:	4a04      	ldr	r2, [pc, #16]	; (8009ca4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	0800e4f8 	.word	0x0800e4f8

08009ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b092      	sub	sp, #72	; 0x48
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80d4 	beq.w	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ccc:	4b4e      	ldr	r3, [pc, #312]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10e      	bne.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cd8:	4b4b      	ldr	r3, [pc, #300]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	4a4a      	ldr	r2, [pc, #296]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	61d3      	str	r3, [r2, #28]
 8009ce4:	4b48      	ldr	r3, [pc, #288]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cec:	60bb      	str	r3, [r7, #8]
 8009cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cf6:	4b45      	ldr	r3, [pc, #276]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d118      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d02:	4b42      	ldr	r3, [pc, #264]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a41      	ldr	r2, [pc, #260]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d0e:	f7fc f991 	bl	8006034 <HAL_GetTick>
 8009d12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d14:	e008      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d16:	f7fc f98d 	bl	8006034 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	2b64      	cmp	r3, #100	; 0x64
 8009d22:	d901      	bls.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e1d6      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d28:	4b38      	ldr	r3, [pc, #224]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0f0      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d34:	4b34      	ldr	r3, [pc, #208]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8084 	beq.w	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d07c      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d54:	4b2c      	ldr	r3, [pc, #176]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	fa93 f3a3 	rbit	r3, r3
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d6e:	fab3 f383 	clz	r3, r3
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	4b26      	ldr	r3, [pc, #152]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	2301      	movs	r3, #1
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	fa93 f3a3 	rbit	r3, r3
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d92:	fab3 f383 	clz	r3, r3
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	461a      	mov	r2, r3
 8009da2:	2300      	movs	r3, #0
 8009da4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009da6:	4a18      	ldr	r2, [pc, #96]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009daa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d04b      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009db6:	f7fc f93d 	bl	8006034 <HAL_GetTick>
 8009dba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dbc:	e00a      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dbe:	f7fc f939 	bl	8006034 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d901      	bls.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e180      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	fa93 f3a3 	rbit	r3, r3
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
 8009de0:	2302      	movs	r3, #2
 8009de2:	623b      	str	r3, [r7, #32]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	fa93 f3a3 	rbit	r3, r3
 8009dea:	61fb      	str	r3, [r7, #28]
  return result;
 8009dec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dee:	fab3 f383 	clz	r3, r3
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	095b      	lsrs	r3, r3, #5
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f043 0302 	orr.w	r3, r3, #2
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d108      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009e02:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	e00d      	b.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009e08:	40021000 	.word	0x40021000
 8009e0c:	40007000 	.word	0x40007000
 8009e10:	10908100 	.word	0x10908100
 8009e14:	2302      	movs	r3, #2
 8009e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	fa93 f3a3 	rbit	r3, r3
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	4ba0      	ldr	r3, [pc, #640]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2202      	movs	r2, #2
 8009e26:	613a      	str	r2, [r7, #16]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	fa92 f2a2 	rbit	r2, r2
 8009e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	fab2 f282 	clz	r2, r2
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e3c:	b2d2      	uxtb	r2, r2
 8009e3e:	f002 021f 	and.w	r2, r2, #31
 8009e42:	2101      	movs	r1, #1
 8009e44:	fa01 f202 	lsl.w	r2, r1, r2
 8009e48:	4013      	ands	r3, r2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0b7      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009e4e:	4b95      	ldr	r3, [pc, #596]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	4992      	ldr	r1, [pc, #584]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d105      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e68:	4b8e      	ldr	r3, [pc, #568]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	4a8d      	ldr	r2, [pc, #564]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d008      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e80:	4b88      	ldr	r3, [pc, #544]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	f023 0203 	bic.w	r2, r3, #3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	4985      	ldr	r1, [pc, #532]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d008      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e9e:	4b81      	ldr	r3, [pc, #516]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	497e      	ldr	r1, [pc, #504]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ebc:	4b79      	ldr	r3, [pc, #484]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	4976      	ldr	r1, [pc, #472]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d008      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009eda:	4b72      	ldr	r3, [pc, #456]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	f023 0210 	bic.w	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	496f      	ldr	r1, [pc, #444]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009ef8:	4b6a      	ldr	r3, [pc, #424]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f04:	4967      	ldr	r1, [pc, #412]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d008      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f16:	4b63      	ldr	r3, [pc, #396]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1a:	f023 0220 	bic.w	r2, r3, #32
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	4960      	ldr	r1, [pc, #384]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d008      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f34:	4b5b      	ldr	r3, [pc, #364]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	4958      	ldr	r1, [pc, #352]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009f52:	4b54      	ldr	r3, [pc, #336]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	4951      	ldr	r1, [pc, #324]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009f70:	4b4c      	ldr	r3, [pc, #304]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	4949      	ldr	r1, [pc, #292]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009f8e:	4b45      	ldr	r3, [pc, #276]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	4942      	ldr	r1, [pc, #264]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d008      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009fac:	4b3d      	ldr	r3, [pc, #244]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	493a      	ldr	r1, [pc, #232]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009fca:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	4933      	ldr	r1, [pc, #204]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009fe8:	4b2e      	ldr	r3, [pc, #184]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff4:	492b      	ldr	r1, [pc, #172]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a006:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	4924      	ldr	r1, [pc, #144]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a014:	4313      	orrs	r3, r2
 800a016:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a024:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	491c      	ldr	r1, [pc, #112]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a032:	4313      	orrs	r3, r2
 800a034:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a042:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	4915      	ldr	r1, [pc, #84]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a050:	4313      	orrs	r3, r2
 800a052:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d008      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a060:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a064:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a06c:	490d      	ldr	r1, [pc, #52]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d008      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a07e:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a08a:	4906      	ldr	r1, [pc, #24]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00c      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a09c:	4b01      	ldr	r3, [pc, #4]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	e002      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800a0a2:	bf00      	nop
 800a0a4:	40021000 	.word	0x40021000
 800a0a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b0:	490b      	ldr	r1, [pc, #44]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a0c2:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ce:	4904      	ldr	r1, [pc, #16]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3748      	adds	r7, #72	; 0x48
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	40021000 	.word	0x40021000

0800a0e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e049      	b.n	800a18a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7fb fd9a 	bl	8005c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f000 fce2 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d001      	beq.n	800a1ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e047      	b.n	800a23c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a23      	ldr	r2, [pc, #140]	; (800a248 <HAL_TIM_Base_Start+0xb4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d01d      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c6:	d018      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1f      	ldr	r2, [pc, #124]	; (800a24c <HAL_TIM_Base_Start+0xb8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d013      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1e      	ldr	r2, [pc, #120]	; (800a250 <HAL_TIM_Base_Start+0xbc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00e      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1c      	ldr	r2, [pc, #112]	; (800a254 <HAL_TIM_Base_Start+0xc0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d009      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1b      	ldr	r2, [pc, #108]	; (800a258 <HAL_TIM_Base_Start+0xc4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d004      	beq.n	800a1fa <HAL_TIM_Base_Start+0x66>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a19      	ldr	r2, [pc, #100]	; (800a25c <HAL_TIM_Base_Start+0xc8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d115      	bne.n	800a226 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	4b17      	ldr	r3, [pc, #92]	; (800a260 <HAL_TIM_Base_Start+0xcc>)
 800a202:	4013      	ands	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b06      	cmp	r3, #6
 800a20a:	d015      	beq.n	800a238 <HAL_TIM_Base_Start+0xa4>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a212:	d011      	beq.n	800a238 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a224:	e008      	b.n	800a238 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e000      	b.n	800a23a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	40012c00 	.word	0x40012c00
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40013400 	.word	0x40013400
 800a258:	40014000 	.word	0x40014000
 800a25c:	40015000 	.word	0x40015000
 800a260:	00010007 	.word	0x00010007

0800a264 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e049      	b.n	800a30a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f841 	bl	800a312 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	f000 fc22 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
	...

0800a328 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <HAL_TIM_OC_Start_IT+0x28>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	bf14      	ite	ne
 800a348:	2301      	movne	r3, #1
 800a34a:	2300      	moveq	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	e03c      	b.n	800a3ca <HAL_TIM_OC_Start_IT+0xa2>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b04      	cmp	r3, #4
 800a354:	d109      	bne.n	800a36a <HAL_TIM_OC_Start_IT+0x42>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b01      	cmp	r3, #1
 800a360:	bf14      	ite	ne
 800a362:	2301      	movne	r3, #1
 800a364:	2300      	moveq	r3, #0
 800a366:	b2db      	uxtb	r3, r3
 800a368:	e02f      	b.n	800a3ca <HAL_TIM_OC_Start_IT+0xa2>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d109      	bne.n	800a384 <HAL_TIM_OC_Start_IT+0x5c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	e022      	b.n	800a3ca <HAL_TIM_OC_Start_IT+0xa2>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b0c      	cmp	r3, #12
 800a388:	d109      	bne.n	800a39e <HAL_TIM_OC_Start_IT+0x76>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b01      	cmp	r3, #1
 800a394:	bf14      	ite	ne
 800a396:	2301      	movne	r3, #1
 800a398:	2300      	moveq	r3, #0
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	e015      	b.n	800a3ca <HAL_TIM_OC_Start_IT+0xa2>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	d109      	bne.n	800a3b8 <HAL_TIM_OC_Start_IT+0x90>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	bf14      	ite	ne
 800a3b0:	2301      	movne	r3, #1
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	e008      	b.n	800a3ca <HAL_TIM_OC_Start_IT+0xa2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	bf14      	ite	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e0ec      	b.n	800a5ac <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <HAL_TIM_OC_Start_IT+0xba>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3e0:	e023      	b.n	800a42a <HAL_TIM_OC_Start_IT+0x102>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_OC_Start_IT+0xca>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3f0:	e01b      	b.n	800a42a <HAL_TIM_OC_Start_IT+0x102>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_OC_Start_IT+0xda>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a400:	e013      	b.n	800a42a <HAL_TIM_OC_Start_IT+0x102>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b0c      	cmp	r3, #12
 800a406:	d104      	bne.n	800a412 <HAL_TIM_OC_Start_IT+0xea>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a410:	e00b      	b.n	800a42a <HAL_TIM_OC_Start_IT+0x102>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b10      	cmp	r3, #16
 800a416:	d104      	bne.n	800a422 <HAL_TIM_OC_Start_IT+0xfa>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a420:	e003      	b.n	800a42a <HAL_TIM_OC_Start_IT+0x102>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2202      	movs	r2, #2
 800a426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b0c      	cmp	r3, #12
 800a42e:	d841      	bhi.n	800a4b4 <HAL_TIM_OC_Start_IT+0x18c>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_TIM_OC_Start_IT+0x110>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a46d 	.word	0x0800a46d
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a4b5 	.word	0x0800a4b5
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a47f 	.word	0x0800a47f
 800a44c:	0800a4b5 	.word	0x0800a4b5
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	0800a491 	.word	0x0800a491
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	0800a4a3 	.word	0x0800a4a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0202 	orr.w	r2, r2, #2
 800a47a:	60da      	str	r2, [r3, #12]
      break;
 800a47c:	e01d      	b.n	800a4ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0204 	orr.w	r2, r2, #4
 800a48c:	60da      	str	r2, [r3, #12]
      break;
 800a48e:	e014      	b.n	800a4ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0208 	orr.w	r2, r2, #8
 800a49e:	60da      	str	r2, [r3, #12]
      break;
 800a4a0:	e00b      	b.n	800a4ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0210 	orr.w	r2, r2, #16
 800a4b0:	60da      	str	r2, [r3, #12]
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d174      	bne.n	800a5aa <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 ff4d 	bl	800b368 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a38      	ldr	r2, [pc, #224]	; (800a5b4 <HAL_TIM_OC_Start_IT+0x28c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d018      	beq.n	800a50a <HAL_TIM_OC_Start_IT+0x1e2>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a36      	ldr	r2, [pc, #216]	; (800a5b8 <HAL_TIM_OC_Start_IT+0x290>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d013      	beq.n	800a50a <HAL_TIM_OC_Start_IT+0x1e2>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a35      	ldr	r2, [pc, #212]	; (800a5bc <HAL_TIM_OC_Start_IT+0x294>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00e      	beq.n	800a50a <HAL_TIM_OC_Start_IT+0x1e2>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a33      	ldr	r2, [pc, #204]	; (800a5c0 <HAL_TIM_OC_Start_IT+0x298>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d009      	beq.n	800a50a <HAL_TIM_OC_Start_IT+0x1e2>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a32      	ldr	r2, [pc, #200]	; (800a5c4 <HAL_TIM_OC_Start_IT+0x29c>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d004      	beq.n	800a50a <HAL_TIM_OC_Start_IT+0x1e2>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a30      	ldr	r2, [pc, #192]	; (800a5c8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d101      	bne.n	800a50e <HAL_TIM_OC_Start_IT+0x1e6>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <HAL_TIM_OC_Start_IT+0x1e8>
 800a50e:	2300      	movs	r3, #0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a522:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a22      	ldr	r2, [pc, #136]	; (800a5b4 <HAL_TIM_OC_Start_IT+0x28c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d01d      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a536:	d018      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a23      	ldr	r2, [pc, #140]	; (800a5cc <HAL_TIM_OC_Start_IT+0x2a4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d013      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a22      	ldr	r2, [pc, #136]	; (800a5d0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d00e      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a19      	ldr	r2, [pc, #100]	; (800a5b8 <HAL_TIM_OC_Start_IT+0x290>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d009      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a18      	ldr	r2, [pc, #96]	; (800a5bc <HAL_TIM_OC_Start_IT+0x294>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d004      	beq.n	800a56a <HAL_TIM_OC_Start_IT+0x242>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d115      	bne.n	800a596 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	4b18      	ldr	r3, [pc, #96]	; (800a5d4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800a572:	4013      	ands	r3, r2
 800a574:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b06      	cmp	r3, #6
 800a57a:	d015      	beq.n	800a5a8 <HAL_TIM_OC_Start_IT+0x280>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a582:	d011      	beq.n	800a5a8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f042 0201 	orr.w	r2, r2, #1
 800a592:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a594:	e008      	b.n	800a5a8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0201 	orr.w	r2, r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e000      	b.n	800a5aa <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	40012c00 	.word	0x40012c00
 800a5b8:	40013400 	.word	0x40013400
 800a5bc:	40014000 	.word	0x40014000
 800a5c0:	40014400 	.word	0x40014400
 800a5c4:	40014800 	.word	0x40014800
 800a5c8:	40015000 	.word	0x40015000
 800a5cc:	40000400 	.word	0x40000400
 800a5d0:	40000800 	.word	0x40000800
 800a5d4:	00010007 	.word	0x00010007

0800a5d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d122      	bne.n	800a634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d11b      	bne.n	800a634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f06f 0202 	mvn.w	r2, #2
 800a604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fa48 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a620:	e005      	b.n	800a62e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa3a 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa4b 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d122      	bne.n	800a688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d11b      	bne.n	800a688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f06f 0204 	mvn.w	r2, #4
 800a658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fa1e 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a674:	e005      	b.n	800a682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fa10 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fa21 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b08      	cmp	r3, #8
 800a694:	d122      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d11b      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f06f 0208 	mvn.w	r2, #8
 800a6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d003      	beq.n	800a6ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f9f4 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a6c8:	e005      	b.n	800a6d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f9e6 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f9f7 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0310 	and.w	r3, r3, #16
 800a6e6:	2b10      	cmp	r3, #16
 800a6e8:	d122      	bne.n	800a730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b10      	cmp	r3, #16
 800a6f6:	d11b      	bne.n	800a730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0210 	mvn.w	r2, #16
 800a700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2208      	movs	r2, #8
 800a706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f9ca 	bl	800aab0 <HAL_TIM_IC_CaptureCallback>
 800a71c:	e005      	b.n	800a72a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9bc 	bl	800aa9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f9cd 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d10e      	bne.n	800a75c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d107      	bne.n	800a75c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f06f 0201 	mvn.w	r2, #1
 800a754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f996 	bl	800aa88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a766:	2b80      	cmp	r3, #128	; 0x80
 800a768:	d10e      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a774:	2b80      	cmp	r3, #128	; 0x80
 800a776:	d107      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 ff32 	bl	800b5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a796:	d10e      	bne.n	800a7b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d107      	bne.n	800a7b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 ff25 	bl	800b600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d10e      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d107      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f97b 	bl	800aad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f003 0320 	and.w	r3, r3, #32
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d10e      	bne.n	800a80e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b20      	cmp	r3, #32
 800a7fc:	d107      	bne.n	800a80e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f06f 0220 	mvn.w	r2, #32
 800a806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fee5 	bl	800b5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d101      	bne.n	800a836 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a832:	2302      	movs	r3, #2
 800a834:	e066      	b.n	800a904 <HAL_TIM_OC_ConfigChannel+0xec>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b14      	cmp	r3, #20
 800a842:	d857      	bhi.n	800a8f4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a844:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84a:	bf00      	nop
 800a84c:	0800a8a1 	.word	0x0800a8a1
 800a850:	0800a8f5 	.word	0x0800a8f5
 800a854:	0800a8f5 	.word	0x0800a8f5
 800a858:	0800a8f5 	.word	0x0800a8f5
 800a85c:	0800a8af 	.word	0x0800a8af
 800a860:	0800a8f5 	.word	0x0800a8f5
 800a864:	0800a8f5 	.word	0x0800a8f5
 800a868:	0800a8f5 	.word	0x0800a8f5
 800a86c:	0800a8bd 	.word	0x0800a8bd
 800a870:	0800a8f5 	.word	0x0800a8f5
 800a874:	0800a8f5 	.word	0x0800a8f5
 800a878:	0800a8f5 	.word	0x0800a8f5
 800a87c:	0800a8cb 	.word	0x0800a8cb
 800a880:	0800a8f5 	.word	0x0800a8f5
 800a884:	0800a8f5 	.word	0x0800a8f5
 800a888:	0800a8f5 	.word	0x0800a8f5
 800a88c:	0800a8d9 	.word	0x0800a8d9
 800a890:	0800a8f5 	.word	0x0800a8f5
 800a894:	0800a8f5 	.word	0x0800a8f5
 800a898:	0800a8f5 	.word	0x0800a8f5
 800a89c:	0800a8e7 	.word	0x0800a8e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f9be 	bl	800ac28 <TIM_OC1_SetConfig>
      break;
 800a8ac:	e025      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fa51 	bl	800ad5c <TIM_OC2_SetConfig>
      break;
 800a8ba:	e01e      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fade 	bl	800ae84 <TIM_OC3_SetConfig>
      break;
 800a8c8:	e017      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fb69 	bl	800afa8 <TIM_OC4_SetConfig>
      break;
 800a8d6:	e010      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fbd2 	bl	800b088 <TIM_OC5_SetConfig>
      break;
 800a8e4:	e009      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fc35 	bl	800b15c <TIM_OC6_SetConfig>
      break;
 800a8f2:	e002      	b.n	800a8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_TIM_ConfigClockSource+0x1c>
 800a924:	2302      	movs	r3, #2
 800a926:	e0ab      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x174>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d067      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x128>
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d80b      	bhi.n	800a980 <HAL_TIM_ConfigClockSource+0x74>
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d073      	beq.n	800aa54 <HAL_TIM_ConfigClockSource+0x148>
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d802      	bhi.n	800a976 <HAL_TIM_ConfigClockSource+0x6a>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d06f      	beq.n	800aa54 <HAL_TIM_ConfigClockSource+0x148>
 800a974:	e077      	b.n	800aa66 <HAL_TIM_ConfigClockSource+0x15a>
 800a976:	2b20      	cmp	r3, #32
 800a978:	d06c      	beq.n	800aa54 <HAL_TIM_ConfigClockSource+0x148>
 800a97a:	2b30      	cmp	r3, #48	; 0x30
 800a97c:	d06a      	beq.n	800aa54 <HAL_TIM_ConfigClockSource+0x148>
 800a97e:	e072      	b.n	800aa66 <HAL_TIM_ConfigClockSource+0x15a>
 800a980:	2b70      	cmp	r3, #112	; 0x70
 800a982:	d00d      	beq.n	800a9a0 <HAL_TIM_ConfigClockSource+0x94>
 800a984:	2b70      	cmp	r3, #112	; 0x70
 800a986:	d804      	bhi.n	800a992 <HAL_TIM_ConfigClockSource+0x86>
 800a988:	2b50      	cmp	r3, #80	; 0x50
 800a98a:	d033      	beq.n	800a9f4 <HAL_TIM_ConfigClockSource+0xe8>
 800a98c:	2b60      	cmp	r3, #96	; 0x60
 800a98e:	d041      	beq.n	800aa14 <HAL_TIM_ConfigClockSource+0x108>
 800a990:	e069      	b.n	800aa66 <HAL_TIM_ConfigClockSource+0x15a>
 800a992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a996:	d069      	beq.n	800aa6c <HAL_TIM_ConfigClockSource+0x160>
 800a998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a99c:	d017      	beq.n	800a9ce <HAL_TIM_ConfigClockSource+0xc2>
 800a99e:	e062      	b.n	800aa66 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6818      	ldr	r0, [r3, #0]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	6899      	ldr	r1, [r3, #8]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f000 fcba 	bl	800b328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	609a      	str	r2, [r3, #8]
      break;
 800a9cc:	e04f      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6899      	ldr	r1, [r3, #8]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f000 fca3 	bl	800b328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9f0:	609a      	str	r2, [r3, #8]
      break;
 800a9f2:	e03c      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	6859      	ldr	r1, [r3, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	461a      	mov	r2, r3
 800aa02:	f000 fc17 	bl	800b234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2150      	movs	r1, #80	; 0x50
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fc70 	bl	800b2f2 <TIM_ITRx_SetConfig>
      break;
 800aa12:	e02c      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	6859      	ldr	r1, [r3, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	461a      	mov	r2, r3
 800aa22:	f000 fc36 	bl	800b292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2160      	movs	r1, #96	; 0x60
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fc60 	bl	800b2f2 <TIM_ITRx_SetConfig>
      break;
 800aa32:	e01c      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	6859      	ldr	r1, [r3, #4]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	461a      	mov	r2, r3
 800aa42:	f000 fbf7 	bl	800b234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2140      	movs	r1, #64	; 0x40
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fc50 	bl	800b2f2 <TIM_ITRx_SetConfig>
      break;
 800aa52:	e00c      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f000 fc47 	bl	800b2f2 <TIM_ITRx_SetConfig>
      break;
 800aa64:	e003      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6a:	e000      	b.n	800aa6e <HAL_TIM_ConfigClockSource+0x162>
      break;
 800aa6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a42      	ldr	r2, [pc, #264]	; (800ac08 <TIM_Base_SetConfig+0x11c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d013      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab0a:	d00f      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a3f      	ldr	r2, [pc, #252]	; (800ac0c <TIM_Base_SetConfig+0x120>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00b      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a3e      	ldr	r2, [pc, #248]	; (800ac10 <TIM_Base_SetConfig+0x124>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d007      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a3d      	ldr	r2, [pc, #244]	; (800ac14 <TIM_Base_SetConfig+0x128>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d003      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a3c      	ldr	r2, [pc, #240]	; (800ac18 <TIM_Base_SetConfig+0x12c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d108      	bne.n	800ab3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a31      	ldr	r2, [pc, #196]	; (800ac08 <TIM_Base_SetConfig+0x11c>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d01f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4c:	d01b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a2e      	ldr	r2, [pc, #184]	; (800ac0c <TIM_Base_SetConfig+0x120>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d017      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a2d      	ldr	r2, [pc, #180]	; (800ac10 <TIM_Base_SetConfig+0x124>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a2c      	ldr	r2, [pc, #176]	; (800ac14 <TIM_Base_SetConfig+0x128>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a2c      	ldr	r2, [pc, #176]	; (800ac1c <TIM_Base_SetConfig+0x130>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a2b      	ldr	r2, [pc, #172]	; (800ac20 <TIM_Base_SetConfig+0x134>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d007      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a2a      	ldr	r2, [pc, #168]	; (800ac24 <TIM_Base_SetConfig+0x138>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a25      	ldr	r2, [pc, #148]	; (800ac18 <TIM_Base_SetConfig+0x12c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d108      	bne.n	800ab98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a12      	ldr	r2, [pc, #72]	; (800ac08 <TIM_Base_SetConfig+0x11c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d013      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a13      	ldr	r2, [pc, #76]	; (800ac14 <TIM_Base_SetConfig+0x128>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00f      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <TIM_Base_SetConfig+0x130>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00b      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a12      	ldr	r2, [pc, #72]	; (800ac20 <TIM_Base_SetConfig+0x134>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d007      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a11      	ldr	r2, [pc, #68]	; (800ac24 <TIM_Base_SetConfig+0x138>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d003      	beq.n	800abec <TIM_Base_SetConfig+0x100>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a0c      	ldr	r2, [pc, #48]	; (800ac18 <TIM_Base_SetConfig+0x12c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d103      	bne.n	800abf4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	615a      	str	r2, [r3, #20]
}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40012c00 	.word	0x40012c00
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	40000800 	.word	0x40000800
 800ac14:	40013400 	.word	0x40013400
 800ac18:	40015000 	.word	0x40015000
 800ac1c:	40014000 	.word	0x40014000
 800ac20:	40014400 	.word	0x40014400
 800ac24:	40014800 	.word	0x40014800

0800ac28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f023 0201 	bic.w	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f023 0303 	bic.w	r3, r3, #3
 800ac62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f023 0302 	bic.w	r3, r3, #2
 800ac74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a30      	ldr	r2, [pc, #192]	; (800ad44 <TIM_OC1_SetConfig+0x11c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d013      	beq.n	800acb0 <TIM_OC1_SetConfig+0x88>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a2f      	ldr	r2, [pc, #188]	; (800ad48 <TIM_OC1_SetConfig+0x120>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d00f      	beq.n	800acb0 <TIM_OC1_SetConfig+0x88>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a2e      	ldr	r2, [pc, #184]	; (800ad4c <TIM_OC1_SetConfig+0x124>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00b      	beq.n	800acb0 <TIM_OC1_SetConfig+0x88>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a2d      	ldr	r2, [pc, #180]	; (800ad50 <TIM_OC1_SetConfig+0x128>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d007      	beq.n	800acb0 <TIM_OC1_SetConfig+0x88>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a2c      	ldr	r2, [pc, #176]	; (800ad54 <TIM_OC1_SetConfig+0x12c>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC1_SetConfig+0x88>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a2b      	ldr	r2, [pc, #172]	; (800ad58 <TIM_OC1_SetConfig+0x130>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10c      	bne.n	800acca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f023 0308 	bic.w	r3, r3, #8
 800acb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f023 0304 	bic.w	r3, r3, #4
 800acc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a1d      	ldr	r2, [pc, #116]	; (800ad44 <TIM_OC1_SetConfig+0x11c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <TIM_OC1_SetConfig+0xd2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a1c      	ldr	r2, [pc, #112]	; (800ad48 <TIM_OC1_SetConfig+0x120>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00f      	beq.n	800acfa <TIM_OC1_SetConfig+0xd2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1b      	ldr	r2, [pc, #108]	; (800ad4c <TIM_OC1_SetConfig+0x124>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00b      	beq.n	800acfa <TIM_OC1_SetConfig+0xd2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a1a      	ldr	r2, [pc, #104]	; (800ad50 <TIM_OC1_SetConfig+0x128>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d007      	beq.n	800acfa <TIM_OC1_SetConfig+0xd2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <TIM_OC1_SetConfig+0x12c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d003      	beq.n	800acfa <TIM_OC1_SetConfig+0xd2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <TIM_OC1_SetConfig+0x130>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d111      	bne.n	800ad1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	621a      	str	r2, [r3, #32]
}
 800ad38:	bf00      	nop
 800ad3a:	371c      	adds	r7, #28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40013400 	.word	0x40013400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40014400 	.word	0x40014400
 800ad54:	40014800 	.word	0x40014800
 800ad58:	40015000 	.word	0x40015000

0800ad5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f023 0210 	bic.w	r2, r3, #16
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 0320 	bic.w	r3, r3, #32
 800adaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a2c      	ldr	r2, [pc, #176]	; (800ae6c <TIM_OC2_SetConfig+0x110>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d007      	beq.n	800add0 <TIM_OC2_SetConfig+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a2b      	ldr	r2, [pc, #172]	; (800ae70 <TIM_OC2_SetConfig+0x114>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <TIM_OC2_SetConfig+0x74>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a2a      	ldr	r2, [pc, #168]	; (800ae74 <TIM_OC2_SetConfig+0x118>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d10d      	bne.n	800adec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800add6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a1f      	ldr	r2, [pc, #124]	; (800ae6c <TIM_OC2_SetConfig+0x110>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d013      	beq.n	800ae1c <TIM_OC2_SetConfig+0xc0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a1e      	ldr	r2, [pc, #120]	; (800ae70 <TIM_OC2_SetConfig+0x114>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00f      	beq.n	800ae1c <TIM_OC2_SetConfig+0xc0>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a1e      	ldr	r2, [pc, #120]	; (800ae78 <TIM_OC2_SetConfig+0x11c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00b      	beq.n	800ae1c <TIM_OC2_SetConfig+0xc0>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a1d      	ldr	r2, [pc, #116]	; (800ae7c <TIM_OC2_SetConfig+0x120>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d007      	beq.n	800ae1c <TIM_OC2_SetConfig+0xc0>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <TIM_OC2_SetConfig+0x124>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d003      	beq.n	800ae1c <TIM_OC2_SetConfig+0xc0>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a17      	ldr	r2, [pc, #92]	; (800ae74 <TIM_OC2_SetConfig+0x118>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d113      	bne.n	800ae44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	621a      	str	r2, [r3, #32]
}
 800ae5e:	bf00      	nop
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	40012c00 	.word	0x40012c00
 800ae70:	40013400 	.word	0x40013400
 800ae74:	40015000 	.word	0x40015000
 800ae78:	40014000 	.word	0x40014000
 800ae7c:	40014400 	.word	0x40014400
 800ae80:	40014800 	.word	0x40014800

0800ae84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a2b      	ldr	r2, [pc, #172]	; (800af90 <TIM_OC3_SetConfig+0x10c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d007      	beq.n	800aef6 <TIM_OC3_SetConfig+0x72>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a2a      	ldr	r2, [pc, #168]	; (800af94 <TIM_OC3_SetConfig+0x110>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d003      	beq.n	800aef6 <TIM_OC3_SetConfig+0x72>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a29      	ldr	r2, [pc, #164]	; (800af98 <TIM_OC3_SetConfig+0x114>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d10d      	bne.n	800af12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aefc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	021b      	lsls	r3, r3, #8
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1e      	ldr	r2, [pc, #120]	; (800af90 <TIM_OC3_SetConfig+0x10c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d013      	beq.n	800af42 <TIM_OC3_SetConfig+0xbe>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a1d      	ldr	r2, [pc, #116]	; (800af94 <TIM_OC3_SetConfig+0x110>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00f      	beq.n	800af42 <TIM_OC3_SetConfig+0xbe>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a1d      	ldr	r2, [pc, #116]	; (800af9c <TIM_OC3_SetConfig+0x118>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d00b      	beq.n	800af42 <TIM_OC3_SetConfig+0xbe>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a1c      	ldr	r2, [pc, #112]	; (800afa0 <TIM_OC3_SetConfig+0x11c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d007      	beq.n	800af42 <TIM_OC3_SetConfig+0xbe>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a1b      	ldr	r2, [pc, #108]	; (800afa4 <TIM_OC3_SetConfig+0x120>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d003      	beq.n	800af42 <TIM_OC3_SetConfig+0xbe>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a16      	ldr	r2, [pc, #88]	; (800af98 <TIM_OC3_SetConfig+0x114>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d113      	bne.n	800af6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	621a      	str	r2, [r3, #32]
}
 800af84:	bf00      	nop
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	40012c00 	.word	0x40012c00
 800af94:	40013400 	.word	0x40013400
 800af98:	40015000 	.word	0x40015000
 800af9c:	40014000 	.word	0x40014000
 800afa0:	40014400 	.word	0x40014400
 800afa4:	40014800 	.word	0x40014800

0800afa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	031b      	lsls	r3, r3, #12
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	4313      	orrs	r3, r2
 800b002:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a1a      	ldr	r2, [pc, #104]	; (800b070 <TIM_OC4_SetConfig+0xc8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d013      	beq.n	800b034 <TIM_OC4_SetConfig+0x8c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a19      	ldr	r2, [pc, #100]	; (800b074 <TIM_OC4_SetConfig+0xcc>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00f      	beq.n	800b034 <TIM_OC4_SetConfig+0x8c>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a18      	ldr	r2, [pc, #96]	; (800b078 <TIM_OC4_SetConfig+0xd0>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00b      	beq.n	800b034 <TIM_OC4_SetConfig+0x8c>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a17      	ldr	r2, [pc, #92]	; (800b07c <TIM_OC4_SetConfig+0xd4>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d007      	beq.n	800b034 <TIM_OC4_SetConfig+0x8c>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a16      	ldr	r2, [pc, #88]	; (800b080 <TIM_OC4_SetConfig+0xd8>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_OC4_SetConfig+0x8c>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a15      	ldr	r2, [pc, #84]	; (800b084 <TIM_OC4_SetConfig+0xdc>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d109      	bne.n	800b048 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b03a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	019b      	lsls	r3, r3, #6
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	621a      	str	r2, [r3, #32]
}
 800b062:	bf00      	nop
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	40012c00 	.word	0x40012c00
 800b074:	40013400 	.word	0x40013400
 800b078:	40014000 	.word	0x40014000
 800b07c:	40014400 	.word	0x40014400
 800b080:	40014800 	.word	0x40014800
 800b084:	40015000 	.word	0x40015000

0800b088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	041b      	lsls	r3, r3, #16
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a19      	ldr	r2, [pc, #100]	; (800b144 <TIM_OC5_SetConfig+0xbc>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d013      	beq.n	800b10a <TIM_OC5_SetConfig+0x82>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a18      	ldr	r2, [pc, #96]	; (800b148 <TIM_OC5_SetConfig+0xc0>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d00f      	beq.n	800b10a <TIM_OC5_SetConfig+0x82>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a17      	ldr	r2, [pc, #92]	; (800b14c <TIM_OC5_SetConfig+0xc4>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00b      	beq.n	800b10a <TIM_OC5_SetConfig+0x82>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a16      	ldr	r2, [pc, #88]	; (800b150 <TIM_OC5_SetConfig+0xc8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <TIM_OC5_SetConfig+0x82>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a15      	ldr	r2, [pc, #84]	; (800b154 <TIM_OC5_SetConfig+0xcc>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d003      	beq.n	800b10a <TIM_OC5_SetConfig+0x82>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a14      	ldr	r2, [pc, #80]	; (800b158 <TIM_OC5_SetConfig+0xd0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d109      	bne.n	800b11e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	621a      	str	r2, [r3, #32]
}
 800b138:	bf00      	nop
 800b13a:	371c      	adds	r7, #28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	40012c00 	.word	0x40012c00
 800b148:	40013400 	.word	0x40013400
 800b14c:	40014000 	.word	0x40014000
 800b150:	40014400 	.word	0x40014400
 800b154:	40014800 	.word	0x40014800
 800b158:	40015000 	.word	0x40015000

0800b15c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b18a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	051b      	lsls	r3, r3, #20
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a1a      	ldr	r2, [pc, #104]	; (800b21c <TIM_OC6_SetConfig+0xc0>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d013      	beq.n	800b1e0 <TIM_OC6_SetConfig+0x84>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a19      	ldr	r2, [pc, #100]	; (800b220 <TIM_OC6_SetConfig+0xc4>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00f      	beq.n	800b1e0 <TIM_OC6_SetConfig+0x84>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	; (800b224 <TIM_OC6_SetConfig+0xc8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d00b      	beq.n	800b1e0 <TIM_OC6_SetConfig+0x84>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a17      	ldr	r2, [pc, #92]	; (800b228 <TIM_OC6_SetConfig+0xcc>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d007      	beq.n	800b1e0 <TIM_OC6_SetConfig+0x84>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a16      	ldr	r2, [pc, #88]	; (800b22c <TIM_OC6_SetConfig+0xd0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d003      	beq.n	800b1e0 <TIM_OC6_SetConfig+0x84>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a15      	ldr	r2, [pc, #84]	; (800b230 <TIM_OC6_SetConfig+0xd4>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d109      	bne.n	800b1f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	029b      	lsls	r3, r3, #10
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	621a      	str	r2, [r3, #32]
}
 800b20e:	bf00      	nop
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	40012c00 	.word	0x40012c00
 800b220:	40013400 	.word	0x40013400
 800b224:	40014000 	.word	0x40014000
 800b228:	40014400 	.word	0x40014400
 800b22c:	40014800 	.word	0x40014800
 800b230:	40015000 	.word	0x40015000

0800b234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f023 0201 	bic.w	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	011b      	lsls	r3, r3, #4
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	4313      	orrs	r3, r2
 800b268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f023 030a 	bic.w	r3, r3, #10
 800b270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4313      	orrs	r3, r2
 800b278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	621a      	str	r2, [r3, #32]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f023 0210 	bic.w	r2, r3, #16
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a1b      	ldr	r3, [r3, #32]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	031b      	lsls	r3, r3, #12
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	011b      	lsls	r3, r3, #4
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	621a      	str	r2, [r3, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	f043 0307 	orr.w	r3, r3, #7
 800b314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	609a      	str	r2, [r3, #8]
}
 800b31c:	bf00      	nop
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	021a      	lsls	r2, r3, #8
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	431a      	orrs	r2, r3
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	4313      	orrs	r3, r2
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4313      	orrs	r3, r2
 800b354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	609a      	str	r2, [r3, #8]
}
 800b35c:	bf00      	nop
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f003 031f 	and.w	r3, r3, #31
 800b37a:	2201      	movs	r2, #1
 800b37c:	fa02 f303 	lsl.w	r3, r2, r3
 800b380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6a1a      	ldr	r2, [r3, #32]
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	43db      	mvns	r3, r3
 800b38a:	401a      	ands	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6a1a      	ldr	r2, [r3, #32]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f003 031f 	and.w	r3, r3, #31
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	621a      	str	r2, [r3, #32]
}
 800b3a6:	bf00      	nop
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e06d      	b.n	800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a30      	ldr	r2, [pc, #192]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d009      	beq.n	800b40a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a2f      	ldr	r2, [pc, #188]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d004      	beq.n	800b40a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a2d      	ldr	r2, [pc, #180]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d108      	bne.n	800b41c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d01d      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b448:	d018      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a1c      	ldr	r2, [pc, #112]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d013      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a1a      	ldr	r2, [pc, #104]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d00e      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a15      	ldr	r2, [pc, #84]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d009      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a16      	ldr	r2, [pc, #88]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d004      	beq.n	800b47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d10c      	bne.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	40012c00 	.word	0x40012c00
 800b4b8:	40013400 	.word	0x40013400
 800b4bc:	40015000 	.word	0x40015000
 800b4c0:	40000400 	.word	0x40000400
 800b4c4:	40000800 	.word	0x40000800
 800b4c8:	40014000 	.word	0x40014000

0800b4cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e06a      	b.n	800b5be <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	041b      	lsls	r3, r3, #16
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a19      	ldr	r2, [pc, #100]	; (800b5cc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d009      	beq.n	800b580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a17      	ldr	r2, [pc, #92]	; (800b5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d004      	beq.n	800b580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a16      	ldr	r2, [pc, #88]	; (800b5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d115      	bne.n	800b5ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	051b      	lsls	r3, r3, #20
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40012c00 	.word	0x40012c00
 800b5d0:	40013400 	.word	0x40013400
 800b5d4:	40015000 	.word	0x40015000

0800b5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e040      	b.n	800b6a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fa fb74 	bl	8005d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2224      	movs	r2, #36	; 0x24
 800b640:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f022 0201 	bic.w	r2, r2, #1
 800b650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fc0e 	bl	800be74 <UART_SetConfig>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d101      	bne.n	800b662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e022      	b.n	800b6a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fdd6 	bl	800c21c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0201 	orr.w	r2, r2, #1
 800b69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fe5d 	bl	800c360 <UART_CheckIdleState>
 800b6a6:	4603      	mov	r3, r0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	f040 8082 	bne.w	800b7ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <HAL_UART_Transmit+0x26>
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e07a      	b.n	800b7d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d101      	bne.n	800b6e8 <HAL_UART_Transmit+0x38>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e073      	b.n	800b7d0 <HAL_UART_Transmit+0x120>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2221      	movs	r2, #33	; 0x21
 800b6fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6fe:	f7fa fc99 	bl	8006034 <HAL_GetTick>
 800b702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	88fa      	ldrh	r2, [r7, #6]
 800b708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	88fa      	ldrh	r2, [r7, #6]
 800b710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71c:	d108      	bne.n	800b730 <HAL_UART_Transmit+0x80>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d104      	bne.n	800b730 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	e003      	b.n	800b738 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b734:	2300      	movs	r3, #0
 800b736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b740:	e02d      	b.n	800b79e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2200      	movs	r2, #0
 800b74a:	2180      	movs	r1, #128	; 0x80
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fe50 	bl	800c3f2 <UART_WaitOnFlagUntilTimeout>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e039      	b.n	800b7d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	881a      	ldrh	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b76e:	b292      	uxth	r2, r2
 800b770:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	3302      	adds	r3, #2
 800b776:	61bb      	str	r3, [r7, #24]
 800b778:	e008      	b.n	800b78c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	781a      	ldrb	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	b292      	uxth	r2, r2
 800b784:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	3301      	adds	r3, #1
 800b78a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b792:	b29b      	uxth	r3, r3
 800b794:	3b01      	subs	r3, #1
 800b796:	b29a      	uxth	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1cb      	bne.n	800b742 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2140      	movs	r1, #64	; 0x40
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fe1c 	bl	800c3f2 <UART_WaitOnFlagUntilTimeout>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e005      	b.n	800b7d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e000      	b.n	800b7d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b7ce:	2302      	movs	r3, #2
  }
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d13d      	bne.n	800b86a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <HAL_UART_Receive_IT+0x22>
 800b7f4:	88fb      	ldrh	r3, [r7, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e036      	b.n	800b86c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b804:	2b01      	cmp	r3, #1
 800b806:	d101      	bne.n	800b80c <HAL_UART_Receive_IT+0x34>
 800b808:	2302      	movs	r3, #2
 800b80a:	e02f      	b.n	800b86c <HAL_UART_Receive_IT+0x94>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d018      	beq.n	800b85a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	613b      	str	r3, [r7, #16]
   return(result);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	623b      	str	r3, [r7, #32]
 800b848:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	69f9      	ldr	r1, [r7, #28]
 800b84c:	6a3a      	ldr	r2, [r7, #32]
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	61bb      	str	r3, [r7, #24]
   return(result);
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e6      	bne.n	800b828 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	461a      	mov	r2, r3
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fe8b 	bl	800c57c <UART_Start_Receive_IT>
 800b866:	4603      	mov	r3, r0
 800b868:	e000      	b.n	800b86c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b86a:	2302      	movs	r3, #2
  }
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3728      	adds	r7, #40	; 0x28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b0ba      	sub	sp, #232	; 0xe8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	69db      	ldr	r3, [r3, #28]
 800b882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b89a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b89e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b8a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d115      	bne.n	800b8dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00f      	beq.n	800b8dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d009      	beq.n	800b8dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 82a4 	beq.w	800be1a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	4798      	blx	r3
      }
      return;
 800b8da:	e29e      	b.n	800be1a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8117 	beq.w	800bb14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b8e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b8f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b8f6:	4b85      	ldr	r3, [pc, #532]	; (800bb0c <HAL_UART_IRQHandler+0x298>)
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 810a 	beq.w	800bb14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d011      	beq.n	800b930 <HAL_UART_IRQHandler+0xbc>
 800b90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2201      	movs	r2, #1
 800b91e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b926:	f043 0201 	orr.w	r2, r3, #1
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d011      	beq.n	800b960 <HAL_UART_IRQHandler+0xec>
 800b93c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00b      	beq.n	800b960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2202      	movs	r2, #2
 800b94e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b956:	f043 0204 	orr.w	r2, r3, #4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b964:	f003 0304 	and.w	r3, r3, #4
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d011      	beq.n	800b990 <HAL_UART_IRQHandler+0x11c>
 800b96c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00b      	beq.n	800b990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2204      	movs	r2, #4
 800b97e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b986:	f043 0202 	orr.w	r2, r3, #2
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b994:	f003 0308 	and.w	r3, r3, #8
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d017      	beq.n	800b9cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a0:	f003 0320 	and.w	r3, r3, #32
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d105      	bne.n	800b9b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2208      	movs	r2, #8
 800b9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9c2:	f043 0208 	orr.w	r2, r3, #8
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d012      	beq.n	800b9fe <HAL_UART_IRQHandler+0x18a>
 800b9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00c      	beq.n	800b9fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f4:	f043 0220 	orr.w	r2, r3, #32
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 820a 	beq.w	800be1e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00d      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d007      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba46:	2b40      	cmp	r3, #64	; 0x40
 800ba48:	d005      	beq.n	800ba56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d04f      	beq.n	800baf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fe3c 	bl	800c6d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba66:	2b40      	cmp	r3, #64	; 0x40
 800ba68:	d141      	bne.n	800baee <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3308      	adds	r3, #8
 800ba92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800baa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800baae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1d9      	bne.n	800ba6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baba:	2b00      	cmp	r3, #0
 800babc:	d013      	beq.n	800bae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac2:	4a13      	ldr	r2, [pc, #76]	; (800bb10 <HAL_UART_IRQHandler+0x29c>)
 800bac4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fc fc76 	bl	80083bc <HAL_DMA_Abort_IT>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d017      	beq.n	800bb06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800bae0:	4610      	mov	r0, r2
 800bae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bae4:	e00f      	b.n	800bb06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f9ae 	bl	800be48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baec:	e00b      	b.n	800bb06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9aa 	bl	800be48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf4:	e007      	b.n	800bb06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f9a6 	bl	800be48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800bb04:	e18b      	b.n	800be1e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb06:	bf00      	nop
    return;
 800bb08:	e189      	b.n	800be1e <HAL_UART_IRQHandler+0x5aa>
 800bb0a:	bf00      	nop
 800bb0c:	04000120 	.word	0x04000120
 800bb10:	0800c79b 	.word	0x0800c79b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	f040 8143 	bne.w	800bda4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb22:	f003 0310 	and.w	r3, r3, #16
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 813c 	beq.w	800bda4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8135 	beq.w	800bda4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2210      	movs	r2, #16
 800bb40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b40      	cmp	r3, #64	; 0x40
 800bb4e:	f040 80b1 	bne.w	800bcb4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 815d 	beq.w	800be22 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb72:	429a      	cmp	r2, r3
 800bb74:	f080 8155 	bcs.w	800be22 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	f000 8085 	beq.w	800bc98 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bbc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bbc8:	e841 2300 	strex	r3, r2, [r1]
 800bbcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bbd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1da      	bne.n	800bb8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3308      	adds	r3, #8
 800bbde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bbe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbea:	f023 0301 	bic.w	r3, r3, #1
 800bbee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bbfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc08:	e841 2300 	strex	r3, r2, [r1]
 800bc0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1e1      	bne.n	800bbd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3308      	adds	r3, #8
 800bc1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc38:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc40:	e841 2300 	strex	r3, r2, [r1]
 800bc44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e3      	bne.n	800bc14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc60:	e853 3f00 	ldrex	r3, [r3]
 800bc64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc68:	f023 0310 	bic.w	r3, r3, #16
 800bc6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	461a      	mov	r2, r3
 800bc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e4      	bne.n	800bc58 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fc fb59 	bl	800834a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f8d5 	bl	800be5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcb2:	e0b6      	b.n	800be22 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 80a8 	beq.w	800be26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800bcd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80a3 	beq.w	800be26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd02:	647b      	str	r3, [r7, #68]	; 0x44
 800bd04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e4      	bne.n	800bce0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3308      	adds	r3, #8
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	623b      	str	r3, [r7, #32]
   return(result);
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	f023 0301 	bic.w	r3, r3, #1
 800bd2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd3a:	633a      	str	r2, [r7, #48]	; 0x30
 800bd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e3      	bne.n	800bd16 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f023 0310 	bic.w	r3, r3, #16
 800bd74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	69b9      	ldr	r1, [r7, #24]
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	e841 2300 	strex	r3, r2, [r1]
 800bd8e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1e4      	bne.n	800bd60 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f85d 	bl	800be5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bda2:	e040      	b.n	800be26 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00e      	beq.n	800bdce <HAL_UART_IRQHandler+0x55a>
 800bdb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d008      	beq.n	800bdce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bdc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fe83 	bl	800cad2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdcc:	e02e      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bdce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00e      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bdda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d008      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01d      	beq.n	800be2a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	4798      	blx	r3
    }
    return;
 800bdf6:	e018      	b.n	800be2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bdf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be00:	2b00      	cmp	r3, #0
 800be02:	d013      	beq.n	800be2c <HAL_UART_IRQHandler+0x5b8>
 800be04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00d      	beq.n	800be2c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fcd8 	bl	800c7c6 <UART_EndTransmit_IT>
    return;
 800be16:	bf00      	nop
 800be18:	e008      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
      return;
 800be1a:	bf00      	nop
 800be1c:	e006      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
    return;
 800be1e:	bf00      	nop
 800be20:	e004      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
      return;
 800be22:	bf00      	nop
 800be24:	e002      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
      return;
 800be26:	bf00      	nop
 800be28:	e000      	b.n	800be2c <HAL_UART_IRQHandler+0x5b8>
    return;
 800be2a:	bf00      	nop
  }

}
 800be2c:	37e8      	adds	r7, #232	; 0xe8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop

0800be34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	4313      	orrs	r3, r2
 800be96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4baa      	ldr	r3, [pc, #680]	; (800c148 <UART_SetConfig+0x2d4>)
 800bea0:	4013      	ands	r3, r2
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	6812      	ldr	r2, [r2, #0]
 800bea6:	6979      	ldr	r1, [r7, #20]
 800bea8:	430b      	orrs	r3, r1
 800beaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68da      	ldr	r2, [r3, #12]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	4313      	orrs	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a98      	ldr	r2, [pc, #608]	; (800c14c <UART_SetConfig+0x2d8>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d121      	bne.n	800bf34 <UART_SetConfig+0xc0>
 800bef0:	4b97      	ldr	r3, [pc, #604]	; (800c150 <UART_SetConfig+0x2dc>)
 800bef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d817      	bhi.n	800bf2c <UART_SetConfig+0xb8>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <UART_SetConfig+0x90>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf21 	.word	0x0800bf21
 800bf0c:	0800bf27 	.word	0x0800bf27
 800bf10:	0800bf1b 	.word	0x0800bf1b
 800bf14:	2301      	movs	r3, #1
 800bf16:	77fb      	strb	r3, [r7, #31]
 800bf18:	e0b2      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	77fb      	strb	r3, [r7, #31]
 800bf1e:	e0af      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf20:	2304      	movs	r3, #4
 800bf22:	77fb      	strb	r3, [r7, #31]
 800bf24:	e0ac      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf26:	2308      	movs	r3, #8
 800bf28:	77fb      	strb	r3, [r7, #31]
 800bf2a:	e0a9      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	77fb      	strb	r3, [r7, #31]
 800bf30:	bf00      	nop
 800bf32:	e0a5      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a86      	ldr	r2, [pc, #536]	; (800c154 <UART_SetConfig+0x2e0>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d123      	bne.n	800bf86 <UART_SetConfig+0x112>
 800bf3e:	4b84      	ldr	r3, [pc, #528]	; (800c150 <UART_SetConfig+0x2dc>)
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4a:	d012      	beq.n	800bf72 <UART_SetConfig+0xfe>
 800bf4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf50:	d802      	bhi.n	800bf58 <UART_SetConfig+0xe4>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <UART_SetConfig+0xf2>
 800bf56:	e012      	b.n	800bf7e <UART_SetConfig+0x10a>
 800bf58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf5c:	d00c      	beq.n	800bf78 <UART_SetConfig+0x104>
 800bf5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf62:	d003      	beq.n	800bf6c <UART_SetConfig+0xf8>
 800bf64:	e00b      	b.n	800bf7e <UART_SetConfig+0x10a>
 800bf66:	2300      	movs	r3, #0
 800bf68:	77fb      	strb	r3, [r7, #31]
 800bf6a:	e089      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	77fb      	strb	r3, [r7, #31]
 800bf70:	e086      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf72:	2304      	movs	r3, #4
 800bf74:	77fb      	strb	r3, [r7, #31]
 800bf76:	e083      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	77fb      	strb	r3, [r7, #31]
 800bf7c:	e080      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf7e:	2310      	movs	r3, #16
 800bf80:	77fb      	strb	r3, [r7, #31]
 800bf82:	bf00      	nop
 800bf84:	e07c      	b.n	800c080 <UART_SetConfig+0x20c>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a73      	ldr	r2, [pc, #460]	; (800c158 <UART_SetConfig+0x2e4>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d123      	bne.n	800bfd8 <UART_SetConfig+0x164>
 800bf90:	4b6f      	ldr	r3, [pc, #444]	; (800c150 <UART_SetConfig+0x2dc>)
 800bf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bf98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf9c:	d012      	beq.n	800bfc4 <UART_SetConfig+0x150>
 800bf9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfa2:	d802      	bhi.n	800bfaa <UART_SetConfig+0x136>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d007      	beq.n	800bfb8 <UART_SetConfig+0x144>
 800bfa8:	e012      	b.n	800bfd0 <UART_SetConfig+0x15c>
 800bfaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bfae:	d00c      	beq.n	800bfca <UART_SetConfig+0x156>
 800bfb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bfb4:	d003      	beq.n	800bfbe <UART_SetConfig+0x14a>
 800bfb6:	e00b      	b.n	800bfd0 <UART_SetConfig+0x15c>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	e060      	b.n	800c080 <UART_SetConfig+0x20c>
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	77fb      	strb	r3, [r7, #31]
 800bfc2:	e05d      	b.n	800c080 <UART_SetConfig+0x20c>
 800bfc4:	2304      	movs	r3, #4
 800bfc6:	77fb      	strb	r3, [r7, #31]
 800bfc8:	e05a      	b.n	800c080 <UART_SetConfig+0x20c>
 800bfca:	2308      	movs	r3, #8
 800bfcc:	77fb      	strb	r3, [r7, #31]
 800bfce:	e057      	b.n	800c080 <UART_SetConfig+0x20c>
 800bfd0:	2310      	movs	r3, #16
 800bfd2:	77fb      	strb	r3, [r7, #31]
 800bfd4:	bf00      	nop
 800bfd6:	e053      	b.n	800c080 <UART_SetConfig+0x20c>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a5f      	ldr	r2, [pc, #380]	; (800c15c <UART_SetConfig+0x2e8>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d123      	bne.n	800c02a <UART_SetConfig+0x1b6>
 800bfe2:	4b5b      	ldr	r3, [pc, #364]	; (800c150 <UART_SetConfig+0x2dc>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bfea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfee:	d012      	beq.n	800c016 <UART_SetConfig+0x1a2>
 800bff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff4:	d802      	bhi.n	800bffc <UART_SetConfig+0x188>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d007      	beq.n	800c00a <UART_SetConfig+0x196>
 800bffa:	e012      	b.n	800c022 <UART_SetConfig+0x1ae>
 800bffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c000:	d00c      	beq.n	800c01c <UART_SetConfig+0x1a8>
 800c002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c006:	d003      	beq.n	800c010 <UART_SetConfig+0x19c>
 800c008:	e00b      	b.n	800c022 <UART_SetConfig+0x1ae>
 800c00a:	2300      	movs	r3, #0
 800c00c:	77fb      	strb	r3, [r7, #31]
 800c00e:	e037      	b.n	800c080 <UART_SetConfig+0x20c>
 800c010:	2302      	movs	r3, #2
 800c012:	77fb      	strb	r3, [r7, #31]
 800c014:	e034      	b.n	800c080 <UART_SetConfig+0x20c>
 800c016:	2304      	movs	r3, #4
 800c018:	77fb      	strb	r3, [r7, #31]
 800c01a:	e031      	b.n	800c080 <UART_SetConfig+0x20c>
 800c01c:	2308      	movs	r3, #8
 800c01e:	77fb      	strb	r3, [r7, #31]
 800c020:	e02e      	b.n	800c080 <UART_SetConfig+0x20c>
 800c022:	2310      	movs	r3, #16
 800c024:	77fb      	strb	r3, [r7, #31]
 800c026:	bf00      	nop
 800c028:	e02a      	b.n	800c080 <UART_SetConfig+0x20c>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a4c      	ldr	r2, [pc, #304]	; (800c160 <UART_SetConfig+0x2ec>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d123      	bne.n	800c07c <UART_SetConfig+0x208>
 800c034:	4b46      	ldr	r3, [pc, #280]	; (800c150 <UART_SetConfig+0x2dc>)
 800c036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c038:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c040:	d012      	beq.n	800c068 <UART_SetConfig+0x1f4>
 800c042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c046:	d802      	bhi.n	800c04e <UART_SetConfig+0x1da>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d007      	beq.n	800c05c <UART_SetConfig+0x1e8>
 800c04c:	e012      	b.n	800c074 <UART_SetConfig+0x200>
 800c04e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c052:	d00c      	beq.n	800c06e <UART_SetConfig+0x1fa>
 800c054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c058:	d003      	beq.n	800c062 <UART_SetConfig+0x1ee>
 800c05a:	e00b      	b.n	800c074 <UART_SetConfig+0x200>
 800c05c:	2300      	movs	r3, #0
 800c05e:	77fb      	strb	r3, [r7, #31]
 800c060:	e00e      	b.n	800c080 <UART_SetConfig+0x20c>
 800c062:	2302      	movs	r3, #2
 800c064:	77fb      	strb	r3, [r7, #31]
 800c066:	e00b      	b.n	800c080 <UART_SetConfig+0x20c>
 800c068:	2304      	movs	r3, #4
 800c06a:	77fb      	strb	r3, [r7, #31]
 800c06c:	e008      	b.n	800c080 <UART_SetConfig+0x20c>
 800c06e:	2308      	movs	r3, #8
 800c070:	77fb      	strb	r3, [r7, #31]
 800c072:	e005      	b.n	800c080 <UART_SetConfig+0x20c>
 800c074:	2310      	movs	r3, #16
 800c076:	77fb      	strb	r3, [r7, #31]
 800c078:	bf00      	nop
 800c07a:	e001      	b.n	800c080 <UART_SetConfig+0x20c>
 800c07c:	2310      	movs	r3, #16
 800c07e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	69db      	ldr	r3, [r3, #28]
 800c084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c088:	d16e      	bne.n	800c168 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800c08a:	7ffb      	ldrb	r3, [r7, #31]
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	d828      	bhi.n	800c0e2 <UART_SetConfig+0x26e>
 800c090:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <UART_SetConfig+0x224>)
 800c092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c096:	bf00      	nop
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	0800c0e3 	.word	0x0800c0e3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0e3 	.word	0x0800c0e3
 800c0b0:	0800c0e3 	.word	0x0800c0e3
 800c0b4:	0800c0e3 	.word	0x0800c0e3
 800c0b8:	0800c0db 	.word	0x0800c0db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0bc:	f7fd fdb0 	bl	8009c20 <HAL_RCC_GetPCLK1Freq>
 800c0c0:	61b8      	str	r0, [r7, #24]
        break;
 800c0c2:	e013      	b.n	800c0ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0c4:	f7fd fdce 	bl	8009c64 <HAL_RCC_GetPCLK2Freq>
 800c0c8:	61b8      	str	r0, [r7, #24]
        break;
 800c0ca:	e00f      	b.n	800c0ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0cc:	4b25      	ldr	r3, [pc, #148]	; (800c164 <UART_SetConfig+0x2f0>)
 800c0ce:	61bb      	str	r3, [r7, #24]
        break;
 800c0d0:	e00c      	b.n	800c0ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0d2:	f7fd fd2f 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 800c0d6:	61b8      	str	r0, [r7, #24]
        break;
 800c0d8:	e008      	b.n	800c0ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0de:	61bb      	str	r3, [r7, #24]
        break;
 800c0e0:	e004      	b.n	800c0ec <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	77bb      	strb	r3, [r7, #30]
        break;
 800c0ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 8086 	beq.w	800c200 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	005a      	lsls	r2, r3, #1
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	085b      	lsrs	r3, r3, #1
 800c0fe:	441a      	add	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	fbb2 f3f3 	udiv	r3, r2, r3
 800c108:	b29b      	uxth	r3, r3
 800c10a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b0f      	cmp	r3, #15
 800c110:	d916      	bls.n	800c140 <UART_SetConfig+0x2cc>
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c118:	d212      	bcs.n	800c140 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	f023 030f 	bic.w	r3, r3, #15
 800c122:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	085b      	lsrs	r3, r3, #1
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f003 0307 	and.w	r3, r3, #7
 800c12e:	b29a      	uxth	r2, r3
 800c130:	89fb      	ldrh	r3, [r7, #14]
 800c132:	4313      	orrs	r3, r2
 800c134:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	89fa      	ldrh	r2, [r7, #14]
 800c13c:	60da      	str	r2, [r3, #12]
 800c13e:	e05f      	b.n	800c200 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	77bb      	strb	r3, [r7, #30]
 800c144:	e05c      	b.n	800c200 <UART_SetConfig+0x38c>
 800c146:	bf00      	nop
 800c148:	efff69f3 	.word	0xefff69f3
 800c14c:	40013800 	.word	0x40013800
 800c150:	40021000 	.word	0x40021000
 800c154:	40004400 	.word	0x40004400
 800c158:	40004800 	.word	0x40004800
 800c15c:	40004c00 	.word	0x40004c00
 800c160:	40005000 	.word	0x40005000
 800c164:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800c168:	7ffb      	ldrb	r3, [r7, #31]
 800c16a:	2b08      	cmp	r3, #8
 800c16c:	d827      	bhi.n	800c1be <UART_SetConfig+0x34a>
 800c16e:	a201      	add	r2, pc, #4	; (adr r2, 800c174 <UART_SetConfig+0x300>)
 800c170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c1a1 	.word	0x0800c1a1
 800c17c:	0800c1a9 	.word	0x0800c1a9
 800c180:	0800c1bf 	.word	0x0800c1bf
 800c184:	0800c1af 	.word	0x0800c1af
 800c188:	0800c1bf 	.word	0x0800c1bf
 800c18c:	0800c1bf 	.word	0x0800c1bf
 800c190:	0800c1bf 	.word	0x0800c1bf
 800c194:	0800c1b7 	.word	0x0800c1b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c198:	f7fd fd42 	bl	8009c20 <HAL_RCC_GetPCLK1Freq>
 800c19c:	61b8      	str	r0, [r7, #24]
        break;
 800c19e:	e013      	b.n	800c1c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1a0:	f7fd fd60 	bl	8009c64 <HAL_RCC_GetPCLK2Freq>
 800c1a4:	61b8      	str	r0, [r7, #24]
        break;
 800c1a6:	e00f      	b.n	800c1c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <UART_SetConfig+0x3a4>)
 800c1aa:	61bb      	str	r3, [r7, #24]
        break;
 800c1ac:	e00c      	b.n	800c1c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1ae:	f7fd fcc1 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 800c1b2:	61b8      	str	r0, [r7, #24]
        break;
 800c1b4:	e008      	b.n	800c1c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ba:	61bb      	str	r3, [r7, #24]
        break;
 800c1bc:	e004      	b.n	800c1c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	77bb      	strb	r3, [r7, #30]
        break;
 800c1c6:	bf00      	nop
    }

    if (pclk != 0U)
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d018      	beq.n	800c200 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	085a      	lsrs	r2, r3, #1
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	441a      	add	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d908      	bls.n	800c1fc <UART_SetConfig+0x388>
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f0:	d204      	bcs.n	800c1fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	60da      	str	r2, [r3, #12]
 800c1fa:	e001      	b.n	800c200 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c20c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	007a1200 	.word	0x007a1200

0800c21c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	430a      	orrs	r2, r1
 800c266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00a      	beq.n	800c28a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28e:	f003 0308 	and.w	r3, r3, #8
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00a      	beq.n	800c2ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	f003 0310 	and.w	r3, r3, #16
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00a      	beq.n	800c2ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d2:	f003 0320 	and.w	r3, r3, #32
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d01a      	beq.n	800c332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c31a:	d10a      	bne.n	800c332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00a      	beq.n	800c354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	605a      	str	r2, [r3, #4]
  }
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af02      	add	r7, sp, #8
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c370:	f7f9 fe60 	bl	8006034 <HAL_GetTick>
 800c374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0308 	and.w	r3, r3, #8
 800c380:	2b08      	cmp	r3, #8
 800c382:	d10e      	bne.n	800c3a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f82d 	bl	800c3f2 <UART_WaitOnFlagUntilTimeout>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c39e:	2303      	movs	r3, #3
 800c3a0:	e023      	b.n	800c3ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d10e      	bne.n	800c3ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f817 	bl	800c3f2 <UART_WaitOnFlagUntilTimeout>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e00d      	b.n	800c3ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b09c      	sub	sp, #112	; 0x70
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	603b      	str	r3, [r7, #0]
 800c3fe:	4613      	mov	r3, r2
 800c400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c402:	e0a5      	b.n	800c550 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40a:	f000 80a1 	beq.w	800c550 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c40e:	f7f9 fe11 	bl	8006034 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d302      	bcc.n	800c424 <UART_WaitOnFlagUntilTimeout+0x32>
 800c41e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c420:	2b00      	cmp	r3, #0
 800c422:	d13e      	bne.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c438:	667b      	str	r3, [r7, #100]	; 0x64
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c442:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c444:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c44a:	e841 2300 	strex	r3, r2, [r1]
 800c44e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e6      	bne.n	800c424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3308      	adds	r3, #8
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	663b      	str	r3, [r7, #96]	; 0x60
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c476:	64ba      	str	r2, [r7, #72]	; 0x48
 800c478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c47c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e5      	bne.n	800c456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2220      	movs	r2, #32
 800c48e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2220      	movs	r2, #32
 800c494:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e067      	b.n	800c572 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d04f      	beq.n	800c550 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4be:	d147      	bne.n	800c550 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	e853 3f00 	ldrex	r3, [r3]
 800c4d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e6      	bne.n	800c4ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	613b      	str	r3, [r7, #16]
   return(result);
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	f023 0301 	bic.w	r3, r3, #1
 800c512:	66bb      	str	r3, [r7, #104]	; 0x68
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3308      	adds	r3, #8
 800c51a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c51c:	623a      	str	r2, [r7, #32]
 800c51e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	69f9      	ldr	r1, [r7, #28]
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	61bb      	str	r3, [r7, #24]
   return(result);
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e5      	bne.n	800c4fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2220      	movs	r2, #32
 800c534:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2220      	movs	r2, #32
 800c53a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2220      	movs	r2, #32
 800c540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e010      	b.n	800c572 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	69da      	ldr	r2, [r3, #28]
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	4013      	ands	r3, r2
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	bf0c      	ite	eq
 800c560:	2301      	moveq	r3, #1
 800c562:	2300      	movne	r3, #0
 800c564:	b2db      	uxtb	r3, r3
 800c566:	461a      	mov	r2, r3
 800c568:	79fb      	ldrb	r3, [r7, #7]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	f43f af4a 	beq.w	800c404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3770      	adds	r7, #112	; 0x70
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b091      	sub	sp, #68	; 0x44
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	88fa      	ldrh	r2, [r7, #6]
 800c594:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	88fa      	ldrh	r2, [r7, #6]
 800c59c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ae:	d10e      	bne.n	800c5ce <UART_Start_Receive_IT+0x52>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <UART_Start_Receive_IT+0x48>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c5be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5c2:	e02d      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	22ff      	movs	r2, #255	; 0xff
 800c5c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5cc:	e028      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10d      	bne.n	800c5f2 <UART_Start_Receive_IT+0x76>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d104      	bne.n	800c5e8 <UART_Start_Receive_IT+0x6c>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	22ff      	movs	r2, #255	; 0xff
 800c5e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5e6:	e01b      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	227f      	movs	r2, #127	; 0x7f
 800c5ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5f0:	e016      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5fa:	d10d      	bne.n	800c618 <UART_Start_Receive_IT+0x9c>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <UART_Start_Receive_IT+0x92>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	227f      	movs	r2, #127	; 0x7f
 800c608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c60c:	e008      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	223f      	movs	r2, #63	; 0x3f
 800c612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c616:	e003      	b.n	800c620 <UART_Start_Receive_IT+0xa4>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2222      	movs	r2, #34	; 0x22
 800c62c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3308      	adds	r3, #8
 800c64c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c64e:	637a      	str	r2, [r7, #52]	; 0x34
 800c650:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e5      	bne.n	800c62e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c66a:	d107      	bne.n	800c67c <UART_Start_Receive_IT+0x100>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4a15      	ldr	r2, [pc, #84]	; (800c6cc <UART_Start_Receive_IT+0x150>)
 800c678:	665a      	str	r2, [r3, #100]	; 0x64
 800c67a:	e002      	b.n	800c682 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4a14      	ldr	r2, [pc, #80]	; (800c6d0 <UART_Start_Receive_IT+0x154>)
 800c680:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	613b      	str	r3, [r7, #16]
   return(result);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a8:	623b      	str	r3, [r7, #32]
 800c6aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	6a3a      	ldr	r2, [r7, #32]
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e6      	bne.n	800c68a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3744      	adds	r7, #68	; 0x44
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	0800c977 	.word	0x0800c977
 800c6d0:	0800c81b 	.word	0x0800c81b

0800c6d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b095      	sub	sp, #84	; 0x54
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e4:	e853 3f00 	ldrex	r3, [r3]
 800c6e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c6fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c702:	e841 2300 	strex	r3, r2, [r1]
 800c706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1e6      	bne.n	800c6dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3308      	adds	r3, #8
 800c714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	f023 0301 	bic.w	r3, r3, #1
 800c724:	64bb      	str	r3, [r7, #72]	; 0x48
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c72e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c736:	e841 2300 	strex	r3, r2, [r1]
 800c73a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1e5      	bne.n	800c70e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c746:	2b01      	cmp	r3, #1
 800c748:	d118      	bne.n	800c77c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	e853 3f00 	ldrex	r3, [r3]
 800c756:	60bb      	str	r3, [r7, #8]
   return(result);
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	f023 0310 	bic.w	r3, r3, #16
 800c75e:	647b      	str	r3, [r7, #68]	; 0x44
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	461a      	mov	r2, r3
 800c766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c768:	61bb      	str	r3, [r7, #24]
 800c76a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76c:	6979      	ldr	r1, [r7, #20]
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	e841 2300 	strex	r3, r2, [r1]
 800c774:	613b      	str	r3, [r7, #16]
   return(result);
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1e6      	bne.n	800c74a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2220      	movs	r2, #32
 800c780:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c78e:	bf00      	nop
 800c790:	3754      	adds	r7, #84	; 0x54
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff fb45 	bl	800be48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b088      	sub	sp, #32
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e6      	bne.n	800c7ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2220      	movs	r2, #32
 800c804:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff fb11 	bl	800be34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c812:	bf00      	nop
 800c814:	3720      	adds	r7, #32
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b096      	sub	sp, #88	; 0x58
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c828:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c830:	2b22      	cmp	r3, #34	; 0x22
 800c832:	f040 8094 	bne.w	800c95e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c83c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c840:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c844:	b2d9      	uxtb	r1, r3
 800c846:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c850:	400a      	ands	r2, r1
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c866:	b29b      	uxth	r3, r3
 800c868:	3b01      	subs	r3, #1
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c878:	b29b      	uxth	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d177      	bne.n	800c96e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	e853 3f00 	ldrex	r3, [r3]
 800c88a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c892:	653b      	str	r3, [r7, #80]	; 0x50
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	461a      	mov	r2, r3
 800c89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c89c:	647b      	str	r3, [r7, #68]	; 0x44
 800c89e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8a4:	e841 2300 	strex	r3, r2, [r1]
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e6      	bne.n	800c87e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	e853 3f00 	ldrex	r3, [r3]
 800c8be:	623b      	str	r3, [r7, #32]
   return(result);
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	f023 0301 	bic.w	r3, r3, #1
 800c8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8d0:	633a      	str	r2, [r7, #48]	; 0x30
 800c8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d8:	e841 2300 	strex	r3, r2, [r1]
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1e5      	bne.n	800c8b0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d12e      	bne.n	800c956 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f023 0310 	bic.w	r3, r3, #16
 800c912:	64bb      	str	r3, [r7, #72]	; 0x48
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	461a      	mov	r2, r3
 800c91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c91c:	61fb      	str	r3, [r7, #28]
 800c91e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c920:	69b9      	ldr	r1, [r7, #24]
 800c922:	69fa      	ldr	r2, [r7, #28]
 800c924:	e841 2300 	strex	r3, r2, [r1]
 800c928:	617b      	str	r3, [r7, #20]
   return(result);
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e6      	bne.n	800c8fe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	f003 0310 	and.w	r3, r3, #16
 800c93a:	2b10      	cmp	r3, #16
 800c93c:	d103      	bne.n	800c946 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2210      	movs	r2, #16
 800c944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff fa84 	bl	800be5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c954:	e00b      	b.n	800c96e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7f4 facc 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800c95c:	e007      	b.n	800c96e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	699a      	ldr	r2, [r3, #24]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f042 0208 	orr.w	r2, r2, #8
 800c96c:	619a      	str	r2, [r3, #24]
}
 800c96e:	bf00      	nop
 800c970:	3758      	adds	r7, #88	; 0x58
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b096      	sub	sp, #88	; 0x58
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c984:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c98c:	2b22      	cmp	r3, #34	; 0x22
 800c98e:	f040 8094 	bne.w	800caba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c998:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c9a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b6:	1c9a      	adds	r2, r3, #2
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d177      	bne.n	800caca <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9f8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca00:	e841 2300 	strex	r3, r2, [r1]
 800ca04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1e6      	bne.n	800c9da <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	e853 3f00 	ldrex	r3, [r3]
 800ca1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f023 0301 	bic.w	r3, r3, #1
 800ca22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca34:	e841 2300 	strex	r3, r2, [r1]
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e5      	bne.n	800ca0c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2220      	movs	r2, #32
 800ca44:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d12e      	bne.n	800cab2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f023 0310 	bic.w	r3, r3, #16
 800ca6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca78:	61bb      	str	r3, [r7, #24]
 800ca7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6979      	ldr	r1, [r7, #20]
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	613b      	str	r3, [r7, #16]
   return(result);
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e6      	bne.n	800ca5a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	f003 0310 	and.w	r3, r3, #16
 800ca96:	2b10      	cmp	r3, #16
 800ca98:	d103      	bne.n	800caa2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2210      	movs	r2, #16
 800caa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff f9d6 	bl	800be5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cab0:	e00b      	b.n	800caca <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f4 fa1e 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800cab8:	e007      	b.n	800caca <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	699a      	ldr	r2, [r3, #24]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0208 	orr.w	r2, r2, #8
 800cac8:	619a      	str	r2, [r3, #24]
}
 800caca:	bf00      	nop
 800cacc:	3758      	adds	r7, #88	; 0x58
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b083      	sub	sp, #12
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
	...

0800cae8 <__errno>:
 800cae8:	4b01      	ldr	r3, [pc, #4]	; (800caf0 <__errno+0x8>)
 800caea:	6818      	ldr	r0, [r3, #0]
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20000028 	.word	0x20000028

0800caf4 <__libc_init_array>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	4e0d      	ldr	r6, [pc, #52]	; (800cb2c <__libc_init_array+0x38>)
 800caf8:	4c0d      	ldr	r4, [pc, #52]	; (800cb30 <__libc_init_array+0x3c>)
 800cafa:	1ba4      	subs	r4, r4, r6
 800cafc:	10a4      	asrs	r4, r4, #2
 800cafe:	2500      	movs	r5, #0
 800cb00:	42a5      	cmp	r5, r4
 800cb02:	d109      	bne.n	800cb18 <__libc_init_array+0x24>
 800cb04:	4e0b      	ldr	r6, [pc, #44]	; (800cb34 <__libc_init_array+0x40>)
 800cb06:	4c0c      	ldr	r4, [pc, #48]	; (800cb38 <__libc_init_array+0x44>)
 800cb08:	f001 fc38 	bl	800e37c <_init>
 800cb0c:	1ba4      	subs	r4, r4, r6
 800cb0e:	10a4      	asrs	r4, r4, #2
 800cb10:	2500      	movs	r5, #0
 800cb12:	42a5      	cmp	r5, r4
 800cb14:	d105      	bne.n	800cb22 <__libc_init_array+0x2e>
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb1c:	4798      	blx	r3
 800cb1e:	3501      	adds	r5, #1
 800cb20:	e7ee      	b.n	800cb00 <__libc_init_array+0xc>
 800cb22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb26:	4798      	blx	r3
 800cb28:	3501      	adds	r5, #1
 800cb2a:	e7f2      	b.n	800cb12 <__libc_init_array+0x1e>
 800cb2c:	0800e730 	.word	0x0800e730
 800cb30:	0800e730 	.word	0x0800e730
 800cb34:	0800e730 	.word	0x0800e730
 800cb38:	0800e734 	.word	0x0800e734

0800cb3c <memset>:
 800cb3c:	4402      	add	r2, r0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d100      	bne.n	800cb46 <memset+0xa>
 800cb44:	4770      	bx	lr
 800cb46:	f803 1b01 	strb.w	r1, [r3], #1
 800cb4a:	e7f9      	b.n	800cb40 <memset+0x4>

0800cb4c <siprintf>:
 800cb4c:	b40e      	push	{r1, r2, r3}
 800cb4e:	b500      	push	{lr}
 800cb50:	b09c      	sub	sp, #112	; 0x70
 800cb52:	ab1d      	add	r3, sp, #116	; 0x74
 800cb54:	9002      	str	r0, [sp, #8]
 800cb56:	9006      	str	r0, [sp, #24]
 800cb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb5c:	4809      	ldr	r0, [pc, #36]	; (800cb84 <siprintf+0x38>)
 800cb5e:	9107      	str	r1, [sp, #28]
 800cb60:	9104      	str	r1, [sp, #16]
 800cb62:	4909      	ldr	r1, [pc, #36]	; (800cb88 <siprintf+0x3c>)
 800cb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb68:	9105      	str	r1, [sp, #20]
 800cb6a:	6800      	ldr	r0, [r0, #0]
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	a902      	add	r1, sp, #8
 800cb70:	f000 f866 	bl	800cc40 <_svfiprintf_r>
 800cb74:	9b02      	ldr	r3, [sp, #8]
 800cb76:	2200      	movs	r2, #0
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	b01c      	add	sp, #112	; 0x70
 800cb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb80:	b003      	add	sp, #12
 800cb82:	4770      	bx	lr
 800cb84:	20000028 	.word	0x20000028
 800cb88:	ffff0208 	.word	0xffff0208

0800cb8c <__ssputs_r>:
 800cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb90:	688e      	ldr	r6, [r1, #8]
 800cb92:	429e      	cmp	r6, r3
 800cb94:	4682      	mov	sl, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	4690      	mov	r8, r2
 800cb9a:	4699      	mov	r9, r3
 800cb9c:	d837      	bhi.n	800cc0e <__ssputs_r+0x82>
 800cb9e:	898a      	ldrh	r2, [r1, #12]
 800cba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cba4:	d031      	beq.n	800cc0a <__ssputs_r+0x7e>
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	6909      	ldr	r1, [r1, #16]
 800cbaa:	1a6f      	subs	r7, r5, r1
 800cbac:	6965      	ldr	r5, [r4, #20]
 800cbae:	2302      	movs	r3, #2
 800cbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800cbb8:	f109 0301 	add.w	r3, r9, #1
 800cbbc:	443b      	add	r3, r7
 800cbbe:	429d      	cmp	r5, r3
 800cbc0:	bf38      	it	cc
 800cbc2:	461d      	movcc	r5, r3
 800cbc4:	0553      	lsls	r3, r2, #21
 800cbc6:	d530      	bpl.n	800cc2a <__ssputs_r+0x9e>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f000 fb2b 	bl	800d224 <_malloc_r>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	b950      	cbnz	r0, 800cbe8 <__ssputs_r+0x5c>
 800cbd2:	230c      	movs	r3, #12
 800cbd4:	f8ca 3000 	str.w	r3, [sl]
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe8:	463a      	mov	r2, r7
 800cbea:	6921      	ldr	r1, [r4, #16]
 800cbec:	f000 faa8 	bl	800d140 <memcpy>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	6126      	str	r6, [r4, #16]
 800cbfe:	6165      	str	r5, [r4, #20]
 800cc00:	443e      	add	r6, r7
 800cc02:	1bed      	subs	r5, r5, r7
 800cc04:	6026      	str	r6, [r4, #0]
 800cc06:	60a5      	str	r5, [r4, #8]
 800cc08:	464e      	mov	r6, r9
 800cc0a:	454e      	cmp	r6, r9
 800cc0c:	d900      	bls.n	800cc10 <__ssputs_r+0x84>
 800cc0e:	464e      	mov	r6, r9
 800cc10:	4632      	mov	r2, r6
 800cc12:	4641      	mov	r1, r8
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	f000 fa9e 	bl	800d156 <memmove>
 800cc1a:	68a3      	ldr	r3, [r4, #8]
 800cc1c:	1b9b      	subs	r3, r3, r6
 800cc1e:	60a3      	str	r3, [r4, #8]
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	441e      	add	r6, r3
 800cc24:	6026      	str	r6, [r4, #0]
 800cc26:	2000      	movs	r0, #0
 800cc28:	e7dc      	b.n	800cbe4 <__ssputs_r+0x58>
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	f000 fb54 	bl	800d2d8 <_realloc_r>
 800cc30:	4606      	mov	r6, r0
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d1e2      	bne.n	800cbfc <__ssputs_r+0x70>
 800cc36:	6921      	ldr	r1, [r4, #16]
 800cc38:	4650      	mov	r0, sl
 800cc3a:	f000 faa5 	bl	800d188 <_free_r>
 800cc3e:	e7c8      	b.n	800cbd2 <__ssputs_r+0x46>

0800cc40 <_svfiprintf_r>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	461d      	mov	r5, r3
 800cc46:	898b      	ldrh	r3, [r1, #12]
 800cc48:	061f      	lsls	r7, r3, #24
 800cc4a:	b09d      	sub	sp, #116	; 0x74
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	4616      	mov	r6, r2
 800cc52:	d50f      	bpl.n	800cc74 <_svfiprintf_r+0x34>
 800cc54:	690b      	ldr	r3, [r1, #16]
 800cc56:	b96b      	cbnz	r3, 800cc74 <_svfiprintf_r+0x34>
 800cc58:	2140      	movs	r1, #64	; 0x40
 800cc5a:	f000 fae3 	bl	800d224 <_malloc_r>
 800cc5e:	6020      	str	r0, [r4, #0]
 800cc60:	6120      	str	r0, [r4, #16]
 800cc62:	b928      	cbnz	r0, 800cc70 <_svfiprintf_r+0x30>
 800cc64:	230c      	movs	r3, #12
 800cc66:	f8c8 3000 	str.w	r3, [r8]
 800cc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6e:	e0c8      	b.n	800ce02 <_svfiprintf_r+0x1c2>
 800cc70:	2340      	movs	r3, #64	; 0x40
 800cc72:	6163      	str	r3, [r4, #20]
 800cc74:	2300      	movs	r3, #0
 800cc76:	9309      	str	r3, [sp, #36]	; 0x24
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc7e:	2330      	movs	r3, #48	; 0x30
 800cc80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc84:	9503      	str	r5, [sp, #12]
 800cc86:	f04f 0b01 	mov.w	fp, #1
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	463d      	mov	r5, r7
 800cc8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc92:	b10b      	cbz	r3, 800cc98 <_svfiprintf_r+0x58>
 800cc94:	2b25      	cmp	r3, #37	; 0x25
 800cc96:	d13e      	bne.n	800cd16 <_svfiprintf_r+0xd6>
 800cc98:	ebb7 0a06 	subs.w	sl, r7, r6
 800cc9c:	d00b      	beq.n	800ccb6 <_svfiprintf_r+0x76>
 800cc9e:	4653      	mov	r3, sl
 800cca0:	4632      	mov	r2, r6
 800cca2:	4621      	mov	r1, r4
 800cca4:	4640      	mov	r0, r8
 800cca6:	f7ff ff71 	bl	800cb8c <__ssputs_r>
 800ccaa:	3001      	adds	r0, #1
 800ccac:	f000 80a4 	beq.w	800cdf8 <_svfiprintf_r+0x1b8>
 800ccb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb2:	4453      	add	r3, sl
 800ccb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb6:	783b      	ldrb	r3, [r7, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 809d 	beq.w	800cdf8 <_svfiprintf_r+0x1b8>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	9307      	str	r3, [sp, #28]
 800cccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccd0:	931a      	str	r3, [sp, #104]	; 0x68
 800ccd2:	462f      	mov	r7, r5
 800ccd4:	2205      	movs	r2, #5
 800ccd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ccda:	4850      	ldr	r0, [pc, #320]	; (800ce1c <_svfiprintf_r+0x1dc>)
 800ccdc:	f7f3 fa88 	bl	80001f0 <memchr>
 800cce0:	9b04      	ldr	r3, [sp, #16]
 800cce2:	b9d0      	cbnz	r0, 800cd1a <_svfiprintf_r+0xda>
 800cce4:	06d9      	lsls	r1, r3, #27
 800cce6:	bf44      	itt	mi
 800cce8:	2220      	movmi	r2, #32
 800ccea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccee:	071a      	lsls	r2, r3, #28
 800ccf0:	bf44      	itt	mi
 800ccf2:	222b      	movmi	r2, #43	; 0x2b
 800ccf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccf8:	782a      	ldrb	r2, [r5, #0]
 800ccfa:	2a2a      	cmp	r2, #42	; 0x2a
 800ccfc:	d015      	beq.n	800cd2a <_svfiprintf_r+0xea>
 800ccfe:	9a07      	ldr	r2, [sp, #28]
 800cd00:	462f      	mov	r7, r5
 800cd02:	2000      	movs	r0, #0
 800cd04:	250a      	movs	r5, #10
 800cd06:	4639      	mov	r1, r7
 800cd08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd0c:	3b30      	subs	r3, #48	; 0x30
 800cd0e:	2b09      	cmp	r3, #9
 800cd10:	d94d      	bls.n	800cdae <_svfiprintf_r+0x16e>
 800cd12:	b1b8      	cbz	r0, 800cd44 <_svfiprintf_r+0x104>
 800cd14:	e00f      	b.n	800cd36 <_svfiprintf_r+0xf6>
 800cd16:	462f      	mov	r7, r5
 800cd18:	e7b8      	b.n	800cc8c <_svfiprintf_r+0x4c>
 800cd1a:	4a40      	ldr	r2, [pc, #256]	; (800ce1c <_svfiprintf_r+0x1dc>)
 800cd1c:	1a80      	subs	r0, r0, r2
 800cd1e:	fa0b f000 	lsl.w	r0, fp, r0
 800cd22:	4318      	orrs	r0, r3
 800cd24:	9004      	str	r0, [sp, #16]
 800cd26:	463d      	mov	r5, r7
 800cd28:	e7d3      	b.n	800ccd2 <_svfiprintf_r+0x92>
 800cd2a:	9a03      	ldr	r2, [sp, #12]
 800cd2c:	1d11      	adds	r1, r2, #4
 800cd2e:	6812      	ldr	r2, [r2, #0]
 800cd30:	9103      	str	r1, [sp, #12]
 800cd32:	2a00      	cmp	r2, #0
 800cd34:	db01      	blt.n	800cd3a <_svfiprintf_r+0xfa>
 800cd36:	9207      	str	r2, [sp, #28]
 800cd38:	e004      	b.n	800cd44 <_svfiprintf_r+0x104>
 800cd3a:	4252      	negs	r2, r2
 800cd3c:	f043 0302 	orr.w	r3, r3, #2
 800cd40:	9207      	str	r2, [sp, #28]
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	783b      	ldrb	r3, [r7, #0]
 800cd46:	2b2e      	cmp	r3, #46	; 0x2e
 800cd48:	d10c      	bne.n	800cd64 <_svfiprintf_r+0x124>
 800cd4a:	787b      	ldrb	r3, [r7, #1]
 800cd4c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd4e:	d133      	bne.n	800cdb8 <_svfiprintf_r+0x178>
 800cd50:	9b03      	ldr	r3, [sp, #12]
 800cd52:	1d1a      	adds	r2, r3, #4
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	9203      	str	r2, [sp, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfb8      	it	lt
 800cd5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd60:	3702      	adds	r7, #2
 800cd62:	9305      	str	r3, [sp, #20]
 800cd64:	4d2e      	ldr	r5, [pc, #184]	; (800ce20 <_svfiprintf_r+0x1e0>)
 800cd66:	7839      	ldrb	r1, [r7, #0]
 800cd68:	2203      	movs	r2, #3
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f7f3 fa40 	bl	80001f0 <memchr>
 800cd70:	b138      	cbz	r0, 800cd82 <_svfiprintf_r+0x142>
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	1b40      	subs	r0, r0, r5
 800cd76:	fa03 f000 	lsl.w	r0, r3, r0
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	4303      	orrs	r3, r0
 800cd7e:	3701      	adds	r7, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	7839      	ldrb	r1, [r7, #0]
 800cd84:	4827      	ldr	r0, [pc, #156]	; (800ce24 <_svfiprintf_r+0x1e4>)
 800cd86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd8a:	2206      	movs	r2, #6
 800cd8c:	1c7e      	adds	r6, r7, #1
 800cd8e:	f7f3 fa2f 	bl	80001f0 <memchr>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d038      	beq.n	800ce08 <_svfiprintf_r+0x1c8>
 800cd96:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <_svfiprintf_r+0x1e8>)
 800cd98:	bb13      	cbnz	r3, 800cde0 <_svfiprintf_r+0x1a0>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	3307      	adds	r3, #7
 800cd9e:	f023 0307 	bic.w	r3, r3, #7
 800cda2:	3308      	adds	r3, #8
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda8:	444b      	add	r3, r9
 800cdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdac:	e76d      	b.n	800cc8a <_svfiprintf_r+0x4a>
 800cdae:	fb05 3202 	mla	r2, r5, r2, r3
 800cdb2:	2001      	movs	r0, #1
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	e7a6      	b.n	800cd06 <_svfiprintf_r+0xc6>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	3701      	adds	r7, #1
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	250a      	movs	r5, #10
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdc8:	3a30      	subs	r2, #48	; 0x30
 800cdca:	2a09      	cmp	r2, #9
 800cdcc:	d903      	bls.n	800cdd6 <_svfiprintf_r+0x196>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0c8      	beq.n	800cd64 <_svfiprintf_r+0x124>
 800cdd2:	9105      	str	r1, [sp, #20]
 800cdd4:	e7c6      	b.n	800cd64 <_svfiprintf_r+0x124>
 800cdd6:	fb05 2101 	mla	r1, r5, r1, r2
 800cdda:	2301      	movs	r3, #1
 800cddc:	4607      	mov	r7, r0
 800cdde:	e7f0      	b.n	800cdc2 <_svfiprintf_r+0x182>
 800cde0:	ab03      	add	r3, sp, #12
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	4622      	mov	r2, r4
 800cde6:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <_svfiprintf_r+0x1ec>)
 800cde8:	a904      	add	r1, sp, #16
 800cdea:	4640      	mov	r0, r8
 800cdec:	f3af 8000 	nop.w
 800cdf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cdf4:	4681      	mov	r9, r0
 800cdf6:	d1d6      	bne.n	800cda6 <_svfiprintf_r+0x166>
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	065b      	lsls	r3, r3, #25
 800cdfc:	f53f af35 	bmi.w	800cc6a <_svfiprintf_r+0x2a>
 800ce00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce02:	b01d      	add	sp, #116	; 0x74
 800ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce08:	ab03      	add	r3, sp, #12
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <_svfiprintf_r+0x1ec>)
 800ce10:	a904      	add	r1, sp, #16
 800ce12:	4640      	mov	r0, r8
 800ce14:	f000 f882 	bl	800cf1c <_printf_i>
 800ce18:	e7ea      	b.n	800cdf0 <_svfiprintf_r+0x1b0>
 800ce1a:	bf00      	nop
 800ce1c:	0800e520 	.word	0x0800e520
 800ce20:	0800e526 	.word	0x0800e526
 800ce24:	0800e52a 	.word	0x0800e52a
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	0800cb8d 	.word	0x0800cb8d

0800ce30 <_printf_common>:
 800ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce34:	4691      	mov	r9, r2
 800ce36:	461f      	mov	r7, r3
 800ce38:	688a      	ldr	r2, [r1, #8]
 800ce3a:	690b      	ldr	r3, [r1, #16]
 800ce3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce40:	4293      	cmp	r3, r2
 800ce42:	bfb8      	it	lt
 800ce44:	4613      	movlt	r3, r2
 800ce46:	f8c9 3000 	str.w	r3, [r9]
 800ce4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460c      	mov	r4, r1
 800ce52:	b112      	cbz	r2, 800ce5a <_printf_common+0x2a>
 800ce54:	3301      	adds	r3, #1
 800ce56:	f8c9 3000 	str.w	r3, [r9]
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	0699      	lsls	r1, r3, #26
 800ce5e:	bf42      	ittt	mi
 800ce60:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ce64:	3302      	addmi	r3, #2
 800ce66:	f8c9 3000 	strmi.w	r3, [r9]
 800ce6a:	6825      	ldr	r5, [r4, #0]
 800ce6c:	f015 0506 	ands.w	r5, r5, #6
 800ce70:	d107      	bne.n	800ce82 <_printf_common+0x52>
 800ce72:	f104 0a19 	add.w	sl, r4, #25
 800ce76:	68e3      	ldr	r3, [r4, #12]
 800ce78:	f8d9 2000 	ldr.w	r2, [r9]
 800ce7c:	1a9b      	subs	r3, r3, r2
 800ce7e:	42ab      	cmp	r3, r5
 800ce80:	dc28      	bgt.n	800ced4 <_printf_common+0xa4>
 800ce82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ce86:	6822      	ldr	r2, [r4, #0]
 800ce88:	3300      	adds	r3, #0
 800ce8a:	bf18      	it	ne
 800ce8c:	2301      	movne	r3, #1
 800ce8e:	0692      	lsls	r2, r2, #26
 800ce90:	d42d      	bmi.n	800ceee <_printf_common+0xbe>
 800ce92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce96:	4639      	mov	r1, r7
 800ce98:	4630      	mov	r0, r6
 800ce9a:	47c0      	blx	r8
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	d020      	beq.n	800cee2 <_printf_common+0xb2>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	68e5      	ldr	r5, [r4, #12]
 800cea4:	f8d9 2000 	ldr.w	r2, [r9]
 800cea8:	f003 0306 	and.w	r3, r3, #6
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	bf08      	it	eq
 800ceb0:	1aad      	subeq	r5, r5, r2
 800ceb2:	68a3      	ldr	r3, [r4, #8]
 800ceb4:	6922      	ldr	r2, [r4, #16]
 800ceb6:	bf0c      	ite	eq
 800ceb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cebc:	2500      	movne	r5, #0
 800cebe:	4293      	cmp	r3, r2
 800cec0:	bfc4      	itt	gt
 800cec2:	1a9b      	subgt	r3, r3, r2
 800cec4:	18ed      	addgt	r5, r5, r3
 800cec6:	f04f 0900 	mov.w	r9, #0
 800ceca:	341a      	adds	r4, #26
 800cecc:	454d      	cmp	r5, r9
 800cece:	d11a      	bne.n	800cf06 <_printf_common+0xd6>
 800ced0:	2000      	movs	r0, #0
 800ced2:	e008      	b.n	800cee6 <_printf_common+0xb6>
 800ced4:	2301      	movs	r3, #1
 800ced6:	4652      	mov	r2, sl
 800ced8:	4639      	mov	r1, r7
 800ceda:	4630      	mov	r0, r6
 800cedc:	47c0      	blx	r8
 800cede:	3001      	adds	r0, #1
 800cee0:	d103      	bne.n	800ceea <_printf_common+0xba>
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	3501      	adds	r5, #1
 800ceec:	e7c3      	b.n	800ce76 <_printf_common+0x46>
 800ceee:	18e1      	adds	r1, r4, r3
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	2030      	movs	r0, #48	; 0x30
 800cef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cef8:	4422      	add	r2, r4
 800cefa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cefe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf02:	3302      	adds	r3, #2
 800cf04:	e7c5      	b.n	800ce92 <_printf_common+0x62>
 800cf06:	2301      	movs	r3, #1
 800cf08:	4622      	mov	r2, r4
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	47c0      	blx	r8
 800cf10:	3001      	adds	r0, #1
 800cf12:	d0e6      	beq.n	800cee2 <_printf_common+0xb2>
 800cf14:	f109 0901 	add.w	r9, r9, #1
 800cf18:	e7d8      	b.n	800cecc <_printf_common+0x9c>
	...

0800cf1c <_printf_i>:
 800cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cf24:	460c      	mov	r4, r1
 800cf26:	7e09      	ldrb	r1, [r1, #24]
 800cf28:	b085      	sub	sp, #20
 800cf2a:	296e      	cmp	r1, #110	; 0x6e
 800cf2c:	4617      	mov	r7, r2
 800cf2e:	4606      	mov	r6, r0
 800cf30:	4698      	mov	r8, r3
 800cf32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf34:	f000 80b3 	beq.w	800d09e <_printf_i+0x182>
 800cf38:	d822      	bhi.n	800cf80 <_printf_i+0x64>
 800cf3a:	2963      	cmp	r1, #99	; 0x63
 800cf3c:	d036      	beq.n	800cfac <_printf_i+0x90>
 800cf3e:	d80a      	bhi.n	800cf56 <_printf_i+0x3a>
 800cf40:	2900      	cmp	r1, #0
 800cf42:	f000 80b9 	beq.w	800d0b8 <_printf_i+0x19c>
 800cf46:	2958      	cmp	r1, #88	; 0x58
 800cf48:	f000 8083 	beq.w	800d052 <_printf_i+0x136>
 800cf4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cf54:	e032      	b.n	800cfbc <_printf_i+0xa0>
 800cf56:	2964      	cmp	r1, #100	; 0x64
 800cf58:	d001      	beq.n	800cf5e <_printf_i+0x42>
 800cf5a:	2969      	cmp	r1, #105	; 0x69
 800cf5c:	d1f6      	bne.n	800cf4c <_printf_i+0x30>
 800cf5e:	6820      	ldr	r0, [r4, #0]
 800cf60:	6813      	ldr	r3, [r2, #0]
 800cf62:	0605      	lsls	r5, r0, #24
 800cf64:	f103 0104 	add.w	r1, r3, #4
 800cf68:	d52a      	bpl.n	800cfc0 <_printf_i+0xa4>
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6011      	str	r1, [r2, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	da03      	bge.n	800cf7a <_printf_i+0x5e>
 800cf72:	222d      	movs	r2, #45	; 0x2d
 800cf74:	425b      	negs	r3, r3
 800cf76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cf7a:	486f      	ldr	r0, [pc, #444]	; (800d138 <_printf_i+0x21c>)
 800cf7c:	220a      	movs	r2, #10
 800cf7e:	e039      	b.n	800cff4 <_printf_i+0xd8>
 800cf80:	2973      	cmp	r1, #115	; 0x73
 800cf82:	f000 809d 	beq.w	800d0c0 <_printf_i+0x1a4>
 800cf86:	d808      	bhi.n	800cf9a <_printf_i+0x7e>
 800cf88:	296f      	cmp	r1, #111	; 0x6f
 800cf8a:	d020      	beq.n	800cfce <_printf_i+0xb2>
 800cf8c:	2970      	cmp	r1, #112	; 0x70
 800cf8e:	d1dd      	bne.n	800cf4c <_printf_i+0x30>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	f043 0320 	orr.w	r3, r3, #32
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	e003      	b.n	800cfa2 <_printf_i+0x86>
 800cf9a:	2975      	cmp	r1, #117	; 0x75
 800cf9c:	d017      	beq.n	800cfce <_printf_i+0xb2>
 800cf9e:	2978      	cmp	r1, #120	; 0x78
 800cfa0:	d1d4      	bne.n	800cf4c <_printf_i+0x30>
 800cfa2:	2378      	movs	r3, #120	; 0x78
 800cfa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfa8:	4864      	ldr	r0, [pc, #400]	; (800d13c <_printf_i+0x220>)
 800cfaa:	e055      	b.n	800d058 <_printf_i+0x13c>
 800cfac:	6813      	ldr	r3, [r2, #0]
 800cfae:	1d19      	adds	r1, r3, #4
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6011      	str	r1, [r2, #0]
 800cfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e08c      	b.n	800d0da <_printf_i+0x1be>
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6011      	str	r1, [r2, #0]
 800cfc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cfc8:	bf18      	it	ne
 800cfca:	b21b      	sxthne	r3, r3
 800cfcc:	e7cf      	b.n	800cf6e <_printf_i+0x52>
 800cfce:	6813      	ldr	r3, [r2, #0]
 800cfd0:	6825      	ldr	r5, [r4, #0]
 800cfd2:	1d18      	adds	r0, r3, #4
 800cfd4:	6010      	str	r0, [r2, #0]
 800cfd6:	0628      	lsls	r0, r5, #24
 800cfd8:	d501      	bpl.n	800cfde <_printf_i+0xc2>
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	e002      	b.n	800cfe4 <_printf_i+0xc8>
 800cfde:	0668      	lsls	r0, r5, #25
 800cfe0:	d5fb      	bpl.n	800cfda <_printf_i+0xbe>
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	4854      	ldr	r0, [pc, #336]	; (800d138 <_printf_i+0x21c>)
 800cfe6:	296f      	cmp	r1, #111	; 0x6f
 800cfe8:	bf14      	ite	ne
 800cfea:	220a      	movne	r2, #10
 800cfec:	2208      	moveq	r2, #8
 800cfee:	2100      	movs	r1, #0
 800cff0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cff4:	6865      	ldr	r5, [r4, #4]
 800cff6:	60a5      	str	r5, [r4, #8]
 800cff8:	2d00      	cmp	r5, #0
 800cffa:	f2c0 8095 	blt.w	800d128 <_printf_i+0x20c>
 800cffe:	6821      	ldr	r1, [r4, #0]
 800d000:	f021 0104 	bic.w	r1, r1, #4
 800d004:	6021      	str	r1, [r4, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d13d      	bne.n	800d086 <_printf_i+0x16a>
 800d00a:	2d00      	cmp	r5, #0
 800d00c:	f040 808e 	bne.w	800d12c <_printf_i+0x210>
 800d010:	4665      	mov	r5, ip
 800d012:	2a08      	cmp	r2, #8
 800d014:	d10b      	bne.n	800d02e <_printf_i+0x112>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	07db      	lsls	r3, r3, #31
 800d01a:	d508      	bpl.n	800d02e <_printf_i+0x112>
 800d01c:	6923      	ldr	r3, [r4, #16]
 800d01e:	6862      	ldr	r2, [r4, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	bfde      	ittt	le
 800d024:	2330      	movle	r3, #48	; 0x30
 800d026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d02a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d02e:	ebac 0305 	sub.w	r3, ip, r5
 800d032:	6123      	str	r3, [r4, #16]
 800d034:	f8cd 8000 	str.w	r8, [sp]
 800d038:	463b      	mov	r3, r7
 800d03a:	aa03      	add	r2, sp, #12
 800d03c:	4621      	mov	r1, r4
 800d03e:	4630      	mov	r0, r6
 800d040:	f7ff fef6 	bl	800ce30 <_printf_common>
 800d044:	3001      	adds	r0, #1
 800d046:	d14d      	bne.n	800d0e4 <_printf_i+0x1c8>
 800d048:	f04f 30ff 	mov.w	r0, #4294967295
 800d04c:	b005      	add	sp, #20
 800d04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d052:	4839      	ldr	r0, [pc, #228]	; (800d138 <_printf_i+0x21c>)
 800d054:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d058:	6813      	ldr	r3, [r2, #0]
 800d05a:	6821      	ldr	r1, [r4, #0]
 800d05c:	1d1d      	adds	r5, r3, #4
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6015      	str	r5, [r2, #0]
 800d062:	060a      	lsls	r2, r1, #24
 800d064:	d50b      	bpl.n	800d07e <_printf_i+0x162>
 800d066:	07ca      	lsls	r2, r1, #31
 800d068:	bf44      	itt	mi
 800d06a:	f041 0120 	orrmi.w	r1, r1, #32
 800d06e:	6021      	strmi	r1, [r4, #0]
 800d070:	b91b      	cbnz	r3, 800d07a <_printf_i+0x15e>
 800d072:	6822      	ldr	r2, [r4, #0]
 800d074:	f022 0220 	bic.w	r2, r2, #32
 800d078:	6022      	str	r2, [r4, #0]
 800d07a:	2210      	movs	r2, #16
 800d07c:	e7b7      	b.n	800cfee <_printf_i+0xd2>
 800d07e:	064d      	lsls	r5, r1, #25
 800d080:	bf48      	it	mi
 800d082:	b29b      	uxthmi	r3, r3
 800d084:	e7ef      	b.n	800d066 <_printf_i+0x14a>
 800d086:	4665      	mov	r5, ip
 800d088:	fbb3 f1f2 	udiv	r1, r3, r2
 800d08c:	fb02 3311 	mls	r3, r2, r1, r3
 800d090:	5cc3      	ldrb	r3, [r0, r3]
 800d092:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d096:	460b      	mov	r3, r1
 800d098:	2900      	cmp	r1, #0
 800d09a:	d1f5      	bne.n	800d088 <_printf_i+0x16c>
 800d09c:	e7b9      	b.n	800d012 <_printf_i+0xf6>
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	6825      	ldr	r5, [r4, #0]
 800d0a2:	6961      	ldr	r1, [r4, #20]
 800d0a4:	1d18      	adds	r0, r3, #4
 800d0a6:	6010      	str	r0, [r2, #0]
 800d0a8:	0628      	lsls	r0, r5, #24
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	d501      	bpl.n	800d0b2 <_printf_i+0x196>
 800d0ae:	6019      	str	r1, [r3, #0]
 800d0b0:	e002      	b.n	800d0b8 <_printf_i+0x19c>
 800d0b2:	066a      	lsls	r2, r5, #25
 800d0b4:	d5fb      	bpl.n	800d0ae <_printf_i+0x192>
 800d0b6:	8019      	strh	r1, [r3, #0]
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	4665      	mov	r5, ip
 800d0be:	e7b9      	b.n	800d034 <_printf_i+0x118>
 800d0c0:	6813      	ldr	r3, [r2, #0]
 800d0c2:	1d19      	adds	r1, r3, #4
 800d0c4:	6011      	str	r1, [r2, #0]
 800d0c6:	681d      	ldr	r5, [r3, #0]
 800d0c8:	6862      	ldr	r2, [r4, #4]
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f7f3 f88f 	bl	80001f0 <memchr>
 800d0d2:	b108      	cbz	r0, 800d0d8 <_printf_i+0x1bc>
 800d0d4:	1b40      	subs	r0, r0, r5
 800d0d6:	6060      	str	r0, [r4, #4]
 800d0d8:	6863      	ldr	r3, [r4, #4]
 800d0da:	6123      	str	r3, [r4, #16]
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0e2:	e7a7      	b.n	800d034 <_printf_i+0x118>
 800d0e4:	6923      	ldr	r3, [r4, #16]
 800d0e6:	462a      	mov	r2, r5
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	47c0      	blx	r8
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	d0aa      	beq.n	800d048 <_printf_i+0x12c>
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	079b      	lsls	r3, r3, #30
 800d0f6:	d413      	bmi.n	800d120 <_printf_i+0x204>
 800d0f8:	68e0      	ldr	r0, [r4, #12]
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	4298      	cmp	r0, r3
 800d0fe:	bfb8      	it	lt
 800d100:	4618      	movlt	r0, r3
 800d102:	e7a3      	b.n	800d04c <_printf_i+0x130>
 800d104:	2301      	movs	r3, #1
 800d106:	464a      	mov	r2, r9
 800d108:	4639      	mov	r1, r7
 800d10a:	4630      	mov	r0, r6
 800d10c:	47c0      	blx	r8
 800d10e:	3001      	adds	r0, #1
 800d110:	d09a      	beq.n	800d048 <_printf_i+0x12c>
 800d112:	3501      	adds	r5, #1
 800d114:	68e3      	ldr	r3, [r4, #12]
 800d116:	9a03      	ldr	r2, [sp, #12]
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	42ab      	cmp	r3, r5
 800d11c:	dcf2      	bgt.n	800d104 <_printf_i+0x1e8>
 800d11e:	e7eb      	b.n	800d0f8 <_printf_i+0x1dc>
 800d120:	2500      	movs	r5, #0
 800d122:	f104 0919 	add.w	r9, r4, #25
 800d126:	e7f5      	b.n	800d114 <_printf_i+0x1f8>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1ac      	bne.n	800d086 <_printf_i+0x16a>
 800d12c:	7803      	ldrb	r3, [r0, #0]
 800d12e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d136:	e76c      	b.n	800d012 <_printf_i+0xf6>
 800d138:	0800e531 	.word	0x0800e531
 800d13c:	0800e542 	.word	0x0800e542

0800d140 <memcpy>:
 800d140:	b510      	push	{r4, lr}
 800d142:	1e43      	subs	r3, r0, #1
 800d144:	440a      	add	r2, r1
 800d146:	4291      	cmp	r1, r2
 800d148:	d100      	bne.n	800d14c <memcpy+0xc>
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d150:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d154:	e7f7      	b.n	800d146 <memcpy+0x6>

0800d156 <memmove>:
 800d156:	4288      	cmp	r0, r1
 800d158:	b510      	push	{r4, lr}
 800d15a:	eb01 0302 	add.w	r3, r1, r2
 800d15e:	d807      	bhi.n	800d170 <memmove+0x1a>
 800d160:	1e42      	subs	r2, r0, #1
 800d162:	4299      	cmp	r1, r3
 800d164:	d00a      	beq.n	800d17c <memmove+0x26>
 800d166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d16e:	e7f8      	b.n	800d162 <memmove+0xc>
 800d170:	4283      	cmp	r3, r0
 800d172:	d9f5      	bls.n	800d160 <memmove+0xa>
 800d174:	1881      	adds	r1, r0, r2
 800d176:	1ad2      	subs	r2, r2, r3
 800d178:	42d3      	cmn	r3, r2
 800d17a:	d100      	bne.n	800d17e <memmove+0x28>
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d182:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d186:	e7f7      	b.n	800d178 <memmove+0x22>

0800d188 <_free_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4605      	mov	r5, r0
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d045      	beq.n	800d21c <_free_r+0x94>
 800d190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d194:	1f0c      	subs	r4, r1, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfb8      	it	lt
 800d19a:	18e4      	addlt	r4, r4, r3
 800d19c:	f000 f8d2 	bl	800d344 <__malloc_lock>
 800d1a0:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <_free_r+0x98>)
 800d1a2:	6813      	ldr	r3, [r2, #0]
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	b933      	cbnz	r3, 800d1b6 <_free_r+0x2e>
 800d1a8:	6063      	str	r3, [r4, #4]
 800d1aa:	6014      	str	r4, [r2, #0]
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b2:	f000 b8c8 	b.w	800d346 <__malloc_unlock>
 800d1b6:	42a3      	cmp	r3, r4
 800d1b8:	d90c      	bls.n	800d1d4 <_free_r+0x4c>
 800d1ba:	6821      	ldr	r1, [r4, #0]
 800d1bc:	1862      	adds	r2, r4, r1
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	bf04      	itt	eq
 800d1c2:	681a      	ldreq	r2, [r3, #0]
 800d1c4:	685b      	ldreq	r3, [r3, #4]
 800d1c6:	6063      	str	r3, [r4, #4]
 800d1c8:	bf04      	itt	eq
 800d1ca:	1852      	addeq	r2, r2, r1
 800d1cc:	6022      	streq	r2, [r4, #0]
 800d1ce:	6004      	str	r4, [r0, #0]
 800d1d0:	e7ec      	b.n	800d1ac <_free_r+0x24>
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	b10a      	cbz	r2, 800d1dc <_free_r+0x54>
 800d1d8:	42a2      	cmp	r2, r4
 800d1da:	d9fa      	bls.n	800d1d2 <_free_r+0x4a>
 800d1dc:	6819      	ldr	r1, [r3, #0]
 800d1de:	1858      	adds	r0, r3, r1
 800d1e0:	42a0      	cmp	r0, r4
 800d1e2:	d10b      	bne.n	800d1fc <_free_r+0x74>
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	4401      	add	r1, r0
 800d1e8:	1858      	adds	r0, r3, r1
 800d1ea:	4282      	cmp	r2, r0
 800d1ec:	6019      	str	r1, [r3, #0]
 800d1ee:	d1dd      	bne.n	800d1ac <_free_r+0x24>
 800d1f0:	6810      	ldr	r0, [r2, #0]
 800d1f2:	6852      	ldr	r2, [r2, #4]
 800d1f4:	605a      	str	r2, [r3, #4]
 800d1f6:	4401      	add	r1, r0
 800d1f8:	6019      	str	r1, [r3, #0]
 800d1fa:	e7d7      	b.n	800d1ac <_free_r+0x24>
 800d1fc:	d902      	bls.n	800d204 <_free_r+0x7c>
 800d1fe:	230c      	movs	r3, #12
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	e7d3      	b.n	800d1ac <_free_r+0x24>
 800d204:	6820      	ldr	r0, [r4, #0]
 800d206:	1821      	adds	r1, r4, r0
 800d208:	428a      	cmp	r2, r1
 800d20a:	bf04      	itt	eq
 800d20c:	6811      	ldreq	r1, [r2, #0]
 800d20e:	6852      	ldreq	r2, [r2, #4]
 800d210:	6062      	str	r2, [r4, #4]
 800d212:	bf04      	itt	eq
 800d214:	1809      	addeq	r1, r1, r0
 800d216:	6021      	streq	r1, [r4, #0]
 800d218:	605c      	str	r4, [r3, #4]
 800d21a:	e7c7      	b.n	800d1ac <_free_r+0x24>
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	200000b4 	.word	0x200000b4

0800d224 <_malloc_r>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	1ccd      	adds	r5, r1, #3
 800d228:	f025 0503 	bic.w	r5, r5, #3
 800d22c:	3508      	adds	r5, #8
 800d22e:	2d0c      	cmp	r5, #12
 800d230:	bf38      	it	cc
 800d232:	250c      	movcc	r5, #12
 800d234:	2d00      	cmp	r5, #0
 800d236:	4606      	mov	r6, r0
 800d238:	db01      	blt.n	800d23e <_malloc_r+0x1a>
 800d23a:	42a9      	cmp	r1, r5
 800d23c:	d903      	bls.n	800d246 <_malloc_r+0x22>
 800d23e:	230c      	movs	r3, #12
 800d240:	6033      	str	r3, [r6, #0]
 800d242:	2000      	movs	r0, #0
 800d244:	bd70      	pop	{r4, r5, r6, pc}
 800d246:	f000 f87d 	bl	800d344 <__malloc_lock>
 800d24a:	4a21      	ldr	r2, [pc, #132]	; (800d2d0 <_malloc_r+0xac>)
 800d24c:	6814      	ldr	r4, [r2, #0]
 800d24e:	4621      	mov	r1, r4
 800d250:	b991      	cbnz	r1, 800d278 <_malloc_r+0x54>
 800d252:	4c20      	ldr	r4, [pc, #128]	; (800d2d4 <_malloc_r+0xb0>)
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	b91b      	cbnz	r3, 800d260 <_malloc_r+0x3c>
 800d258:	4630      	mov	r0, r6
 800d25a:	f000 f863 	bl	800d324 <_sbrk_r>
 800d25e:	6020      	str	r0, [r4, #0]
 800d260:	4629      	mov	r1, r5
 800d262:	4630      	mov	r0, r6
 800d264:	f000 f85e 	bl	800d324 <_sbrk_r>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d124      	bne.n	800d2b6 <_malloc_r+0x92>
 800d26c:	230c      	movs	r3, #12
 800d26e:	6033      	str	r3, [r6, #0]
 800d270:	4630      	mov	r0, r6
 800d272:	f000 f868 	bl	800d346 <__malloc_unlock>
 800d276:	e7e4      	b.n	800d242 <_malloc_r+0x1e>
 800d278:	680b      	ldr	r3, [r1, #0]
 800d27a:	1b5b      	subs	r3, r3, r5
 800d27c:	d418      	bmi.n	800d2b0 <_malloc_r+0x8c>
 800d27e:	2b0b      	cmp	r3, #11
 800d280:	d90f      	bls.n	800d2a2 <_malloc_r+0x7e>
 800d282:	600b      	str	r3, [r1, #0]
 800d284:	50cd      	str	r5, [r1, r3]
 800d286:	18cc      	adds	r4, r1, r3
 800d288:	4630      	mov	r0, r6
 800d28a:	f000 f85c 	bl	800d346 <__malloc_unlock>
 800d28e:	f104 000b 	add.w	r0, r4, #11
 800d292:	1d23      	adds	r3, r4, #4
 800d294:	f020 0007 	bic.w	r0, r0, #7
 800d298:	1ac3      	subs	r3, r0, r3
 800d29a:	d0d3      	beq.n	800d244 <_malloc_r+0x20>
 800d29c:	425a      	negs	r2, r3
 800d29e:	50e2      	str	r2, [r4, r3]
 800d2a0:	e7d0      	b.n	800d244 <_malloc_r+0x20>
 800d2a2:	428c      	cmp	r4, r1
 800d2a4:	684b      	ldr	r3, [r1, #4]
 800d2a6:	bf16      	itet	ne
 800d2a8:	6063      	strne	r3, [r4, #4]
 800d2aa:	6013      	streq	r3, [r2, #0]
 800d2ac:	460c      	movne	r4, r1
 800d2ae:	e7eb      	b.n	800d288 <_malloc_r+0x64>
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	6849      	ldr	r1, [r1, #4]
 800d2b4:	e7cc      	b.n	800d250 <_malloc_r+0x2c>
 800d2b6:	1cc4      	adds	r4, r0, #3
 800d2b8:	f024 0403 	bic.w	r4, r4, #3
 800d2bc:	42a0      	cmp	r0, r4
 800d2be:	d005      	beq.n	800d2cc <_malloc_r+0xa8>
 800d2c0:	1a21      	subs	r1, r4, r0
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f000 f82e 	bl	800d324 <_sbrk_r>
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	d0cf      	beq.n	800d26c <_malloc_r+0x48>
 800d2cc:	6025      	str	r5, [r4, #0]
 800d2ce:	e7db      	b.n	800d288 <_malloc_r+0x64>
 800d2d0:	200000b4 	.word	0x200000b4
 800d2d4:	200000b8 	.word	0x200000b8

0800d2d8 <_realloc_r>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	4607      	mov	r7, r0
 800d2dc:	4614      	mov	r4, r2
 800d2de:	460e      	mov	r6, r1
 800d2e0:	b921      	cbnz	r1, 800d2ec <_realloc_r+0x14>
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2e8:	f7ff bf9c 	b.w	800d224 <_malloc_r>
 800d2ec:	b922      	cbnz	r2, 800d2f8 <_realloc_r+0x20>
 800d2ee:	f7ff ff4b 	bl	800d188 <_free_r>
 800d2f2:	4625      	mov	r5, r4
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f8:	f000 f826 	bl	800d348 <_malloc_usable_size_r>
 800d2fc:	42a0      	cmp	r0, r4
 800d2fe:	d20f      	bcs.n	800d320 <_realloc_r+0x48>
 800d300:	4621      	mov	r1, r4
 800d302:	4638      	mov	r0, r7
 800d304:	f7ff ff8e 	bl	800d224 <_malloc_r>
 800d308:	4605      	mov	r5, r0
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d0f2      	beq.n	800d2f4 <_realloc_r+0x1c>
 800d30e:	4631      	mov	r1, r6
 800d310:	4622      	mov	r2, r4
 800d312:	f7ff ff15 	bl	800d140 <memcpy>
 800d316:	4631      	mov	r1, r6
 800d318:	4638      	mov	r0, r7
 800d31a:	f7ff ff35 	bl	800d188 <_free_r>
 800d31e:	e7e9      	b.n	800d2f4 <_realloc_r+0x1c>
 800d320:	4635      	mov	r5, r6
 800d322:	e7e7      	b.n	800d2f4 <_realloc_r+0x1c>

0800d324 <_sbrk_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4c06      	ldr	r4, [pc, #24]	; (800d340 <_sbrk_r+0x1c>)
 800d328:	2300      	movs	r3, #0
 800d32a:	4605      	mov	r5, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	f7f8 fdbe 	bl	8005eb0 <_sbrk>
 800d334:	1c43      	adds	r3, r0, #1
 800d336:	d102      	bne.n	800d33e <_sbrk_r+0x1a>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	b103      	cbz	r3, 800d33e <_sbrk_r+0x1a>
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	bd38      	pop	{r3, r4, r5, pc}
 800d340:	20001680 	.word	0x20001680

0800d344 <__malloc_lock>:
 800d344:	4770      	bx	lr

0800d346 <__malloc_unlock>:
 800d346:	4770      	bx	lr

0800d348 <_malloc_usable_size_r>:
 800d348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d34c:	1f18      	subs	r0, r3, #4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	bfbc      	itt	lt
 800d352:	580b      	ldrlt	r3, [r1, r0]
 800d354:	18c0      	addlt	r0, r0, r3
 800d356:	4770      	bx	lr

0800d358 <sin>:
 800d358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d35a:	ec51 0b10 	vmov	r0, r1, d0
 800d35e:	4a20      	ldr	r2, [pc, #128]	; (800d3e0 <sin+0x88>)
 800d360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d364:	4293      	cmp	r3, r2
 800d366:	dc07      	bgt.n	800d378 <sin+0x20>
 800d368:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d3d8 <sin+0x80>
 800d36c:	2000      	movs	r0, #0
 800d36e:	f000 fe37 	bl	800dfe0 <__kernel_sin>
 800d372:	ec51 0b10 	vmov	r0, r1, d0
 800d376:	e007      	b.n	800d388 <sin+0x30>
 800d378:	4a1a      	ldr	r2, [pc, #104]	; (800d3e4 <sin+0x8c>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	dd09      	ble.n	800d392 <sin+0x3a>
 800d37e:	ee10 2a10 	vmov	r2, s0
 800d382:	460b      	mov	r3, r1
 800d384:	f7f2 ff88 	bl	8000298 <__aeabi_dsub>
 800d388:	ec41 0b10 	vmov	d0, r0, r1
 800d38c:	b005      	add	sp, #20
 800d38e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d392:	4668      	mov	r0, sp
 800d394:	f000 f828 	bl	800d3e8 <__ieee754_rem_pio2>
 800d398:	f000 0003 	and.w	r0, r0, #3
 800d39c:	2801      	cmp	r0, #1
 800d39e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3a2:	ed9d 0b00 	vldr	d0, [sp]
 800d3a6:	d004      	beq.n	800d3b2 <sin+0x5a>
 800d3a8:	2802      	cmp	r0, #2
 800d3aa:	d005      	beq.n	800d3b8 <sin+0x60>
 800d3ac:	b970      	cbnz	r0, 800d3cc <sin+0x74>
 800d3ae:	2001      	movs	r0, #1
 800d3b0:	e7dd      	b.n	800d36e <sin+0x16>
 800d3b2:	f000 fa0d 	bl	800d7d0 <__kernel_cos>
 800d3b6:	e7dc      	b.n	800d372 <sin+0x1a>
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f000 fe11 	bl	800dfe0 <__kernel_sin>
 800d3be:	ec53 2b10 	vmov	r2, r3, d0
 800d3c2:	ee10 0a10 	vmov	r0, s0
 800d3c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3ca:	e7dd      	b.n	800d388 <sin+0x30>
 800d3cc:	f000 fa00 	bl	800d7d0 <__kernel_cos>
 800d3d0:	e7f5      	b.n	800d3be <sin+0x66>
 800d3d2:	bf00      	nop
 800d3d4:	f3af 8000 	nop.w
	...
 800d3e0:	3fe921fb 	.word	0x3fe921fb
 800d3e4:	7fefffff 	.word	0x7fefffff

0800d3e8 <__ieee754_rem_pio2>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	ec57 6b10 	vmov	r6, r7, d0
 800d3f0:	4bc3      	ldr	r3, [pc, #780]	; (800d700 <__ieee754_rem_pio2+0x318>)
 800d3f2:	b08d      	sub	sp, #52	; 0x34
 800d3f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d3f8:	4598      	cmp	r8, r3
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	9704      	str	r7, [sp, #16]
 800d3fe:	dc07      	bgt.n	800d410 <__ieee754_rem_pio2+0x28>
 800d400:	2200      	movs	r2, #0
 800d402:	2300      	movs	r3, #0
 800d404:	ed84 0b00 	vstr	d0, [r4]
 800d408:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d40c:	2500      	movs	r5, #0
 800d40e:	e027      	b.n	800d460 <__ieee754_rem_pio2+0x78>
 800d410:	4bbc      	ldr	r3, [pc, #752]	; (800d704 <__ieee754_rem_pio2+0x31c>)
 800d412:	4598      	cmp	r8, r3
 800d414:	dc75      	bgt.n	800d502 <__ieee754_rem_pio2+0x11a>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	4dbb      	ldr	r5, [pc, #748]	; (800d708 <__ieee754_rem_pio2+0x320>)
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	ee10 0a10 	vmov	r0, s0
 800d420:	a3a9      	add	r3, pc, #676	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x2e0>)
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	4639      	mov	r1, r7
 800d428:	dd36      	ble.n	800d498 <__ieee754_rem_pio2+0xb0>
 800d42a:	f7f2 ff35 	bl	8000298 <__aeabi_dsub>
 800d42e:	45a8      	cmp	r8, r5
 800d430:	4606      	mov	r6, r0
 800d432:	460f      	mov	r7, r1
 800d434:	d018      	beq.n	800d468 <__ieee754_rem_pio2+0x80>
 800d436:	a3a6      	add	r3, pc, #664	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2e8>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f2 ff2c 	bl	8000298 <__aeabi_dsub>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	e9c4 2300 	strd	r2, r3, [r4]
 800d448:	4630      	mov	r0, r6
 800d44a:	4639      	mov	r1, r7
 800d44c:	f7f2 ff24 	bl	8000298 <__aeabi_dsub>
 800d450:	a39f      	add	r3, pc, #636	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2e8>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f7f2 ff1f 	bl	8000298 <__aeabi_dsub>
 800d45a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d45e:	2501      	movs	r5, #1
 800d460:	4628      	mov	r0, r5
 800d462:	b00d      	add	sp, #52	; 0x34
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	a39b      	add	r3, pc, #620	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x2f0>)
 800d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46e:	f7f2 ff13 	bl	8000298 <__aeabi_dsub>
 800d472:	a39b      	add	r3, pc, #620	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2f8>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	4606      	mov	r6, r0
 800d47a:	460f      	mov	r7, r1
 800d47c:	f7f2 ff0c 	bl	8000298 <__aeabi_dsub>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	e9c4 2300 	strd	r2, r3, [r4]
 800d488:	4630      	mov	r0, r6
 800d48a:	4639      	mov	r1, r7
 800d48c:	f7f2 ff04 	bl	8000298 <__aeabi_dsub>
 800d490:	a393      	add	r3, pc, #588	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2f8>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	e7de      	b.n	800d456 <__ieee754_rem_pio2+0x6e>
 800d498:	f7f2 ff00 	bl	800029c <__adddf3>
 800d49c:	45a8      	cmp	r8, r5
 800d49e:	4606      	mov	r6, r0
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	d016      	beq.n	800d4d2 <__ieee754_rem_pio2+0xea>
 800d4a4:	a38a      	add	r3, pc, #552	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2e8>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 fef7 	bl	800029c <__adddf3>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	e9c4 2300 	strd	r2, r3, [r4]
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	f7f2 feed 	bl	8000298 <__aeabi_dsub>
 800d4be:	a384      	add	r3, pc, #528	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2e8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f2 feea 	bl	800029c <__adddf3>
 800d4c8:	f04f 35ff 	mov.w	r5, #4294967295
 800d4cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4d0:	e7c6      	b.n	800d460 <__ieee754_rem_pio2+0x78>
 800d4d2:	a381      	add	r3, pc, #516	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x2f0>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f7f2 fee0 	bl	800029c <__adddf3>
 800d4dc:	a380      	add	r3, pc, #512	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2f8>)
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	f7f2 fed9 	bl	800029c <__adddf3>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9c4 2300 	strd	r2, r3, [r4]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	f7f2 fecf 	bl	8000298 <__aeabi_dsub>
 800d4fa:	a379      	add	r3, pc, #484	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2f8>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	e7e0      	b.n	800d4c4 <__ieee754_rem_pio2+0xdc>
 800d502:	4b82      	ldr	r3, [pc, #520]	; (800d70c <__ieee754_rem_pio2+0x324>)
 800d504:	4598      	cmp	r8, r3
 800d506:	f300 80d0 	bgt.w	800d6aa <__ieee754_rem_pio2+0x2c2>
 800d50a:	f000 fe23 	bl	800e154 <fabs>
 800d50e:	ec57 6b10 	vmov	r6, r7, d0
 800d512:	ee10 0a10 	vmov	r0, s0
 800d516:	a374      	add	r3, pc, #464	; (adr r3, 800d6e8 <__ieee754_rem_pio2+0x300>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	4639      	mov	r1, r7
 800d51e:	f7f3 f873 	bl	8000608 <__aeabi_dmul>
 800d522:	2200      	movs	r2, #0
 800d524:	4b7a      	ldr	r3, [pc, #488]	; (800d710 <__ieee754_rem_pio2+0x328>)
 800d526:	f7f2 feb9 	bl	800029c <__adddf3>
 800d52a:	f7f3 fb07 	bl	8000b3c <__aeabi_d2iz>
 800d52e:	4605      	mov	r5, r0
 800d530:	f7f3 f800 	bl	8000534 <__aeabi_i2d>
 800d534:	a364      	add	r3, pc, #400	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x2e0>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d53e:	f7f3 f863 	bl	8000608 <__aeabi_dmul>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4630      	mov	r0, r6
 800d548:	4639      	mov	r1, r7
 800d54a:	f7f2 fea5 	bl	8000298 <__aeabi_dsub>
 800d54e:	a360      	add	r3, pc, #384	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2e8>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	4682      	mov	sl, r0
 800d556:	468b      	mov	fp, r1
 800d558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d55c:	f7f3 f854 	bl	8000608 <__aeabi_dmul>
 800d560:	2d1f      	cmp	r5, #31
 800d562:	4606      	mov	r6, r0
 800d564:	460f      	mov	r7, r1
 800d566:	dc0c      	bgt.n	800d582 <__ieee754_rem_pio2+0x19a>
 800d568:	1e6a      	subs	r2, r5, #1
 800d56a:	4b6a      	ldr	r3, [pc, #424]	; (800d714 <__ieee754_rem_pio2+0x32c>)
 800d56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d570:	4543      	cmp	r3, r8
 800d572:	d006      	beq.n	800d582 <__ieee754_rem_pio2+0x19a>
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	4650      	mov	r0, sl
 800d57a:	4659      	mov	r1, fp
 800d57c:	f7f2 fe8c 	bl	8000298 <__aeabi_dsub>
 800d580:	e00e      	b.n	800d5a0 <__ieee754_rem_pio2+0x1b8>
 800d582:	4632      	mov	r2, r6
 800d584:	463b      	mov	r3, r7
 800d586:	4650      	mov	r0, sl
 800d588:	4659      	mov	r1, fp
 800d58a:	f7f2 fe85 	bl	8000298 <__aeabi_dsub>
 800d58e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d592:	9305      	str	r3, [sp, #20]
 800d594:	9a05      	ldr	r2, [sp, #20]
 800d596:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	2b10      	cmp	r3, #16
 800d59e:	dc02      	bgt.n	800d5a6 <__ieee754_rem_pio2+0x1be>
 800d5a0:	e9c4 0100 	strd	r0, r1, [r4]
 800d5a4:	e039      	b.n	800d61a <__ieee754_rem_pio2+0x232>
 800d5a6:	a34c      	add	r3, pc, #304	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x2f0>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b0:	f7f3 f82a 	bl	8000608 <__aeabi_dmul>
 800d5b4:	4606      	mov	r6, r0
 800d5b6:	460f      	mov	r7, r1
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4650      	mov	r0, sl
 800d5be:	4659      	mov	r1, fp
 800d5c0:	f7f2 fe6a 	bl	8000298 <__aeabi_dsub>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4689      	mov	r9, r1
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	4659      	mov	r1, fp
 800d5d0:	f7f2 fe62 	bl	8000298 <__aeabi_dsub>
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	463b      	mov	r3, r7
 800d5d8:	f7f2 fe5e 	bl	8000298 <__aeabi_dsub>
 800d5dc:	a340      	add	r3, pc, #256	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2f8>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	f7f3 f80d 	bl	8000608 <__aeabi_dmul>
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	463b      	mov	r3, r7
 800d5f2:	f7f2 fe51 	bl	8000298 <__aeabi_dsub>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	4640      	mov	r0, r8
 800d600:	4649      	mov	r1, r9
 800d602:	f7f2 fe49 	bl	8000298 <__aeabi_dsub>
 800d606:	9a05      	ldr	r2, [sp, #20]
 800d608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	2b31      	cmp	r3, #49	; 0x31
 800d610:	dc20      	bgt.n	800d654 <__ieee754_rem_pio2+0x26c>
 800d612:	e9c4 0100 	strd	r0, r1, [r4]
 800d616:	46c2      	mov	sl, r8
 800d618:	46cb      	mov	fp, r9
 800d61a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d61e:	4650      	mov	r0, sl
 800d620:	4642      	mov	r2, r8
 800d622:	464b      	mov	r3, r9
 800d624:	4659      	mov	r1, fp
 800d626:	f7f2 fe37 	bl	8000298 <__aeabi_dsub>
 800d62a:	463b      	mov	r3, r7
 800d62c:	4632      	mov	r2, r6
 800d62e:	f7f2 fe33 	bl	8000298 <__aeabi_dsub>
 800d632:	9b04      	ldr	r3, [sp, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d63a:	f6bf af11 	bge.w	800d460 <__ieee754_rem_pio2+0x78>
 800d63e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d642:	6063      	str	r3, [r4, #4]
 800d644:	f8c4 8000 	str.w	r8, [r4]
 800d648:	60a0      	str	r0, [r4, #8]
 800d64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d64e:	60e3      	str	r3, [r4, #12]
 800d650:	426d      	negs	r5, r5
 800d652:	e705      	b.n	800d460 <__ieee754_rem_pio2+0x78>
 800d654:	a326      	add	r3, pc, #152	; (adr r3, 800d6f0 <__ieee754_rem_pio2+0x308>)
 800d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d65e:	f7f2 ffd3 	bl	8000608 <__aeabi_dmul>
 800d662:	4606      	mov	r6, r0
 800d664:	460f      	mov	r7, r1
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4640      	mov	r0, r8
 800d66c:	4649      	mov	r1, r9
 800d66e:	f7f2 fe13 	bl	8000298 <__aeabi_dsub>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4682      	mov	sl, r0
 800d678:	468b      	mov	fp, r1
 800d67a:	4640      	mov	r0, r8
 800d67c:	4649      	mov	r1, r9
 800d67e:	f7f2 fe0b 	bl	8000298 <__aeabi_dsub>
 800d682:	4632      	mov	r2, r6
 800d684:	463b      	mov	r3, r7
 800d686:	f7f2 fe07 	bl	8000298 <__aeabi_dsub>
 800d68a:	a31b      	add	r3, pc, #108	; (adr r3, 800d6f8 <__ieee754_rem_pio2+0x310>)
 800d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d690:	4606      	mov	r6, r0
 800d692:	460f      	mov	r7, r1
 800d694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d698:	f7f2 ffb6 	bl	8000608 <__aeabi_dmul>
 800d69c:	4632      	mov	r2, r6
 800d69e:	463b      	mov	r3, r7
 800d6a0:	f7f2 fdfa 	bl	8000298 <__aeabi_dsub>
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	460f      	mov	r7, r1
 800d6a8:	e764      	b.n	800d574 <__ieee754_rem_pio2+0x18c>
 800d6aa:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <__ieee754_rem_pio2+0x330>)
 800d6ac:	4598      	cmp	r8, r3
 800d6ae:	dd35      	ble.n	800d71c <__ieee754_rem_pio2+0x334>
 800d6b0:	ee10 2a10 	vmov	r2, s0
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	f7f2 fded 	bl	8000298 <__aeabi_dsub>
 800d6be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6c2:	e9c4 0100 	strd	r0, r1, [r4]
 800d6c6:	e6a1      	b.n	800d40c <__ieee754_rem_pio2+0x24>
 800d6c8:	54400000 	.word	0x54400000
 800d6cc:	3ff921fb 	.word	0x3ff921fb
 800d6d0:	1a626331 	.word	0x1a626331
 800d6d4:	3dd0b461 	.word	0x3dd0b461
 800d6d8:	1a600000 	.word	0x1a600000
 800d6dc:	3dd0b461 	.word	0x3dd0b461
 800d6e0:	2e037073 	.word	0x2e037073
 800d6e4:	3ba3198a 	.word	0x3ba3198a
 800d6e8:	6dc9c883 	.word	0x6dc9c883
 800d6ec:	3fe45f30 	.word	0x3fe45f30
 800d6f0:	2e000000 	.word	0x2e000000
 800d6f4:	3ba3198a 	.word	0x3ba3198a
 800d6f8:	252049c1 	.word	0x252049c1
 800d6fc:	397b839a 	.word	0x397b839a
 800d700:	3fe921fb 	.word	0x3fe921fb
 800d704:	4002d97b 	.word	0x4002d97b
 800d708:	3ff921fb 	.word	0x3ff921fb
 800d70c:	413921fb 	.word	0x413921fb
 800d710:	3fe00000 	.word	0x3fe00000
 800d714:	0800e554 	.word	0x0800e554
 800d718:	7fefffff 	.word	0x7fefffff
 800d71c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d720:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d724:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d728:	4630      	mov	r0, r6
 800d72a:	460f      	mov	r7, r1
 800d72c:	f7f3 fa06 	bl	8000b3c <__aeabi_d2iz>
 800d730:	f7f2 ff00 	bl	8000534 <__aeabi_i2d>
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4630      	mov	r0, r6
 800d73a:	4639      	mov	r1, r7
 800d73c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d740:	f7f2 fdaa 	bl	8000298 <__aeabi_dsub>
 800d744:	2200      	movs	r2, #0
 800d746:	4b1f      	ldr	r3, [pc, #124]	; (800d7c4 <__ieee754_rem_pio2+0x3dc>)
 800d748:	f7f2 ff5e 	bl	8000608 <__aeabi_dmul>
 800d74c:	460f      	mov	r7, r1
 800d74e:	4606      	mov	r6, r0
 800d750:	f7f3 f9f4 	bl	8000b3c <__aeabi_d2iz>
 800d754:	f7f2 feee 	bl	8000534 <__aeabi_i2d>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d764:	f7f2 fd98 	bl	8000298 <__aeabi_dsub>
 800d768:	2200      	movs	r2, #0
 800d76a:	4b16      	ldr	r3, [pc, #88]	; (800d7c4 <__ieee754_rem_pio2+0x3dc>)
 800d76c:	f7f2 ff4c 	bl	8000608 <__aeabi_dmul>
 800d770:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d774:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d778:	f04f 0803 	mov.w	r8, #3
 800d77c:	2600      	movs	r6, #0
 800d77e:	2700      	movs	r7, #0
 800d780:	4632      	mov	r2, r6
 800d782:	463b      	mov	r3, r7
 800d784:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d788:	f108 3aff 	add.w	sl, r8, #4294967295
 800d78c:	f7f3 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d790:	b9b0      	cbnz	r0, 800d7c0 <__ieee754_rem_pio2+0x3d8>
 800d792:	4b0d      	ldr	r3, [pc, #52]	; (800d7c8 <__ieee754_rem_pio2+0x3e0>)
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	2302      	movs	r3, #2
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	462a      	mov	r2, r5
 800d79c:	4643      	mov	r3, r8
 800d79e:	4621      	mov	r1, r4
 800d7a0:	a806      	add	r0, sp, #24
 800d7a2:	f000 f8dd 	bl	800d960 <__kernel_rem_pio2>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	f6bf ae58 	bge.w	800d460 <__ieee754_rem_pio2+0x78>
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7b6:	6063      	str	r3, [r4, #4]
 800d7b8:	68e3      	ldr	r3, [r4, #12]
 800d7ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7be:	e746      	b.n	800d64e <__ieee754_rem_pio2+0x266>
 800d7c0:	46d0      	mov	r8, sl
 800d7c2:	e7dd      	b.n	800d780 <__ieee754_rem_pio2+0x398>
 800d7c4:	41700000 	.word	0x41700000
 800d7c8:	0800e5d4 	.word	0x0800e5d4
 800d7cc:	00000000 	.word	0x00000000

0800d7d0 <__kernel_cos>:
 800d7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ec59 8b10 	vmov	r8, r9, d0
 800d7d8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d7dc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d7e0:	ed2d 8b02 	vpush	{d8}
 800d7e4:	eeb0 8a41 	vmov.f32	s16, s2
 800d7e8:	eef0 8a61 	vmov.f32	s17, s3
 800d7ec:	da07      	bge.n	800d7fe <__kernel_cos+0x2e>
 800d7ee:	ee10 0a10 	vmov	r0, s0
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	f7f3 f9a2 	bl	8000b3c <__aeabi_d2iz>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f000 8089 	beq.w	800d910 <__kernel_cos+0x140>
 800d7fe:	4642      	mov	r2, r8
 800d800:	464b      	mov	r3, r9
 800d802:	4640      	mov	r0, r8
 800d804:	4649      	mov	r1, r9
 800d806:	f7f2 feff 	bl	8000608 <__aeabi_dmul>
 800d80a:	2200      	movs	r2, #0
 800d80c:	4b4e      	ldr	r3, [pc, #312]	; (800d948 <__kernel_cos+0x178>)
 800d80e:	4604      	mov	r4, r0
 800d810:	460d      	mov	r5, r1
 800d812:	f7f2 fef9 	bl	8000608 <__aeabi_dmul>
 800d816:	a340      	add	r3, pc, #256	; (adr r3, 800d918 <__kernel_cos+0x148>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	4682      	mov	sl, r0
 800d81e:	468b      	mov	fp, r1
 800d820:	4620      	mov	r0, r4
 800d822:	4629      	mov	r1, r5
 800d824:	f7f2 fef0 	bl	8000608 <__aeabi_dmul>
 800d828:	a33d      	add	r3, pc, #244	; (adr r3, 800d920 <__kernel_cos+0x150>)
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	f7f2 fd35 	bl	800029c <__adddf3>
 800d832:	4622      	mov	r2, r4
 800d834:	462b      	mov	r3, r5
 800d836:	f7f2 fee7 	bl	8000608 <__aeabi_dmul>
 800d83a:	a33b      	add	r3, pc, #236	; (adr r3, 800d928 <__kernel_cos+0x158>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 fd2a 	bl	8000298 <__aeabi_dsub>
 800d844:	4622      	mov	r2, r4
 800d846:	462b      	mov	r3, r5
 800d848:	f7f2 fede 	bl	8000608 <__aeabi_dmul>
 800d84c:	a338      	add	r3, pc, #224	; (adr r3, 800d930 <__kernel_cos+0x160>)
 800d84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d852:	f7f2 fd23 	bl	800029c <__adddf3>
 800d856:	4622      	mov	r2, r4
 800d858:	462b      	mov	r3, r5
 800d85a:	f7f2 fed5 	bl	8000608 <__aeabi_dmul>
 800d85e:	a336      	add	r3, pc, #216	; (adr r3, 800d938 <__kernel_cos+0x168>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f7f2 fd18 	bl	8000298 <__aeabi_dsub>
 800d868:	4622      	mov	r2, r4
 800d86a:	462b      	mov	r3, r5
 800d86c:	f7f2 fecc 	bl	8000608 <__aeabi_dmul>
 800d870:	a333      	add	r3, pc, #204	; (adr r3, 800d940 <__kernel_cos+0x170>)
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	f7f2 fd11 	bl	800029c <__adddf3>
 800d87a:	4622      	mov	r2, r4
 800d87c:	462b      	mov	r3, r5
 800d87e:	f7f2 fec3 	bl	8000608 <__aeabi_dmul>
 800d882:	4622      	mov	r2, r4
 800d884:	462b      	mov	r3, r5
 800d886:	f7f2 febf 	bl	8000608 <__aeabi_dmul>
 800d88a:	ec53 2b18 	vmov	r2, r3, d8
 800d88e:	4604      	mov	r4, r0
 800d890:	460d      	mov	r5, r1
 800d892:	4640      	mov	r0, r8
 800d894:	4649      	mov	r1, r9
 800d896:	f7f2 feb7 	bl	8000608 <__aeabi_dmul>
 800d89a:	460b      	mov	r3, r1
 800d89c:	4602      	mov	r2, r0
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f7f2 fcf9 	bl	8000298 <__aeabi_dsub>
 800d8a6:	4b29      	ldr	r3, [pc, #164]	; (800d94c <__kernel_cos+0x17c>)
 800d8a8:	429e      	cmp	r6, r3
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	dc11      	bgt.n	800d8d4 <__kernel_cos+0x104>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4650      	mov	r0, sl
 800d8b6:	4659      	mov	r1, fp
 800d8b8:	f7f2 fcee 	bl	8000298 <__aeabi_dsub>
 800d8bc:	460b      	mov	r3, r1
 800d8be:	4924      	ldr	r1, [pc, #144]	; (800d950 <__kernel_cos+0x180>)
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	f7f2 fce8 	bl	8000298 <__aeabi_dsub>
 800d8c8:	ecbd 8b02 	vpop	{d8}
 800d8cc:	ec41 0b10 	vmov	d0, r0, r1
 800d8d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d4:	4b1f      	ldr	r3, [pc, #124]	; (800d954 <__kernel_cos+0x184>)
 800d8d6:	491e      	ldr	r1, [pc, #120]	; (800d950 <__kernel_cos+0x180>)
 800d8d8:	429e      	cmp	r6, r3
 800d8da:	bfcc      	ite	gt
 800d8dc:	4d1e      	ldrgt	r5, [pc, #120]	; (800d958 <__kernel_cos+0x188>)
 800d8de:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d8e2:	2400      	movs	r4, #0
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	462b      	mov	r3, r5
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f7f2 fcd5 	bl	8000298 <__aeabi_dsub>
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	4606      	mov	r6, r0
 800d8f2:	460f      	mov	r7, r1
 800d8f4:	462b      	mov	r3, r5
 800d8f6:	4650      	mov	r0, sl
 800d8f8:	4659      	mov	r1, fp
 800d8fa:	f7f2 fccd 	bl	8000298 <__aeabi_dsub>
 800d8fe:	4642      	mov	r2, r8
 800d900:	464b      	mov	r3, r9
 800d902:	f7f2 fcc9 	bl	8000298 <__aeabi_dsub>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4630      	mov	r0, r6
 800d90c:	4639      	mov	r1, r7
 800d90e:	e7d9      	b.n	800d8c4 <__kernel_cos+0xf4>
 800d910:	2000      	movs	r0, #0
 800d912:	490f      	ldr	r1, [pc, #60]	; (800d950 <__kernel_cos+0x180>)
 800d914:	e7d8      	b.n	800d8c8 <__kernel_cos+0xf8>
 800d916:	bf00      	nop
 800d918:	be8838d4 	.word	0xbe8838d4
 800d91c:	bda8fae9 	.word	0xbda8fae9
 800d920:	bdb4b1c4 	.word	0xbdb4b1c4
 800d924:	3e21ee9e 	.word	0x3e21ee9e
 800d928:	809c52ad 	.word	0x809c52ad
 800d92c:	3e927e4f 	.word	0x3e927e4f
 800d930:	19cb1590 	.word	0x19cb1590
 800d934:	3efa01a0 	.word	0x3efa01a0
 800d938:	16c15177 	.word	0x16c15177
 800d93c:	3f56c16c 	.word	0x3f56c16c
 800d940:	5555554c 	.word	0x5555554c
 800d944:	3fa55555 	.word	0x3fa55555
 800d948:	3fe00000 	.word	0x3fe00000
 800d94c:	3fd33332 	.word	0x3fd33332
 800d950:	3ff00000 	.word	0x3ff00000
 800d954:	3fe90000 	.word	0x3fe90000
 800d958:	3fd20000 	.word	0x3fd20000
 800d95c:	00000000 	.word	0x00000000

0800d960 <__kernel_rem_pio2>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	ed2d 8b02 	vpush	{d8}
 800d968:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d96c:	1ed4      	subs	r4, r2, #3
 800d96e:	9308      	str	r3, [sp, #32]
 800d970:	9101      	str	r1, [sp, #4]
 800d972:	4bc5      	ldr	r3, [pc, #788]	; (800dc88 <__kernel_rem_pio2+0x328>)
 800d974:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d976:	9009      	str	r0, [sp, #36]	; 0x24
 800d978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	9b08      	ldr	r3, [sp, #32]
 800d980:	3b01      	subs	r3, #1
 800d982:	9307      	str	r3, [sp, #28]
 800d984:	2318      	movs	r3, #24
 800d986:	fb94 f4f3 	sdiv	r4, r4, r3
 800d98a:	f06f 0317 	mvn.w	r3, #23
 800d98e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d992:	fb04 3303 	mla	r3, r4, r3, r3
 800d996:	eb03 0a02 	add.w	sl, r3, r2
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	9a07      	ldr	r2, [sp, #28]
 800d99e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800dc78 <__kernel_rem_pio2+0x318>
 800d9a2:	eb03 0802 	add.w	r8, r3, r2
 800d9a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d9a8:	1aa7      	subs	r7, r4, r2
 800d9aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d9ae:	ae22      	add	r6, sp, #136	; 0x88
 800d9b0:	2500      	movs	r5, #0
 800d9b2:	4545      	cmp	r5, r8
 800d9b4:	dd13      	ble.n	800d9de <__kernel_rem_pio2+0x7e>
 800d9b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800dc78 <__kernel_rem_pio2+0x318>
 800d9ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d9be:	2600      	movs	r6, #0
 800d9c0:	9b04      	ldr	r3, [sp, #16]
 800d9c2:	429e      	cmp	r6, r3
 800d9c4:	dc32      	bgt.n	800da2c <__kernel_rem_pio2+0xcc>
 800d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c8:	9302      	str	r3, [sp, #8]
 800d9ca:	9b08      	ldr	r3, [sp, #32]
 800d9cc:	199d      	adds	r5, r3, r6
 800d9ce:	ab22      	add	r3, sp, #136	; 0x88
 800d9d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9d4:	9306      	str	r3, [sp, #24]
 800d9d6:	ec59 8b18 	vmov	r8, r9, d8
 800d9da:	2700      	movs	r7, #0
 800d9dc:	e01f      	b.n	800da1e <__kernel_rem_pio2+0xbe>
 800d9de:	42ef      	cmn	r7, r5
 800d9e0:	d407      	bmi.n	800d9f2 <__kernel_rem_pio2+0x92>
 800d9e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d9e6:	f7f2 fda5 	bl	8000534 <__aeabi_i2d>
 800d9ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9ee:	3501      	adds	r5, #1
 800d9f0:	e7df      	b.n	800d9b2 <__kernel_rem_pio2+0x52>
 800d9f2:	ec51 0b18 	vmov	r0, r1, d8
 800d9f6:	e7f8      	b.n	800d9ea <__kernel_rem_pio2+0x8a>
 800d9f8:	9906      	ldr	r1, [sp, #24]
 800d9fa:	9d02      	ldr	r5, [sp, #8]
 800d9fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800da00:	9106      	str	r1, [sp, #24]
 800da02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800da06:	9502      	str	r5, [sp, #8]
 800da08:	f7f2 fdfe 	bl	8000608 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4640      	mov	r0, r8
 800da12:	4649      	mov	r1, r9
 800da14:	f7f2 fc42 	bl	800029c <__adddf3>
 800da18:	3701      	adds	r7, #1
 800da1a:	4680      	mov	r8, r0
 800da1c:	4689      	mov	r9, r1
 800da1e:	9b07      	ldr	r3, [sp, #28]
 800da20:	429f      	cmp	r7, r3
 800da22:	dde9      	ble.n	800d9f8 <__kernel_rem_pio2+0x98>
 800da24:	e8eb 8902 	strd	r8, r9, [fp], #8
 800da28:	3601      	adds	r6, #1
 800da2a:	e7c9      	b.n	800d9c0 <__kernel_rem_pio2+0x60>
 800da2c:	9b04      	ldr	r3, [sp, #16]
 800da2e:	aa0e      	add	r2, sp, #56	; 0x38
 800da30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da34:	930c      	str	r3, [sp, #48]	; 0x30
 800da36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800da38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da3c:	9c04      	ldr	r4, [sp, #16]
 800da3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800da40:	ab9a      	add	r3, sp, #616	; 0x268
 800da42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800da46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800da52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800da56:	ab9a      	add	r3, sp, #616	; 0x268
 800da58:	445b      	add	r3, fp
 800da5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800da5e:	2500      	movs	r5, #0
 800da60:	1b63      	subs	r3, r4, r5
 800da62:	2b00      	cmp	r3, #0
 800da64:	dc78      	bgt.n	800db58 <__kernel_rem_pio2+0x1f8>
 800da66:	4650      	mov	r0, sl
 800da68:	ec49 8b10 	vmov	d0, r8, r9
 800da6c:	f000 fc00 	bl	800e270 <scalbn>
 800da70:	ec57 6b10 	vmov	r6, r7, d0
 800da74:	2200      	movs	r2, #0
 800da76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800da7a:	ee10 0a10 	vmov	r0, s0
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f2 fdc2 	bl	8000608 <__aeabi_dmul>
 800da84:	ec41 0b10 	vmov	d0, r0, r1
 800da88:	f000 fb6e 	bl	800e168 <floor>
 800da8c:	2200      	movs	r2, #0
 800da8e:	ec51 0b10 	vmov	r0, r1, d0
 800da92:	4b7e      	ldr	r3, [pc, #504]	; (800dc8c <__kernel_rem_pio2+0x32c>)
 800da94:	f7f2 fdb8 	bl	8000608 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f2 fbfa 	bl	8000298 <__aeabi_dsub>
 800daa4:	460f      	mov	r7, r1
 800daa6:	4606      	mov	r6, r0
 800daa8:	f7f3 f848 	bl	8000b3c <__aeabi_d2iz>
 800daac:	9006      	str	r0, [sp, #24]
 800daae:	f7f2 fd41 	bl	8000534 <__aeabi_i2d>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f2 fbed 	bl	8000298 <__aeabi_dsub>
 800dabe:	f1ba 0f00 	cmp.w	sl, #0
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	dd6c      	ble.n	800dba2 <__kernel_rem_pio2+0x242>
 800dac8:	1e62      	subs	r2, r4, #1
 800daca:	ab0e      	add	r3, sp, #56	; 0x38
 800dacc:	f1ca 0118 	rsb	r1, sl, #24
 800dad0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dad4:	9d06      	ldr	r5, [sp, #24]
 800dad6:	fa40 f301 	asr.w	r3, r0, r1
 800dada:	441d      	add	r5, r3
 800dadc:	408b      	lsls	r3, r1
 800dade:	1ac0      	subs	r0, r0, r3
 800dae0:	ab0e      	add	r3, sp, #56	; 0x38
 800dae2:	9506      	str	r5, [sp, #24]
 800dae4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dae8:	f1ca 0317 	rsb	r3, sl, #23
 800daec:	fa40 f303 	asr.w	r3, r0, r3
 800daf0:	9302      	str	r3, [sp, #8]
 800daf2:	9b02      	ldr	r3, [sp, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	dd62      	ble.n	800dbbe <__kernel_rem_pio2+0x25e>
 800daf8:	9b06      	ldr	r3, [sp, #24]
 800dafa:	2200      	movs	r2, #0
 800dafc:	3301      	adds	r3, #1
 800dafe:	9306      	str	r3, [sp, #24]
 800db00:	4615      	mov	r5, r2
 800db02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800db06:	4294      	cmp	r4, r2
 800db08:	f300 8095 	bgt.w	800dc36 <__kernel_rem_pio2+0x2d6>
 800db0c:	f1ba 0f00 	cmp.w	sl, #0
 800db10:	dd07      	ble.n	800db22 <__kernel_rem_pio2+0x1c2>
 800db12:	f1ba 0f01 	cmp.w	sl, #1
 800db16:	f000 80a2 	beq.w	800dc5e <__kernel_rem_pio2+0x2fe>
 800db1a:	f1ba 0f02 	cmp.w	sl, #2
 800db1e:	f000 80c1 	beq.w	800dca4 <__kernel_rem_pio2+0x344>
 800db22:	9b02      	ldr	r3, [sp, #8]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d14a      	bne.n	800dbbe <__kernel_rem_pio2+0x25e>
 800db28:	4632      	mov	r2, r6
 800db2a:	463b      	mov	r3, r7
 800db2c:	2000      	movs	r0, #0
 800db2e:	4958      	ldr	r1, [pc, #352]	; (800dc90 <__kernel_rem_pio2+0x330>)
 800db30:	f7f2 fbb2 	bl	8000298 <__aeabi_dsub>
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	2d00      	cmp	r5, #0
 800db3a:	d040      	beq.n	800dbbe <__kernel_rem_pio2+0x25e>
 800db3c:	4650      	mov	r0, sl
 800db3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800dc80 <__kernel_rem_pio2+0x320>
 800db42:	f000 fb95 	bl	800e270 <scalbn>
 800db46:	4630      	mov	r0, r6
 800db48:	4639      	mov	r1, r7
 800db4a:	ec53 2b10 	vmov	r2, r3, d0
 800db4e:	f7f2 fba3 	bl	8000298 <__aeabi_dsub>
 800db52:	4606      	mov	r6, r0
 800db54:	460f      	mov	r7, r1
 800db56:	e032      	b.n	800dbbe <__kernel_rem_pio2+0x25e>
 800db58:	2200      	movs	r2, #0
 800db5a:	4b4e      	ldr	r3, [pc, #312]	; (800dc94 <__kernel_rem_pio2+0x334>)
 800db5c:	4640      	mov	r0, r8
 800db5e:	4649      	mov	r1, r9
 800db60:	f7f2 fd52 	bl	8000608 <__aeabi_dmul>
 800db64:	f7f2 ffea 	bl	8000b3c <__aeabi_d2iz>
 800db68:	f7f2 fce4 	bl	8000534 <__aeabi_i2d>
 800db6c:	2200      	movs	r2, #0
 800db6e:	4b4a      	ldr	r3, [pc, #296]	; (800dc98 <__kernel_rem_pio2+0x338>)
 800db70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db74:	f7f2 fd48 	bl	8000608 <__aeabi_dmul>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	f7f2 fb8a 	bl	8000298 <__aeabi_dsub>
 800db84:	f7f2 ffda 	bl	8000b3c <__aeabi_d2iz>
 800db88:	ab0e      	add	r3, sp, #56	; 0x38
 800db8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800db8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800db92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db96:	f7f2 fb81 	bl	800029c <__adddf3>
 800db9a:	3501      	adds	r5, #1
 800db9c:	4680      	mov	r8, r0
 800db9e:	4689      	mov	r9, r1
 800dba0:	e75e      	b.n	800da60 <__kernel_rem_pio2+0x100>
 800dba2:	d105      	bne.n	800dbb0 <__kernel_rem_pio2+0x250>
 800dba4:	1e63      	subs	r3, r4, #1
 800dba6:	aa0e      	add	r2, sp, #56	; 0x38
 800dba8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dbac:	15c3      	asrs	r3, r0, #23
 800dbae:	e79f      	b.n	800daf0 <__kernel_rem_pio2+0x190>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4b3a      	ldr	r3, [pc, #232]	; (800dc9c <__kernel_rem_pio2+0x33c>)
 800dbb4:	f7f2 ffae 	bl	8000b14 <__aeabi_dcmpge>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d139      	bne.n	800dc30 <__kernel_rem_pio2+0x2d0>
 800dbbc:	9002      	str	r0, [sp, #8]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	f7f2 ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f000 80c7 	beq.w	800dd5e <__kernel_rem_pio2+0x3fe>
 800dbd0:	1e65      	subs	r5, r4, #1
 800dbd2:	462b      	mov	r3, r5
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	9904      	ldr	r1, [sp, #16]
 800dbd8:	428b      	cmp	r3, r1
 800dbda:	da6a      	bge.n	800dcb2 <__kernel_rem_pio2+0x352>
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	f000 8088 	beq.w	800dcf2 <__kernel_rem_pio2+0x392>
 800dbe2:	ab0e      	add	r3, sp, #56	; 0x38
 800dbe4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dbe8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f000 80b4 	beq.w	800dd5a <__kernel_rem_pio2+0x3fa>
 800dbf2:	4650      	mov	r0, sl
 800dbf4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800dc80 <__kernel_rem_pio2+0x320>
 800dbf8:	f000 fb3a 	bl	800e270 <scalbn>
 800dbfc:	00ec      	lsls	r4, r5, #3
 800dbfe:	ab72      	add	r3, sp, #456	; 0x1c8
 800dc00:	191e      	adds	r6, r3, r4
 800dc02:	ec59 8b10 	vmov	r8, r9, d0
 800dc06:	f106 0a08 	add.w	sl, r6, #8
 800dc0a:	462f      	mov	r7, r5
 800dc0c:	2f00      	cmp	r7, #0
 800dc0e:	f280 80df 	bge.w	800ddd0 <__kernel_rem_pio2+0x470>
 800dc12:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800dc78 <__kernel_rem_pio2+0x318>
 800dc16:	f04f 0a00 	mov.w	sl, #0
 800dc1a:	eba5 030a 	sub.w	r3, r5, sl
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f2c0 810a 	blt.w	800de38 <__kernel_rem_pio2+0x4d8>
 800dc24:	f8df b078 	ldr.w	fp, [pc, #120]	; 800dca0 <__kernel_rem_pio2+0x340>
 800dc28:	ec59 8b18 	vmov	r8, r9, d8
 800dc2c:	2700      	movs	r7, #0
 800dc2e:	e0f5      	b.n	800de1c <__kernel_rem_pio2+0x4bc>
 800dc30:	2302      	movs	r3, #2
 800dc32:	9302      	str	r3, [sp, #8]
 800dc34:	e760      	b.n	800daf8 <__kernel_rem_pio2+0x198>
 800dc36:	ab0e      	add	r3, sp, #56	; 0x38
 800dc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3c:	b94d      	cbnz	r5, 800dc52 <__kernel_rem_pio2+0x2f2>
 800dc3e:	b12b      	cbz	r3, 800dc4c <__kernel_rem_pio2+0x2ec>
 800dc40:	a80e      	add	r0, sp, #56	; 0x38
 800dc42:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dc46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	3201      	adds	r2, #1
 800dc4e:	461d      	mov	r5, r3
 800dc50:	e759      	b.n	800db06 <__kernel_rem_pio2+0x1a6>
 800dc52:	a80e      	add	r0, sp, #56	; 0x38
 800dc54:	1acb      	subs	r3, r1, r3
 800dc56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc5a:	462b      	mov	r3, r5
 800dc5c:	e7f6      	b.n	800dc4c <__kernel_rem_pio2+0x2ec>
 800dc5e:	1e62      	subs	r2, r4, #1
 800dc60:	ab0e      	add	r3, sp, #56	; 0x38
 800dc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dc6a:	a90e      	add	r1, sp, #56	; 0x38
 800dc6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc70:	e757      	b.n	800db22 <__kernel_rem_pio2+0x1c2>
 800dc72:	bf00      	nop
 800dc74:	f3af 8000 	nop.w
	...
 800dc84:	3ff00000 	.word	0x3ff00000
 800dc88:	0800e720 	.word	0x0800e720
 800dc8c:	40200000 	.word	0x40200000
 800dc90:	3ff00000 	.word	0x3ff00000
 800dc94:	3e700000 	.word	0x3e700000
 800dc98:	41700000 	.word	0x41700000
 800dc9c:	3fe00000 	.word	0x3fe00000
 800dca0:	0800e6e0 	.word	0x0800e6e0
 800dca4:	1e62      	subs	r2, r4, #1
 800dca6:	ab0e      	add	r3, sp, #56	; 0x38
 800dca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dcb0:	e7db      	b.n	800dc6a <__kernel_rem_pio2+0x30a>
 800dcb2:	a90e      	add	r1, sp, #56	; 0x38
 800dcb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	430a      	orrs	r2, r1
 800dcbc:	e78b      	b.n	800dbd6 <__kernel_rem_pio2+0x276>
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d0fa      	beq.n	800dcbe <__kernel_rem_pio2+0x35e>
 800dcc8:	9a08      	ldr	r2, [sp, #32]
 800dcca:	4422      	add	r2, r4
 800dccc:	00d2      	lsls	r2, r2, #3
 800dcce:	a922      	add	r1, sp, #136	; 0x88
 800dcd0:	18e3      	adds	r3, r4, r3
 800dcd2:	9206      	str	r2, [sp, #24]
 800dcd4:	440a      	add	r2, r1
 800dcd6:	9302      	str	r3, [sp, #8]
 800dcd8:	f10b 0108 	add.w	r1, fp, #8
 800dcdc:	f102 0308 	add.w	r3, r2, #8
 800dce0:	1c66      	adds	r6, r4, #1
 800dce2:	910a      	str	r1, [sp, #40]	; 0x28
 800dce4:	2500      	movs	r5, #0
 800dce6:	930d      	str	r3, [sp, #52]	; 0x34
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	42b3      	cmp	r3, r6
 800dcec:	da04      	bge.n	800dcf8 <__kernel_rem_pio2+0x398>
 800dcee:	461c      	mov	r4, r3
 800dcf0:	e6a6      	b.n	800da40 <__kernel_rem_pio2+0xe0>
 800dcf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e7e3      	b.n	800dcc0 <__kernel_rem_pio2+0x360>
 800dcf8:	9b06      	ldr	r3, [sp, #24]
 800dcfa:	18ef      	adds	r7, r5, r3
 800dcfc:	ab22      	add	r3, sp, #136	; 0x88
 800dcfe:	441f      	add	r7, r3
 800dd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd06:	f7f2 fc15 	bl	8000534 <__aeabi_i2d>
 800dd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0c:	461c      	mov	r4, r3
 800dd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd10:	e9c7 0100 	strd	r0, r1, [r7]
 800dd14:	eb03 0b05 	add.w	fp, r3, r5
 800dd18:	2700      	movs	r7, #0
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	f04f 0900 	mov.w	r9, #0
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	429f      	cmp	r7, r3
 800dd26:	dd08      	ble.n	800dd3a <__kernel_rem_pio2+0x3da>
 800dd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd2a:	aa72      	add	r2, sp, #456	; 0x1c8
 800dd2c:	18eb      	adds	r3, r5, r3
 800dd2e:	4413      	add	r3, r2
 800dd30:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800dd34:	3601      	adds	r6, #1
 800dd36:	3508      	adds	r5, #8
 800dd38:	e7d6      	b.n	800dce8 <__kernel_rem_pio2+0x388>
 800dd3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dd3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dd42:	f7f2 fc61 	bl	8000608 <__aeabi_dmul>
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	f7f2 faa5 	bl	800029c <__adddf3>
 800dd52:	3701      	adds	r7, #1
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	e7e3      	b.n	800dd22 <__kernel_rem_pio2+0x3c2>
 800dd5a:	3d01      	subs	r5, #1
 800dd5c:	e741      	b.n	800dbe2 <__kernel_rem_pio2+0x282>
 800dd5e:	f1ca 0000 	rsb	r0, sl, #0
 800dd62:	ec47 6b10 	vmov	d0, r6, r7
 800dd66:	f000 fa83 	bl	800e270 <scalbn>
 800dd6a:	ec57 6b10 	vmov	r6, r7, d0
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4b99      	ldr	r3, [pc, #612]	; (800dfd8 <__kernel_rem_pio2+0x678>)
 800dd72:	ee10 0a10 	vmov	r0, s0
 800dd76:	4639      	mov	r1, r7
 800dd78:	f7f2 fecc 	bl	8000b14 <__aeabi_dcmpge>
 800dd7c:	b1f8      	cbz	r0, 800ddbe <__kernel_rem_pio2+0x45e>
 800dd7e:	2200      	movs	r2, #0
 800dd80:	4b96      	ldr	r3, [pc, #600]	; (800dfdc <__kernel_rem_pio2+0x67c>)
 800dd82:	4630      	mov	r0, r6
 800dd84:	4639      	mov	r1, r7
 800dd86:	f7f2 fc3f 	bl	8000608 <__aeabi_dmul>
 800dd8a:	f7f2 fed7 	bl	8000b3c <__aeabi_d2iz>
 800dd8e:	4680      	mov	r8, r0
 800dd90:	f7f2 fbd0 	bl	8000534 <__aeabi_i2d>
 800dd94:	2200      	movs	r2, #0
 800dd96:	4b90      	ldr	r3, [pc, #576]	; (800dfd8 <__kernel_rem_pio2+0x678>)
 800dd98:	f7f2 fc36 	bl	8000608 <__aeabi_dmul>
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4602      	mov	r2, r0
 800dda0:	4639      	mov	r1, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7f2 fa78 	bl	8000298 <__aeabi_dsub>
 800dda8:	f7f2 fec8 	bl	8000b3c <__aeabi_d2iz>
 800ddac:	1c65      	adds	r5, r4, #1
 800ddae:	ab0e      	add	r3, sp, #56	; 0x38
 800ddb0:	f10a 0a18 	add.w	sl, sl, #24
 800ddb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ddb8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ddbc:	e719      	b.n	800dbf2 <__kernel_rem_pio2+0x292>
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	f7f2 febb 	bl	8000b3c <__aeabi_d2iz>
 800ddc6:	ab0e      	add	r3, sp, #56	; 0x38
 800ddc8:	4625      	mov	r5, r4
 800ddca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ddce:	e710      	b.n	800dbf2 <__kernel_rem_pio2+0x292>
 800ddd0:	ab0e      	add	r3, sp, #56	; 0x38
 800ddd2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ddd6:	f7f2 fbad 	bl	8000534 <__aeabi_i2d>
 800ddda:	4642      	mov	r2, r8
 800dddc:	464b      	mov	r3, r9
 800ddde:	f7f2 fc13 	bl	8000608 <__aeabi_dmul>
 800dde2:	2200      	movs	r2, #0
 800dde4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dde8:	4b7c      	ldr	r3, [pc, #496]	; (800dfdc <__kernel_rem_pio2+0x67c>)
 800ddea:	4640      	mov	r0, r8
 800ddec:	4649      	mov	r1, r9
 800ddee:	f7f2 fc0b 	bl	8000608 <__aeabi_dmul>
 800ddf2:	3f01      	subs	r7, #1
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4689      	mov	r9, r1
 800ddf8:	e708      	b.n	800dc0c <__kernel_rem_pio2+0x2ac>
 800ddfa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800de06:	f7f2 fbff 	bl	8000608 <__aeabi_dmul>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4640      	mov	r0, r8
 800de10:	4649      	mov	r1, r9
 800de12:	f7f2 fa43 	bl	800029c <__adddf3>
 800de16:	3701      	adds	r7, #1
 800de18:	4680      	mov	r8, r0
 800de1a:	4689      	mov	r9, r1
 800de1c:	9b04      	ldr	r3, [sp, #16]
 800de1e:	429f      	cmp	r7, r3
 800de20:	dc01      	bgt.n	800de26 <__kernel_rem_pio2+0x4c6>
 800de22:	45ba      	cmp	sl, r7
 800de24:	dae9      	bge.n	800ddfa <__kernel_rem_pio2+0x49a>
 800de26:	ab4a      	add	r3, sp, #296	; 0x128
 800de28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de2c:	e9c3 8900 	strd	r8, r9, [r3]
 800de30:	f10a 0a01 	add.w	sl, sl, #1
 800de34:	3e08      	subs	r6, #8
 800de36:	e6f0      	b.n	800dc1a <__kernel_rem_pio2+0x2ba>
 800de38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d85b      	bhi.n	800def6 <__kernel_rem_pio2+0x596>
 800de3e:	e8df f003 	tbb	[pc, r3]
 800de42:	264a      	.short	0x264a
 800de44:	0226      	.short	0x0226
 800de46:	ab9a      	add	r3, sp, #616	; 0x268
 800de48:	441c      	add	r4, r3
 800de4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800de4e:	46a2      	mov	sl, r4
 800de50:	46ab      	mov	fp, r5
 800de52:	f1bb 0f00 	cmp.w	fp, #0
 800de56:	dc6c      	bgt.n	800df32 <__kernel_rem_pio2+0x5d2>
 800de58:	46a2      	mov	sl, r4
 800de5a:	46ab      	mov	fp, r5
 800de5c:	f1bb 0f01 	cmp.w	fp, #1
 800de60:	f300 8086 	bgt.w	800df70 <__kernel_rem_pio2+0x610>
 800de64:	2000      	movs	r0, #0
 800de66:	2100      	movs	r1, #0
 800de68:	2d01      	cmp	r5, #1
 800de6a:	f300 80a0 	bgt.w	800dfae <__kernel_rem_pio2+0x64e>
 800de6e:	9b02      	ldr	r3, [sp, #8]
 800de70:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800de74:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f040 809e 	bne.w	800dfba <__kernel_rem_pio2+0x65a>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	e9c3 7800 	strd	r7, r8, [r3]
 800de84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800de88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800de8c:	e033      	b.n	800def6 <__kernel_rem_pio2+0x596>
 800de8e:	3408      	adds	r4, #8
 800de90:	ab4a      	add	r3, sp, #296	; 0x128
 800de92:	441c      	add	r4, r3
 800de94:	462e      	mov	r6, r5
 800de96:	2000      	movs	r0, #0
 800de98:	2100      	movs	r1, #0
 800de9a:	2e00      	cmp	r6, #0
 800de9c:	da3a      	bge.n	800df14 <__kernel_rem_pio2+0x5b4>
 800de9e:	9b02      	ldr	r3, [sp, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d03d      	beq.n	800df20 <__kernel_rem_pio2+0x5c0>
 800dea4:	4602      	mov	r2, r0
 800dea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deaa:	9c01      	ldr	r4, [sp, #4]
 800deac:	e9c4 2300 	strd	r2, r3, [r4]
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800deb8:	f7f2 f9ee 	bl	8000298 <__aeabi_dsub>
 800debc:	ae4c      	add	r6, sp, #304	; 0x130
 800debe:	2401      	movs	r4, #1
 800dec0:	42a5      	cmp	r5, r4
 800dec2:	da30      	bge.n	800df26 <__kernel_rem_pio2+0x5c6>
 800dec4:	9b02      	ldr	r3, [sp, #8]
 800dec6:	b113      	cbz	r3, 800dece <__kernel_rem_pio2+0x56e>
 800dec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800decc:	4619      	mov	r1, r3
 800dece:	9b01      	ldr	r3, [sp, #4]
 800ded0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ded4:	e00f      	b.n	800def6 <__kernel_rem_pio2+0x596>
 800ded6:	ab9a      	add	r3, sp, #616	; 0x268
 800ded8:	441c      	add	r4, r3
 800deda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dede:	2000      	movs	r0, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	2d00      	cmp	r5, #0
 800dee4:	da10      	bge.n	800df08 <__kernel_rem_pio2+0x5a8>
 800dee6:	9b02      	ldr	r3, [sp, #8]
 800dee8:	b113      	cbz	r3, 800def0 <__kernel_rem_pio2+0x590>
 800deea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deee:	4619      	mov	r1, r3
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	e9c3 0100 	strd	r0, r1, [r3]
 800def6:	9b06      	ldr	r3, [sp, #24]
 800def8:	f003 0007 	and.w	r0, r3, #7
 800defc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800df00:	ecbd 8b02 	vpop	{d8}
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df0c:	f7f2 f9c6 	bl	800029c <__adddf3>
 800df10:	3d01      	subs	r5, #1
 800df12:	e7e6      	b.n	800dee2 <__kernel_rem_pio2+0x582>
 800df14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df18:	f7f2 f9c0 	bl	800029c <__adddf3>
 800df1c:	3e01      	subs	r6, #1
 800df1e:	e7bc      	b.n	800de9a <__kernel_rem_pio2+0x53a>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	e7c1      	b.n	800deaa <__kernel_rem_pio2+0x54a>
 800df26:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800df2a:	f7f2 f9b7 	bl	800029c <__adddf3>
 800df2e:	3401      	adds	r4, #1
 800df30:	e7c6      	b.n	800dec0 <__kernel_rem_pio2+0x560>
 800df32:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800df36:	ed3a 7b02 	vldmdb	sl!, {d7}
 800df3a:	4640      	mov	r0, r8
 800df3c:	ec53 2b17 	vmov	r2, r3, d7
 800df40:	4649      	mov	r1, r9
 800df42:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df46:	f7f2 f9a9 	bl	800029c <__adddf3>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4606      	mov	r6, r0
 800df50:	460f      	mov	r7, r1
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 f99f 	bl	8000298 <__aeabi_dsub>
 800df5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5e:	f7f2 f99d 	bl	800029c <__adddf3>
 800df62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df66:	e9ca 0100 	strd	r0, r1, [sl]
 800df6a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800df6e:	e770      	b.n	800de52 <__kernel_rem_pio2+0x4f2>
 800df70:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800df74:	ed3a 7b02 	vldmdb	sl!, {d7}
 800df78:	4630      	mov	r0, r6
 800df7a:	ec53 2b17 	vmov	r2, r3, d7
 800df7e:	4639      	mov	r1, r7
 800df80:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df84:	f7f2 f98a 	bl	800029c <__adddf3>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4680      	mov	r8, r0
 800df8e:	4689      	mov	r9, r1
 800df90:	4630      	mov	r0, r6
 800df92:	4639      	mov	r1, r7
 800df94:	f7f2 f980 	bl	8000298 <__aeabi_dsub>
 800df98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9c:	f7f2 f97e 	bl	800029c <__adddf3>
 800dfa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfa4:	e9ca 0100 	strd	r0, r1, [sl]
 800dfa8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800dfac:	e756      	b.n	800de5c <__kernel_rem_pio2+0x4fc>
 800dfae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfb2:	f7f2 f973 	bl	800029c <__adddf3>
 800dfb6:	3d01      	subs	r5, #1
 800dfb8:	e756      	b.n	800de68 <__kernel_rem_pio2+0x508>
 800dfba:	9b01      	ldr	r3, [sp, #4]
 800dfbc:	9a01      	ldr	r2, [sp, #4]
 800dfbe:	601f      	str	r7, [r3, #0]
 800dfc0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800dfc4:	605c      	str	r4, [r3, #4]
 800dfc6:	609d      	str	r5, [r3, #8]
 800dfc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dfcc:	60d3      	str	r3, [r2, #12]
 800dfce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfd2:	6110      	str	r0, [r2, #16]
 800dfd4:	6153      	str	r3, [r2, #20]
 800dfd6:	e78e      	b.n	800def6 <__kernel_rem_pio2+0x596>
 800dfd8:	41700000 	.word	0x41700000
 800dfdc:	3e700000 	.word	0x3e700000

0800dfe0 <__kernel_sin>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ec55 4b10 	vmov	r4, r5, d0
 800dfe8:	b085      	sub	sp, #20
 800dfea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dfee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dff2:	ed8d 1b00 	vstr	d1, [sp]
 800dff6:	9002      	str	r0, [sp, #8]
 800dff8:	da06      	bge.n	800e008 <__kernel_sin+0x28>
 800dffa:	ee10 0a10 	vmov	r0, s0
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fd9c 	bl	8000b3c <__aeabi_d2iz>
 800e004:	2800      	cmp	r0, #0
 800e006:	d051      	beq.n	800e0ac <__kernel_sin+0xcc>
 800e008:	4622      	mov	r2, r4
 800e00a:	462b      	mov	r3, r5
 800e00c:	4620      	mov	r0, r4
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 fafa 	bl	8000608 <__aeabi_dmul>
 800e014:	4682      	mov	sl, r0
 800e016:	468b      	mov	fp, r1
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 faf2 	bl	8000608 <__aeabi_dmul>
 800e024:	a341      	add	r3, pc, #260	; (adr r3, 800e12c <__kernel_sin+0x14c>)
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	4680      	mov	r8, r0
 800e02c:	4689      	mov	r9, r1
 800e02e:	4650      	mov	r0, sl
 800e030:	4659      	mov	r1, fp
 800e032:	f7f2 fae9 	bl	8000608 <__aeabi_dmul>
 800e036:	a33f      	add	r3, pc, #252	; (adr r3, 800e134 <__kernel_sin+0x154>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	f7f2 f92c 	bl	8000298 <__aeabi_dsub>
 800e040:	4652      	mov	r2, sl
 800e042:	465b      	mov	r3, fp
 800e044:	f7f2 fae0 	bl	8000608 <__aeabi_dmul>
 800e048:	a33c      	add	r3, pc, #240	; (adr r3, 800e13c <__kernel_sin+0x15c>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 f925 	bl	800029c <__adddf3>
 800e052:	4652      	mov	r2, sl
 800e054:	465b      	mov	r3, fp
 800e056:	f7f2 fad7 	bl	8000608 <__aeabi_dmul>
 800e05a:	a33a      	add	r3, pc, #232	; (adr r3, 800e144 <__kernel_sin+0x164>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f7f2 f91a 	bl	8000298 <__aeabi_dsub>
 800e064:	4652      	mov	r2, sl
 800e066:	465b      	mov	r3, fp
 800e068:	f7f2 face 	bl	8000608 <__aeabi_dmul>
 800e06c:	a337      	add	r3, pc, #220	; (adr r3, 800e14c <__kernel_sin+0x16c>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f913 	bl	800029c <__adddf3>
 800e076:	9b02      	ldr	r3, [sp, #8]
 800e078:	4606      	mov	r6, r0
 800e07a:	460f      	mov	r7, r1
 800e07c:	b9db      	cbnz	r3, 800e0b6 <__kernel_sin+0xd6>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4650      	mov	r0, sl
 800e084:	4659      	mov	r1, fp
 800e086:	f7f2 fabf 	bl	8000608 <__aeabi_dmul>
 800e08a:	a325      	add	r3, pc, #148	; (adr r3, 800e120 <__kernel_sin+0x140>)
 800e08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e090:	f7f2 f902 	bl	8000298 <__aeabi_dsub>
 800e094:	4642      	mov	r2, r8
 800e096:	464b      	mov	r3, r9
 800e098:	f7f2 fab6 	bl	8000608 <__aeabi_dmul>
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f7f2 f8fa 	bl	800029c <__adddf3>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	ec45 4b10 	vmov	d0, r4, r5
 800e0b0:	b005      	add	sp, #20
 800e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	4b1b      	ldr	r3, [pc, #108]	; (800e128 <__kernel_sin+0x148>)
 800e0ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0be:	f7f2 faa3 	bl	8000608 <__aeabi_dmul>
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	f7f2 fa9b 	bl	8000608 <__aeabi_dmul>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0da:	f7f2 f8dd 	bl	8000298 <__aeabi_dsub>
 800e0de:	4652      	mov	r2, sl
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	f7f2 fa91 	bl	8000608 <__aeabi_dmul>
 800e0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ea:	f7f2 f8d5 	bl	8000298 <__aeabi_dsub>
 800e0ee:	a30c      	add	r3, pc, #48	; (adr r3, 800e120 <__kernel_sin+0x140>)
 800e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	460f      	mov	r7, r1
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	f7f2 fa84 	bl	8000608 <__aeabi_dmul>
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	4630      	mov	r0, r6
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 f8c8 	bl	800029c <__adddf3>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4620      	mov	r0, r4
 800e112:	4629      	mov	r1, r5
 800e114:	f7f2 f8c0 	bl	8000298 <__aeabi_dsub>
 800e118:	e7c6      	b.n	800e0a8 <__kernel_sin+0xc8>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	55555549 	.word	0x55555549
 800e124:	3fc55555 	.word	0x3fc55555
 800e128:	3fe00000 	.word	0x3fe00000
 800e12c:	5acfd57c 	.word	0x5acfd57c
 800e130:	3de5d93a 	.word	0x3de5d93a
 800e134:	8a2b9ceb 	.word	0x8a2b9ceb
 800e138:	3e5ae5e6 	.word	0x3e5ae5e6
 800e13c:	57b1fe7d 	.word	0x57b1fe7d
 800e140:	3ec71de3 	.word	0x3ec71de3
 800e144:	19c161d5 	.word	0x19c161d5
 800e148:	3f2a01a0 	.word	0x3f2a01a0
 800e14c:	1110f8a6 	.word	0x1110f8a6
 800e150:	3f811111 	.word	0x3f811111

0800e154 <fabs>:
 800e154:	ec51 0b10 	vmov	r0, r1, d0
 800e158:	ee10 2a10 	vmov	r2, s0
 800e15c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e160:	ec43 2b10 	vmov	d0, r2, r3
 800e164:	4770      	bx	lr
	...

0800e168 <floor>:
 800e168:	ec51 0b10 	vmov	r0, r1, d0
 800e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e170:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e174:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e178:	2e13      	cmp	r6, #19
 800e17a:	460c      	mov	r4, r1
 800e17c:	ee10 5a10 	vmov	r5, s0
 800e180:	4680      	mov	r8, r0
 800e182:	dc34      	bgt.n	800e1ee <floor+0x86>
 800e184:	2e00      	cmp	r6, #0
 800e186:	da16      	bge.n	800e1b6 <floor+0x4e>
 800e188:	a335      	add	r3, pc, #212	; (adr r3, 800e260 <floor+0xf8>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f7f2 f885 	bl	800029c <__adddf3>
 800e192:	2200      	movs	r2, #0
 800e194:	2300      	movs	r3, #0
 800e196:	f7f2 fcc7 	bl	8000b28 <__aeabi_dcmpgt>
 800e19a:	b148      	cbz	r0, 800e1b0 <floor+0x48>
 800e19c:	2c00      	cmp	r4, #0
 800e19e:	da59      	bge.n	800e254 <floor+0xec>
 800e1a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e1a4:	4a30      	ldr	r2, [pc, #192]	; (800e268 <floor+0x100>)
 800e1a6:	432b      	orrs	r3, r5
 800e1a8:	2500      	movs	r5, #0
 800e1aa:	42ab      	cmp	r3, r5
 800e1ac:	bf18      	it	ne
 800e1ae:	4614      	movne	r4, r2
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	e025      	b.n	800e202 <floor+0x9a>
 800e1b6:	4f2d      	ldr	r7, [pc, #180]	; (800e26c <floor+0x104>)
 800e1b8:	4137      	asrs	r7, r6
 800e1ba:	ea01 0307 	and.w	r3, r1, r7
 800e1be:	4303      	orrs	r3, r0
 800e1c0:	d01f      	beq.n	800e202 <floor+0x9a>
 800e1c2:	a327      	add	r3, pc, #156	; (adr r3, 800e260 <floor+0xf8>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	f7f2 f868 	bl	800029c <__adddf3>
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f7f2 fcaa 	bl	8000b28 <__aeabi_dcmpgt>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d0eb      	beq.n	800e1b0 <floor+0x48>
 800e1d8:	2c00      	cmp	r4, #0
 800e1da:	bfbe      	ittt	lt
 800e1dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e1e0:	fa43 f606 	asrlt.w	r6, r3, r6
 800e1e4:	19a4      	addlt	r4, r4, r6
 800e1e6:	ea24 0407 	bic.w	r4, r4, r7
 800e1ea:	2500      	movs	r5, #0
 800e1ec:	e7e0      	b.n	800e1b0 <floor+0x48>
 800e1ee:	2e33      	cmp	r6, #51	; 0x33
 800e1f0:	dd0b      	ble.n	800e20a <floor+0xa2>
 800e1f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e1f6:	d104      	bne.n	800e202 <floor+0x9a>
 800e1f8:	ee10 2a10 	vmov	r2, s0
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	f7f2 f84d 	bl	800029c <__adddf3>
 800e202:	ec41 0b10 	vmov	d0, r0, r1
 800e206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295
 800e212:	fa23 f707 	lsr.w	r7, r3, r7
 800e216:	4207      	tst	r7, r0
 800e218:	d0f3      	beq.n	800e202 <floor+0x9a>
 800e21a:	a311      	add	r3, pc, #68	; (adr r3, 800e260 <floor+0xf8>)
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f7f2 f83c 	bl	800029c <__adddf3>
 800e224:	2200      	movs	r2, #0
 800e226:	2300      	movs	r3, #0
 800e228:	f7f2 fc7e 	bl	8000b28 <__aeabi_dcmpgt>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d0bf      	beq.n	800e1b0 <floor+0x48>
 800e230:	2c00      	cmp	r4, #0
 800e232:	da02      	bge.n	800e23a <floor+0xd2>
 800e234:	2e14      	cmp	r6, #20
 800e236:	d103      	bne.n	800e240 <floor+0xd8>
 800e238:	3401      	adds	r4, #1
 800e23a:	ea25 0507 	bic.w	r5, r5, r7
 800e23e:	e7b7      	b.n	800e1b0 <floor+0x48>
 800e240:	2301      	movs	r3, #1
 800e242:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e246:	fa03 f606 	lsl.w	r6, r3, r6
 800e24a:	4435      	add	r5, r6
 800e24c:	4545      	cmp	r5, r8
 800e24e:	bf38      	it	cc
 800e250:	18e4      	addcc	r4, r4, r3
 800e252:	e7f2      	b.n	800e23a <floor+0xd2>
 800e254:	2500      	movs	r5, #0
 800e256:	462c      	mov	r4, r5
 800e258:	e7aa      	b.n	800e1b0 <floor+0x48>
 800e25a:	bf00      	nop
 800e25c:	f3af 8000 	nop.w
 800e260:	8800759c 	.word	0x8800759c
 800e264:	7e37e43c 	.word	0x7e37e43c
 800e268:	bff00000 	.word	0xbff00000
 800e26c:	000fffff 	.word	0x000fffff

0800e270 <scalbn>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	ec55 4b10 	vmov	r4, r5, d0
 800e276:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e27a:	4606      	mov	r6, r0
 800e27c:	462b      	mov	r3, r5
 800e27e:	b9aa      	cbnz	r2, 800e2ac <scalbn+0x3c>
 800e280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e284:	4323      	orrs	r3, r4
 800e286:	d03b      	beq.n	800e300 <scalbn+0x90>
 800e288:	4b31      	ldr	r3, [pc, #196]	; (800e350 <scalbn+0xe0>)
 800e28a:	4629      	mov	r1, r5
 800e28c:	2200      	movs	r2, #0
 800e28e:	ee10 0a10 	vmov	r0, s0
 800e292:	f7f2 f9b9 	bl	8000608 <__aeabi_dmul>
 800e296:	4b2f      	ldr	r3, [pc, #188]	; (800e354 <scalbn+0xe4>)
 800e298:	429e      	cmp	r6, r3
 800e29a:	4604      	mov	r4, r0
 800e29c:	460d      	mov	r5, r1
 800e29e:	da12      	bge.n	800e2c6 <scalbn+0x56>
 800e2a0:	a327      	add	r3, pc, #156	; (adr r3, 800e340 <scalbn+0xd0>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f2 f9af 	bl	8000608 <__aeabi_dmul>
 800e2aa:	e009      	b.n	800e2c0 <scalbn+0x50>
 800e2ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e2b0:	428a      	cmp	r2, r1
 800e2b2:	d10c      	bne.n	800e2ce <scalbn+0x5e>
 800e2b4:	ee10 2a10 	vmov	r2, s0
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	f7f1 ffee 	bl	800029c <__adddf3>
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	e01c      	b.n	800e300 <scalbn+0x90>
 800e2c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	3a36      	subs	r2, #54	; 0x36
 800e2ce:	4432      	add	r2, r6
 800e2d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e2d4:	428a      	cmp	r2, r1
 800e2d6:	dd0b      	ble.n	800e2f0 <scalbn+0x80>
 800e2d8:	ec45 4b11 	vmov	d1, r4, r5
 800e2dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e348 <scalbn+0xd8>
 800e2e0:	f000 f83c 	bl	800e35c <copysign>
 800e2e4:	a318      	add	r3, pc, #96	; (adr r3, 800e348 <scalbn+0xd8>)
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	ec51 0b10 	vmov	r0, r1, d0
 800e2ee:	e7da      	b.n	800e2a6 <scalbn+0x36>
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	dd08      	ble.n	800e306 <scalbn+0x96>
 800e2f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e300:	ec45 4b10 	vmov	d0, r4, r5
 800e304:	bd70      	pop	{r4, r5, r6, pc}
 800e306:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e30a:	da0d      	bge.n	800e328 <scalbn+0xb8>
 800e30c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e310:	429e      	cmp	r6, r3
 800e312:	ec45 4b11 	vmov	d1, r4, r5
 800e316:	dce1      	bgt.n	800e2dc <scalbn+0x6c>
 800e318:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e340 <scalbn+0xd0>
 800e31c:	f000 f81e 	bl	800e35c <copysign>
 800e320:	a307      	add	r3, pc, #28	; (adr r3, 800e340 <scalbn+0xd0>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	e7e0      	b.n	800e2ea <scalbn+0x7a>
 800e328:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e32c:	3236      	adds	r2, #54	; 0x36
 800e32e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e332:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e336:	4620      	mov	r0, r4
 800e338:	4629      	mov	r1, r5
 800e33a:	2200      	movs	r2, #0
 800e33c:	4b06      	ldr	r3, [pc, #24]	; (800e358 <scalbn+0xe8>)
 800e33e:	e7b2      	b.n	800e2a6 <scalbn+0x36>
 800e340:	c2f8f359 	.word	0xc2f8f359
 800e344:	01a56e1f 	.word	0x01a56e1f
 800e348:	8800759c 	.word	0x8800759c
 800e34c:	7e37e43c 	.word	0x7e37e43c
 800e350:	43500000 	.word	0x43500000
 800e354:	ffff3cb0 	.word	0xffff3cb0
 800e358:	3c900000 	.word	0x3c900000

0800e35c <copysign>:
 800e35c:	ec51 0b10 	vmov	r0, r1, d0
 800e360:	ee11 0a90 	vmov	r0, s3
 800e364:	ee10 2a10 	vmov	r2, s0
 800e368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e36c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e370:	ea41 0300 	orr.w	r3, r1, r0
 800e374:	ec43 2b10 	vmov	d0, r2, r3
 800e378:	4770      	bx	lr
	...

0800e37c <_init>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	bf00      	nop
 800e380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e382:	bc08      	pop	{r3}
 800e384:	469e      	mov	lr, r3
 800e386:	4770      	bx	lr

0800e388 <_fini>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	bf00      	nop
 800e38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38e:	bc08      	pop	{r3}
 800e390:	469e      	mov	lr, r3
 800e392:	4770      	bx	lr
